shadow$provide.module$node_modules$google_auth_library$build$src$auth$jwtaccess=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var jws=require("module$node_modules$jws$index"),LRU=require("module$node_modules$lru_cache$index"),messages=require("module$node_modules$google_auth_library$build$src$messages"),DEFAULT_HEADER={alg:"RS256",typ:"JWT"};global=function(email,key,keyId){this.cache=new LRU({max:500,maxAge:36E5});this.email=email;this.key=key;this.keyId=
keyId};global.prototype.createScopedRequired=function(){messages.warn(messages.JWT_ACCESS_CREATE_SCOPED_DEPRECATED);return!1};global.prototype.getRequestMetadata=function(url,additionalClaims){messages.warn(messages.JWT_ACCESS_GET_REQUEST_METADATA_DEPRECATED);return{headers:this.getRequestHeaders(url,additionalClaims)}};global.prototype.getRequestHeaders=function(url,additionalClaims){var cachedToken=this.cache.get(url);if(cachedToken)return cachedToken;cachedToken=Math.floor((new Date).getTime()/
1E3);cachedToken={iss:this.email,sub:this.email,aud:url,exp:cachedToken+3600,iat:cachedToken};if(additionalClaims)for(var claim in cachedToken)if(additionalClaims[claim])throw Error("The '"+claim+"' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.");claim=this.keyId?Object.assign(Object.assign({},DEFAULT_HEADER),{kid:this.keyId}):DEFAULT_HEADER;additionalClaims=Object.assign(cachedToken,additionalClaims);additionalClaims={Authorization:"Bearer "+
jws.sign({header:claim,payload:additionalClaims,secret:this.key})};this.cache.set(url,additionalClaims);return additionalClaims};global.prototype.fromJSON=function(json){if(!json)throw Error("Must pass in a JSON object containing the service account auth settings.");if(!json.client_email)throw Error("The incoming JSON object does not contain a client_email field");if(!json.private_key)throw Error("The incoming JSON object does not contain a private_key field");this.email=json.client_email;this.key=
json.private_key;this.keyId=json.private_key_id;this.projectId=json.project_id};global.prototype.fromStream=function(inputStream,callback){if(callback)this.fromStreamAsync(inputStream).then(function(r){return callback()},callback);else return this.fromStreamAsync(inputStream)};global.prototype.fromStreamAsync=function(inputStream){var $jscomp$this=this;return new Promise(function(resolve,reject){inputStream||reject(Error("Must pass in a stream containing the service account auth settings."));var s=
"";inputStream.setEncoding("utf8").on("data",function(chunk){return s+=chunk}).on("error",reject).on("end",function(){try{var data=JSON.parse(s);$jscomp$this.fromJSON(data);resolve()}catch(err){reject(err)}})})};exports.JWTAccess=global}
//# sourceMappingURL=module$node_modules$google_auth_library$build$src$auth$jwtaccess.js.map
