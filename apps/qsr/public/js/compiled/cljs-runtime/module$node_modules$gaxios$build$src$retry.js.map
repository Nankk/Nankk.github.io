{
"version":3,
"file":"module$node_modules$gaxios$build$src$retry.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/gaxios/build/src/retry.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$gaxios$build$src$retry\"] = function(global,require,module,exports) {\n\"use strict\";\n// Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nasync function getRetryConfig(err) {\n    let config = getConfig(err);\n    if (!err || !err.config || (!config && !err.config.retry)) {\n        return { shouldRetry: false };\n    }\n    config = config || {};\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    config.retry =\n        config.retry === undefined || config.retry === null ? 3 : config.retry;\n    config.retryDelay = config.retryDelay || 100;\n    config.httpMethodsToRetry = config.httpMethodsToRetry || [\n        'GET',\n        'HEAD',\n        'PUT',\n        'OPTIONS',\n        'DELETE',\n    ];\n    config.noResponseRetries =\n        config.noResponseRetries === undefined || config.noResponseRetries === null\n            ? 2\n            : config.noResponseRetries;\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    const retryRanges = [\n        // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n        // 1xx - Retry (Informational, request still processing)\n        // 2xx - Do not retry (Success)\n        // 3xx - Do not retry (Redirect)\n        // 4xx - Do not retry (Client errors)\n        // 429 - Retry (\"Too Many Requests\")\n        // 5xx - Retry (Server errors)\n        [100, 199],\n        [429, 429],\n        [500, 599],\n    ];\n    config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;\n    // Put the config back into the err\n    err.config.retryConfig = config;\n    // Determine if we should retry the request\n    const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n    if (!shouldRetryFn(err)) {\n        return { shouldRetry: false, config: err.config };\n    }\n    // Calculate time to wait with exponential backoff.\n    // Formula: (2^c - 1 / 2) * 1000\n    const delay = ((Math.pow(2, config.currentRetryAttempt) - 1) / 2) * 1000;\n    // We're going to retry!  Incremenent the counter.\n    err.config.retryConfig.currentRetryAttempt += 1;\n    // Create a promise that invokes the retry after the backOffDelay\n    const backoff = new Promise(resolve => {\n        setTimeout(resolve, delay);\n    });\n    // Notify the user if they added an `onRetryAttempt` handler\n    if (config.onRetryAttempt) {\n        config.onRetryAttempt(err);\n    }\n    // Return the promise in which recalls Gaxios to retry the request\n    await backoff;\n    return { shouldRetry: true, config: err.config };\n}\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\nfunction shouldRetryRequest(err) {\n    const config = getConfig(err);\n    // If there's no config, or retries are disabled, return.\n    if (!config || config.retry === 0) {\n        return false;\n    }\n    // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n    if (!err.response &&\n        (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n        return false;\n    }\n    // Only retry with configured HttpMethods.\n    if (!err.config.method ||\n        config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n        return false;\n    }\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    if (err.response && err.response.status) {\n        let isInRange = false;\n        for (const [min, max] of config.statusCodesToRetry) {\n            const status = err.response.status;\n            if (status >= min && status <= max) {\n                isInRange = true;\n                break;\n            }\n        }\n        if (!isInRange) {\n            return false;\n        }\n    }\n    // If we are out of retry attempts, return\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    if (config.currentRetryAttempt >= config.retry) {\n        return false;\n    }\n    return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\nfunction getConfig(err) {\n    if (err && err.config && err.config.retryConfig) {\n        return err.config.retryConfig;\n    }\n    return;\n}\n//# sourceMappingURL=retry.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","shouldRetryRequest","err","config","getConfig","retry","response","currentRetryAttempt","noResponseRetries","method","httpMethodsToRetry","indexOf","toUpperCase","status","isInRange","statusCodesToRetry","min","max","retryConfig","Object","defineProperty","value","getRetryConfig","retryRanges","shouldRetryFn","delay","backoff","shouldRetry","undefined","retryDelay","Math","pow","Promise","resolve","setTimeout","onRetryAttempt"]
}
