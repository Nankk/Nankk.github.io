{
"version":3,
"file":"module$node_modules$node_forge$lib$md5.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/node-forge/lib/md5.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$md5\"] = function(global,require,module,exports) {\n/**\n * Message Digest Algorithm 5 with 128-bit digest (MD5) implementation.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\nvar md5 = module.exports = forge.md5 = forge.md5 || {};\nforge.md.md5 = forge.md.algorithms.md5 = md5;\n\n/**\n * Creates an MD5 message digest object.\n *\n * @return a message digest object.\n */\nmd5.create = function() {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  // MD5 state contains four 32-bit integers\n  var _state = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for word storage\n  var _w = new Array(16);\n\n  // message digest object\n  var md = {\n    algorithm: 'md5',\n    blockLength: 64,\n    digestLength: 16,\n    // 56-bit length of message so far (does not including padding)\n    messageLength: 0,\n    // true message length\n    fullMessageLength: null,\n    // size of message length in bytes\n    messageLengthSize: 8\n  };\n\n  /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */\n  md.start = function() {\n    // up to 56-bit message length for convenience\n    md.messageLength = 0;\n\n    // full message length (set md.messageLength64 for backwards-compatibility)\n    md.fullMessageLength = md.messageLength64 = [];\n    var int32s = md.messageLengthSize / 4;\n    for(var i = 0; i < int32s; ++i) {\n      md.fullMessageLength.push(0);\n    }\n    _input = forge.util.createBuffer();\n    _state = {\n      h0: 0x67452301,\n      h1: 0xEFCDAB89,\n      h2: 0x98BADCFE,\n      h3: 0x10325476\n    };\n    return md;\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    var len = msg.length;\n    md.messageLength += len;\n    len = [(len / 0x100000000) >>> 0, len >>> 0];\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      md.fullMessageLength[i] += len[1];\n      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);\n      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n      len[0] = (len[1] / 0x100000000) >>> 0;\n    }\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_state, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n\n    return md;\n  };\n\n  /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate MD5 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 448 mod 512. In other words,\n    the data to be digested must be a multiple of 512 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 8 bytes (64\n    bits), that means that the last segment of the data must have 56 bytes\n    (448 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 448 mod 512 because\n    512 - 128 = 448.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 448 mod 512, then 512 padding bits must be added. */\n\n    var finalBlock = forge.util.createBuffer();\n    finalBlock.putBytes(_input.bytes());\n\n    // compute remaining size to be digested (include message length size)\n    var remaining = (\n      md.fullMessageLength[md.fullMessageLength.length - 1] +\n      md.messageLengthSize);\n\n    // add padding for overflow blockSize - overflow\n    // _padding starts with 1 byte with first bit is set (byte value 128), then\n    // there may be up to (blockSize - 1) other pad bytes\n    var overflow = remaining & (md.blockLength - 1);\n    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n\n    // serialize message length in bits in little-endian order; since length\n    // is stored in bytes we multiply by 8 and add carry\n    var bits, carry = 0;\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      bits = md.fullMessageLength[i] * 8 + carry;\n      carry = (bits / 0x100000000) >>> 0;\n      finalBlock.putInt32Le(bits >>> 0);\n    }\n\n    var s2 = {\n      h0: _state.h0,\n      h1: _state.h1,\n      h2: _state.h2,\n      h3: _state.h3\n    };\n    _update(s2, _w, finalBlock);\n    var rval = forge.util.createBuffer();\n    rval.putInt32Le(s2.h0);\n    rval.putInt32Le(s2.h1);\n    rval.putInt32Le(s2.h2);\n    rval.putInt32Le(s2.h3);\n    return rval;\n  };\n\n  return md;\n};\n\n// padding, constant tables for calculating md5\nvar _padding = null;\nvar _g = null;\nvar _r = null;\nvar _k = null;\nvar _initialized = false;\n\n/**\n * Initializes the constant tables.\n */\nfunction _init() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n\n  // g values\n  _g = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12,\n    5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2,\n    0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9];\n\n  // rounds table\n  _r = [\n    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,\n    5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,\n    4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,\n    6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21];\n\n  // get the result of abs(sin(i + 1)) as a 32-bit integer\n  _k = new Array(64);\n  for(var i = 0; i < 64; ++i) {\n    _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);\n  }\n\n  // now initialized\n  _initialized = true;\n}\n\n/**\n * Updates an MD5 state with the given byte buffer.\n *\n * @param s the MD5 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nfunction _update(s, w, bytes) {\n  // consume 512 bit (64 byte) chunks\n  var t, a, b, c, d, f, r, i;\n  var len = bytes.length();\n  while(len >= 64) {\n    // initialize hash value for this chunk\n    a = s.h0;\n    b = s.h1;\n    c = s.h2;\n    d = s.h3;\n\n    // round 1\n    for(i = 0; i < 16; ++i) {\n      w[i] = bytes.getInt32Le();\n      f = d ^ (b & (c ^ d));\n      t = (a + f + _k[i] + w[i]);\n      r = _r[i];\n      a = d;\n      d = c;\n      c = b;\n      b += (t << r) | (t >>> (32 - r));\n    }\n    // round 2\n    for(; i < 32; ++i) {\n      f = c ^ (d & (b ^ c));\n      t = (a + f + _k[i] + w[_g[i]]);\n      r = _r[i];\n      a = d;\n      d = c;\n      c = b;\n      b += (t << r) | (t >>> (32 - r));\n    }\n    // round 3\n    for(; i < 48; ++i) {\n      f = b ^ c ^ d;\n      t = (a + f + _k[i] + w[_g[i]]);\n      r = _r[i];\n      a = d;\n      d = c;\n      c = b;\n      b += (t << r) | (t >>> (32 - r));\n    }\n    // round 4\n    for(; i < 64; ++i) {\n      f = c ^ (b | ~d);\n      t = (a + f + _k[i] + w[_g[i]]);\n      r = _r[i];\n      a = d;\n      d = c;\n      c = b;\n      b += (t << r) | (t >>> (32 - r));\n    }\n\n    // update hash state\n    s.h0 = (s.h0 + a) | 0;\n    s.h1 = (s.h1 + b) | 0;\n    s.h2 = (s.h2 + c) | 0;\n    s.h3 = (s.h3 + d) | 0;\n\n    len -= 64;\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","_init","_padding","String","fromCharCode","forge","util","fillString","_g","_r","_k","Array","i","Math","floor","abs","sin","_initialized","_update","s","w","bytes","t","a","b","c","d","r","len","length","h0","h1","h2","h3","getInt32Le","f","md5","md","algorithms","create","md5.create","_state","_input","createBuffer","_w","algorithm","blockLength","digestLength","messageLength","fullMessageLength","messageLengthSize","md.start","messageLength64","int32s","push","start","update","md.update","msg","encoding","encodeUtf8","putBytes","read","compact","digest","md.digest","finalBlock","substr","bits","carry","putInt32Le","s2","rval"]
}
