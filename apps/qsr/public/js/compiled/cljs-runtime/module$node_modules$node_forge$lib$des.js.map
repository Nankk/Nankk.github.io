{
"version":3,
"file":"module$node_modules$node_forge$lib$des.js",
"lineCount":22,
"mappings":"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",
"sources":["node_modules/node-forge/lib/des.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$des\"] = function(global,require,module,exports) {\n/**\n * DES (Data Encryption Standard) implementation.\n *\n * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.\n * It is based on the BSD-licensed implementation by Paul Tero:\n *\n * Paul Tero, July 2001\n * http://www.tero.co.uk/des/\n *\n * Optimised for performance with large blocks by\n * Michael Hayworth, November 2001\n * http://www.netdealing.com\n *\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2012-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./cipher');\nrequire('./cipherModes');\nrequire('./util');\n\n/* DES API */\nmodule.exports = forge.des = forge.des || {};\n\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\n * cipher.start({iv: iv});\n *\n * Creates an DES cipher object to encrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as binary-encoded strings of bytes or\n * byte buffers.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC' if IV is\n *          given, 'ECB' if null).\n *\n * @return the cipher.\n */\nforge.des.startEncrypting = function(key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: false,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\n *\n * Creates an DES cipher object to encrypt data using the given symmetric key.\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.des.createEncryptionCipher = function(key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: false,\n    mode: mode\n  });\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\n * decipher.start({iv: iv});\n *\n * Creates an DES cipher object to decrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as binary-encoded strings of bytes or\n * byte buffers.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC' if IV is\n *          given, 'ECB' if null).\n *\n * @return the cipher.\n */\nforge.des.startDecrypting = function(key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: true,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\n *\n * Creates an DES cipher object to decrypt data using the given symmetric key.\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.des.createDecryptionCipher = function(key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: true,\n    mode: mode\n  });\n};\n\n/**\n * Creates a new DES cipher algorithm object.\n *\n * @param name the name of the algorithm.\n * @param mode the mode factory function.\n *\n * @return the DES algorithm object.\n */\nforge.des.Algorithm = function(name, mode) {\n  var self = this;\n  self.name = name;\n  self.mode = new mode({\n    blockSize: 8,\n    cipher: {\n      encrypt: function(inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, false);\n      },\n      decrypt: function(inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, true);\n      }\n    }\n  });\n  self._init = false;\n};\n\n/**\n * Initializes this DES algorithm by expanding its key.\n *\n * @param options the options to use.\n *          key the key to use with this algorithm.\n *          decrypt true if the algorithm should be initialized for decryption,\n *            false for encryption.\n */\nforge.des.Algorithm.prototype.initialize = function(options) {\n  if(this._init) {\n    return;\n  }\n\n  var key = forge.util.createBuffer(options.key);\n  if(this.name.indexOf('3DES') === 0) {\n    if(key.length() !== 24) {\n      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);\n    }\n  }\n\n  // do key expansion to 16 or 48 subkeys (single or triple DES)\n  this._keys = _createKeys(key);\n  this._init = true;\n};\n\n/** Register DES algorithms **/\n\nregisterAlgorithm('DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('DES-CTR', forge.cipher.modes.ctr);\n\nregisterAlgorithm('3DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('3DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('3DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('3DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('3DES-CTR', forge.cipher.modes.ctr);\n\nfunction registerAlgorithm(name, mode) {\n  var factory = function() {\n    return new forge.des.Algorithm(name, mode);\n  };\n  forge.cipher.registerAlgorithm(name, factory);\n}\n\n/** DES implementation **/\n\nvar spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];\nvar spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];\nvar spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];\nvar spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];\nvar spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];\nvar spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];\nvar spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];\nvar spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];\n\n/**\n * Create necessary sub keys.\n *\n * @param key the 64-bit or 192-bit key.\n *\n * @return the expanded keys.\n */\nfunction _createKeys(key) {\n  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],\n      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],\n      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],\n      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],\n      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],\n      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],\n      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],\n      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],\n      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],\n      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],\n      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],\n      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],\n      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],\n      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];\n\n  // how many iterations (1 for des, 3 for triple des)\n  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n  var iterations = key.length() > 8 ? 3 : 1;\n\n  // stores the return keys\n  var keys = [];\n\n  // now define the left shifts which need to be done\n  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\n\n  var n = 0, tmp;\n  for(var j = 0; j < iterations; j++) {\n    var left = key.getInt32();\n    var right = key.getInt32();\n\n    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n    right ^= tmp;\n    left ^= (tmp << 4);\n\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= (tmp << -16);\n\n    tmp = ((left >>> 2) ^ right) & 0x33333333;\n    right ^= tmp;\n    left ^= (tmp << 2);\n\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= (tmp << -16);\n\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= (tmp << 1);\n\n    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n    left ^= tmp;\n    right ^= (tmp << 8);\n\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= (tmp << 1);\n\n    // right needs to be shifted and OR'd with last four bits of left\n    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);\n\n    // left needs to be put upside down\n    left = ((right << 24) | ((right << 8) & 0xff0000) |\n      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));\n    right = tmp;\n\n    // now go through and perform these shifts on the left and right keys\n    for(var i = 0; i < shifts.length; ++i) {\n      //shift the keys either one or two bits to the left\n      if(shifts[i]) {\n        left = (left << 2) | (left >>> 26);\n        right = (right << 2) | (right >>> 26);\n      } else {\n        left = (left << 1) | (left >>> 27);\n        right = (right << 1) | (right >>> 27);\n      }\n      left &= -0xf;\n      right &= -0xf;\n\n      // now apply PC-2, in such a way that E is easier when encrypting or\n      // decrypting this conversion will look like PC-2 except only the last 6\n      // bits of each byte are used rather than 48 consecutive bits and the\n      // order of lines will be according to how the S selection functions will\n      // be applied: S2, S4, S6, S8, S1, S3, S5, S7\n      var lefttmp = (\n        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |\n        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |\n        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |\n        pc2bytes6[(left >>> 4) & 0xf]);\n      var righttmp = (\n        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |\n        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |\n        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |\n        pc2bytes13[(right >>> 4) & 0xf]);\n      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;\n      keys[n++] = lefttmp ^ tmp;\n      keys[n++] = righttmp ^ (tmp << 16);\n    }\n  }\n\n  return keys;\n}\n\n/**\n * Updates a single block (1 byte) using DES. The update will either\n * encrypt or decrypt the block.\n *\n * @param keys the expanded keys.\n * @param input the input block (an array of 32-bit words).\n * @param output the updated output block.\n * @param decrypt true to decrypt the block, false to encrypt it.\n */\nfunction _updateBlock(keys, input, output, decrypt) {\n  // set up loops for single or triple DES\n  var iterations = keys.length === 32 ? 3 : 9;\n  var looping;\n  if(iterations === 3) {\n    looping = decrypt ? [30, -2, -2] : [0, 32, 2];\n  } else {\n    looping = (decrypt ?\n      [94, 62, -2, 32, 64, 2, 30, -2, -2] :\n      [0, 32, 2, 62, 30, -2, 64, 96, 2]);\n  }\n\n  var tmp;\n\n  var left = input[0];\n  var right = input[1];\n\n  // first each 64 bit chunk of the message must be permuted according to IP\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= (tmp << 4);\n\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= (tmp << 16);\n\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= (tmp << 2);\n\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= (tmp << 8);\n\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= (tmp << 1);\n\n  // rotate left 1 bit\n  left = ((left << 1) | (left >>> 31));\n  right = ((right << 1) | (right >>> 31));\n\n  for(var j = 0; j < iterations; j += 3) {\n    var endloop = looping[j + 1];\n    var loopinc = looping[j + 2];\n\n    // now go through and perform the encryption or decryption\n    for(var i = looping[j]; i != endloop; i += loopinc) {\n      var right1 = right ^ keys[i];\n      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];\n\n      // passing these bytes through the S selection functions\n      tmp = left;\n      left = right;\n      right = tmp ^ (\n        spfunction2[(right1 >>> 24) & 0x3f] |\n        spfunction4[(right1 >>> 16) & 0x3f] |\n        spfunction6[(right1 >>>  8) & 0x3f] |\n        spfunction8[right1 & 0x3f] |\n        spfunction1[(right2 >>> 24) & 0x3f] |\n        spfunction3[(right2 >>> 16) & 0x3f] |\n        spfunction5[(right2 >>>  8) & 0x3f] |\n        spfunction7[right2 & 0x3f]);\n    }\n    // unreverse left and right\n    tmp = left;\n    left = right;\n    right = tmp;\n  }\n\n  // rotate right 1 bit\n  left = ((left >>> 1) | (left << 31));\n  right = ((right >>> 1) | (right << 31));\n\n  // now perform IP-1, which is IP in the opposite direction\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= (tmp << 1);\n\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= (tmp << 8);\n\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= (tmp << 2);\n\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= (tmp << 16);\n\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= (tmp << 4);\n\n  output[0] = left;\n  output[1] = right;\n}\n\n/**\n * Deprecated. Instead, use:\n *\n * forge.cipher.createCipher('DES-<mode>', key);\n * forge.cipher.createDecipher('DES-<mode>', key);\n *\n * Creates a deprecated DES cipher object. This object's mode will default to\n * CBC (cipher-block-chaining).\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param options the options to use.\n *          key the symmetric key to use (64 or 192 bits).\n *          output the buffer to write to.\n *          decrypt true for decryption, false for encryption.\n *          mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nfunction _createCipher(options) {\n  options = options || {};\n  var mode = (options.mode || 'CBC').toUpperCase();\n  var algorithm = 'DES-' + mode;\n\n  var cipher;\n  if(options.decrypt) {\n    cipher = forge.cipher.createDecipher(algorithm, options.key);\n  } else {\n    cipher = forge.cipher.createCipher(algorithm, options.key);\n  }\n\n  // backwards compatible start API\n  var start = cipher.start;\n  cipher.start = function(iv, options) {\n    // backwards compatibility: support second arg as output buffer\n    var output = null;\n    if(options instanceof forge.util.ByteBuffer) {\n      output = options;\n      options = {};\n    }\n    options = options || {};\n    options.output = output;\n    options.iv = iv;\n    start.call(cipher, options);\n  };\n\n  return cipher;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","registerAlgorithm","name","mode","forge","cipher","factory","des","Algorithm","_updateBlock","keys","input","output","decrypt","iterations","length","looping","left","right","tmp","j","endloop","loopinc","i","right1","right2","spfunction2","spfunction4","spfunction6","spfunction8","spfunction1","spfunction3","spfunction5","spfunction7","_createCipher","options","algorithm","toUpperCase","createDecipher","key","createCipher","start","cipher.start","iv","util","ByteBuffer","call","startEncrypting","forge.des.startEncrypting","createEncryptionCipher","forge.des.createEncryptionCipher","startDecrypting","forge.des.startDecrypting","createDecryptionCipher","forge.des.createDecryptionCipher","forge.des.Algorithm","self","blockSize","encrypt","inBlock","outBlock","_keys","_init","prototype","initialize","forge.des.Algorithm.prototype.initialize","createBuffer","indexOf","Error","pc2bytes0","pc2bytes1","pc2bytes2","pc2bytes3","pc2bytes4","pc2bytes5","pc2bytes6","pc2bytes7","pc2bytes8","pc2bytes9","pc2bytes10","pc2bytes11","pc2bytes12","pc2bytes13","shifts","n","getInt32","lefttmp","righttmp","modes","ecb","cbc","cfb","ofb","ctr"]
}
