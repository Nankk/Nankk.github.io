{
"version":3,
"file":"module$node_modules$node_forge$lib$pkcs12.js",
"lineCount":32,
"mappings":"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",
"sources":["node_modules/node-forge/lib/pkcs12.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$pkcs12\"] = function(global,require,module,exports) {\n/**\n * Javascript implementation of PKCS#12.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * The ASN.1 representation of PKCS#12 is as follows\n * (see ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12-tc1.pdf for details)\n *\n * PFX ::= SEQUENCE {\n *   version  INTEGER {v3(3)}(v3,...),\n *   authSafe ContentInfo,\n *   macData  MacData OPTIONAL\n * }\n *\n * MacData ::= SEQUENCE {\n *   mac DigestInfo,\n *   macSalt OCTET STRING,\n *   iterations INTEGER DEFAULT 1\n * }\n * Note: The iterations default is for historical reasons and its use is\n * deprecated. A higher value, like 1024, is recommended.\n *\n * DigestInfo is defined in PKCS#7 as follows:\n *\n * DigestInfo ::= SEQUENCE {\n *   digestAlgorithm DigestAlgorithmIdentifier,\n *   digest Digest\n * }\n *\n * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of SHA1 there is none.\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *    algorithm OBJECT IDENTIFIER,\n *    parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * Digest ::= OCTET STRING\n *\n *\n * ContentInfo ::= SEQUENCE {\n *   contentType ContentType,\n *   content     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL\n * }\n *\n * ContentType ::= OBJECT IDENTIFIER\n *\n * AuthenticatedSafe ::= SEQUENCE OF ContentInfo\n * -- Data if unencrypted\n * -- EncryptedData if password-encrypted\n * -- EnvelopedData if public key-encrypted\n *\n *\n * SafeContents ::= SEQUENCE OF SafeBag\n *\n * SafeBag ::= SEQUENCE {\n *   bagId     BAG-TYPE.&id ({PKCS12BagSet})\n *   bagValue  [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),\n *   bagAttributes SET OF PKCS12Attribute OPTIONAL\n * }\n *\n * PKCS12Attribute ::= SEQUENCE {\n *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),\n *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})\n * } -- This type is compatible with the X.500 type 'Attribute'\n *\n * PKCS12AttrSet ATTRIBUTE ::= {\n *   friendlyName | -- from PKCS #9\n *   localKeyId, -- from PKCS #9\n *   ... -- Other attributes are allowed\n * }\n *\n * CertBag ::= SEQUENCE {\n *   certId    BAG-TYPE.&id   ({CertTypes}),\n *   certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\n * }\n *\n * x509Certificate BAG-TYPE ::= {OCTET STRING IDENTIFIED BY {certTypes 1}}\n *   -- DER-encoded X.509 certificate stored in OCTET STRING\n *\n * sdsiCertificate BAG-TYPE ::= {IA5String IDENTIFIED BY {certTypes 2}}\n * -- Base64-encoded SDSI certificate stored in IA5String\n *\n * CertTypes BAG-TYPE ::= {\n *   x509Certificate |\n *   sdsiCertificate,\n *   ... -- For future extensions\n * }\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./hmac');\nrequire('./oids');\nrequire('./pkcs7asn1');\nrequire('./pbe');\nrequire('./random');\nrequire('./rsa');\nrequire('./sha1');\nrequire('./util');\nrequire('./x509');\n\n// shortcut for asn.1 & PKI API\nvar asn1 = forge.asn1;\nvar pki = forge.pki;\n\n// shortcut for PKCS#12 API\nvar p12 = module.exports = forge.pkcs12 = forge.pkcs12 || {};\n\nvar contentInfoValidator = {\n  name: 'ContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,  // a ContentInfo\n  constructed: true,\n  value: [{\n    name: 'ContentInfo.contentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'ContentInfo.content',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    constructed: true,\n    captureAsn1: 'content'\n  }]\n};\n\nvar pfxValidator = {\n  name: 'PFX',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PFX.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  },\n  contentInfoValidator, {\n    name: 'PFX.macData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    optional: true,\n    captureAsn1: 'mac',\n    value: [{\n      name: 'PFX.macData.mac',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,  // DigestInfo\n      constructed: true,\n      value: [{\n        name: 'PFX.macData.mac.digestAlgorithm',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,  // DigestAlgorithmIdentifier\n        constructed: true,\n        value: [{\n          name: 'PFX.macData.mac.digestAlgorithm.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'macAlgorithm'\n        }, {\n          name: 'PFX.macData.mac.digestAlgorithm.parameters',\n          tagClass: asn1.Class.UNIVERSAL,\n          captureAsn1: 'macAlgorithmParameters'\n        }]\n      }, {\n        name: 'PFX.macData.mac.digest',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'macDigest'\n      }]\n    }, {\n      name: 'PFX.macData.macSalt',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'macSalt'\n    }, {\n      name: 'PFX.macData.iterations',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      optional: true,\n      capture: 'macIterations'\n    }]\n  }]\n};\n\nvar safeBagValidator = {\n  name: 'SafeBag',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SafeBag.bagId',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'bagId'\n  }, {\n    name: 'SafeBag.bagValue',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    constructed: true,\n    captureAsn1: 'bagValue'\n  }, {\n    name: 'SafeBag.bagAttributes',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    optional: true,\n    capture: 'bagAttributes'\n  }]\n};\n\nvar attributeValidator = {\n  name: 'Attribute',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'Attribute.attrId',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'oid'\n  }, {\n    name: 'Attribute.attrValues',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    capture: 'values'\n  }]\n};\n\nvar certBagValidator = {\n  name: 'CertBag',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'CertBag.certId',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'certId'\n  }, {\n    name: 'CertBag.certValue',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    constructed: true,\n    /* So far we only support X.509 certificates (which are wrapped in\n       an OCTET STRING, hence hard code that here). */\n    value: [{\n      name: 'CertBag.certValue[0]',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Class.OCTETSTRING,\n      constructed: false,\n      capture: 'cert'\n    }]\n  }]\n};\n\n/**\n * Search SafeContents structure for bags with matching attributes.\n *\n * The search can optionally be narrowed by a certain bag type.\n *\n * @param safeContents the SafeContents structure to search in.\n * @param attrName the name of the attribute to compare against.\n * @param attrValue the attribute value to search for.\n * @param [bagType] bag type to narrow search by.\n *\n * @return an array of matching bags.\n */\nfunction _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {\n  var result = [];\n\n  for(var i = 0; i < safeContents.length; i++) {\n    for(var j = 0; j < safeContents[i].safeBags.length; j++) {\n      var bag = safeContents[i].safeBags[j];\n      if(bagType !== undefined && bag.type !== bagType) {\n        continue;\n      }\n      // only filter by bag type, no attribute specified\n      if(attrName === null) {\n        result.push(bag);\n        continue;\n      }\n      if(bag.attributes[attrName] !== undefined &&\n        bag.attributes[attrName].indexOf(attrValue) >= 0) {\n        result.push(bag);\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Converts a PKCS#12 PFX in ASN.1 notation into a PFX object.\n *\n * @param obj The PKCS#12 PFX in ASN.1 notation.\n * @param strict true to use strict DER decoding, false not to (default: true).\n * @param {String} password Password to decrypt with (optional).\n *\n * @return PKCS#12 PFX object.\n */\np12.pkcs12FromAsn1 = function(obj, strict, password) {\n  // handle args\n  if(typeof strict === 'string') {\n    password = strict;\n    strict = true;\n  } else if(strict === undefined) {\n    strict = true;\n  }\n\n  // validate PFX and capture data\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, pfxValidator, capture, errors)) {\n    var error = new Error('Cannot read PKCS#12 PFX. ' +\n      'ASN.1 object is not an PKCS#12 PFX.');\n    error.errors = error;\n    throw error;\n  }\n\n  var pfx = {\n    version: capture.version.charCodeAt(0),\n    safeContents: [],\n\n    /**\n     * Gets bags with matching attributes.\n     *\n     * @param filter the attributes to filter by:\n     *          [localKeyId] the localKeyId to search for.\n     *          [localKeyIdHex] the localKeyId in hex to search for.\n     *          [friendlyName] the friendly name to search for.\n     *          [bagType] bag type to narrow each attribute search by.\n     *\n     * @return a map of attribute type to an array of matching bags or, if no\n     *           attribute was given but a bag type, the map key will be the\n     *           bag type.\n     */\n    getBags: function(filter) {\n      var rval = {};\n\n      var localKeyId;\n      if('localKeyId' in filter) {\n        localKeyId = filter.localKeyId;\n      } else if('localKeyIdHex' in filter) {\n        localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);\n      }\n\n      // filter on bagType only\n      if(localKeyId === undefined && !('friendlyName' in filter) &&\n        'bagType' in filter) {\n        rval[filter.bagType] = _getBagsByAttribute(\n          pfx.safeContents, null, null, filter.bagType);\n      }\n\n      if(localKeyId !== undefined) {\n        rval.localKeyId = _getBagsByAttribute(\n          pfx.safeContents, 'localKeyId',\n          localKeyId, filter.bagType);\n      }\n      if('friendlyName' in filter) {\n        rval.friendlyName = _getBagsByAttribute(\n          pfx.safeContents, 'friendlyName',\n          filter.friendlyName, filter.bagType);\n      }\n\n      return rval;\n    },\n\n    /**\n     * DEPRECATED: use getBags() instead.\n     *\n     * Get bags with matching friendlyName attribute.\n     *\n     * @param friendlyName the friendly name to search for.\n     * @param [bagType] bag type to narrow search by.\n     *\n     * @return an array of bags with matching friendlyName attribute.\n     */\n    getBagsByFriendlyName: function(friendlyName, bagType) {\n      return _getBagsByAttribute(\n        pfx.safeContents, 'friendlyName', friendlyName, bagType);\n    },\n\n    /**\n     * DEPRECATED: use getBags() instead.\n     *\n     * Get bags with matching localKeyId attribute.\n     *\n     * @param localKeyId the localKeyId to search for.\n     * @param [bagType] bag type to narrow search by.\n     *\n     * @return an array of bags with matching localKeyId attribute.\n     */\n    getBagsByLocalKeyId: function(localKeyId, bagType) {\n      return _getBagsByAttribute(\n        pfx.safeContents, 'localKeyId', localKeyId, bagType);\n    }\n  };\n\n  if(capture.version.charCodeAt(0) !== 3) {\n    var error = new Error('PKCS#12 PFX of version other than 3 not supported.');\n    error.version = capture.version.charCodeAt(0);\n    throw error;\n  }\n\n  if(asn1.derToOid(capture.contentType) !== pki.oids.data) {\n    var error = new Error('Only PKCS#12 PFX in password integrity mode supported.');\n    error.oid = asn1.derToOid(capture.contentType);\n    throw error;\n  }\n\n  var data = capture.content.value[0];\n  if(data.tagClass !== asn1.Class.UNIVERSAL ||\n     data.type !== asn1.Type.OCTETSTRING) {\n    throw new Error('PKCS#12 authSafe content data is not an OCTET STRING.');\n  }\n  data = _decodePkcs7Data(data);\n\n  // check for MAC\n  if(capture.mac) {\n    var md = null;\n    var macKeyBytes = 0;\n    var macAlgorithm = asn1.derToOid(capture.macAlgorithm);\n    switch(macAlgorithm) {\n    case pki.oids.sha1:\n      md = forge.md.sha1.create();\n      macKeyBytes = 20;\n      break;\n    case pki.oids.sha256:\n      md = forge.md.sha256.create();\n      macKeyBytes = 32;\n      break;\n    case pki.oids.sha384:\n      md = forge.md.sha384.create();\n      macKeyBytes = 48;\n      break;\n    case pki.oids.sha512:\n      md = forge.md.sha512.create();\n      macKeyBytes = 64;\n      break;\n    case pki.oids.md5:\n      md = forge.md.md5.create();\n      macKeyBytes = 16;\n      break;\n    }\n    if(md === null) {\n      throw new Error('PKCS#12 uses unsupported MAC algorithm: ' + macAlgorithm);\n    }\n\n    // verify MAC (iterations default to 1)\n    var macSalt = new forge.util.ByteBuffer(capture.macSalt);\n    var macIterations = (('macIterations' in capture) ?\n      parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1);\n    var macKey = p12.generateKey(\n      password, macSalt, 3, macIterations, macKeyBytes, md);\n    var mac = forge.hmac.create();\n    mac.start(md, macKey);\n    mac.update(data.value);\n    var macValue = mac.getMac();\n    if(macValue.getBytes() !== capture.macDigest) {\n      throw new Error('PKCS#12 MAC could not be verified. Invalid password?');\n    }\n  }\n\n  _decodeAuthenticatedSafe(pfx, data.value, strict, password);\n  return pfx;\n};\n\n/**\n * Decodes PKCS#7 Data. PKCS#7 (RFC 2315) defines \"Data\" as an OCTET STRING,\n * but it is sometimes an OCTET STRING that is composed/constructed of chunks,\n * each its own OCTET STRING. This is BER-encoding vs. DER-encoding. This\n * function transforms this corner-case into the usual simple,\n * non-composed/constructed OCTET STRING.\n *\n * This function may be moved to ASN.1 at some point to better deal with\n * more BER-encoding issues, should they arise.\n *\n * @param data the ASN.1 Data object to transform.\n */\nfunction _decodePkcs7Data(data) {\n  // handle special case of \"chunked\" data content: an octet string composed\n  // of other octet strings\n  if(data.composed || data.constructed) {\n    var value = forge.util.createBuffer();\n    for(var i = 0; i < data.value.length; ++i) {\n      value.putBytes(data.value[i].value);\n    }\n    data.composed = data.constructed = false;\n    data.value = value.getBytes();\n  }\n  return data;\n}\n\n/**\n * Decode PKCS#12 AuthenticatedSafe (BER encoded) into PFX object.\n *\n * The AuthenticatedSafe is a BER-encoded SEQUENCE OF ContentInfo.\n *\n * @param pfx The PKCS#12 PFX object to fill.\n * @param {String} authSafe BER-encoded AuthenticatedSafe.\n * @param strict true to use strict DER decoding, false not to.\n * @param {String} password Password to decrypt with (optional).\n */\nfunction _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {\n  authSafe = asn1.fromDer(authSafe, strict);  /* actually it's BER encoded */\n\n  if(authSafe.tagClass !== asn1.Class.UNIVERSAL ||\n     authSafe.type !== asn1.Type.SEQUENCE ||\n     authSafe.constructed !== true) {\n    throw new Error('PKCS#12 AuthenticatedSafe expected to be a ' +\n      'SEQUENCE OF ContentInfo');\n  }\n\n  for(var i = 0; i < authSafe.value.length; i++) {\n    var contentInfo = authSafe.value[i];\n\n    // validate contentInfo and capture data\n    var capture = {};\n    var errors = [];\n    if(!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {\n      var error = new Error('Cannot read ContentInfo.');\n      error.errors = errors;\n      throw error;\n    }\n\n    var obj = {\n      encrypted: false\n    };\n    var safeContents = null;\n    var data = capture.content.value[0];\n    switch(asn1.derToOid(capture.contentType)) {\n    case pki.oids.data:\n      if(data.tagClass !== asn1.Class.UNIVERSAL ||\n         data.type !== asn1.Type.OCTETSTRING) {\n        throw new Error('PKCS#12 SafeContents Data is not an OCTET STRING.');\n      }\n      safeContents = _decodePkcs7Data(data).value;\n      break;\n    case pki.oids.encryptedData:\n      safeContents = _decryptSafeContents(data, password);\n      obj.encrypted = true;\n      break;\n    default:\n      var error = new Error('Unsupported PKCS#12 contentType.');\n      error.contentType = asn1.derToOid(capture.contentType);\n      throw error;\n    }\n\n    obj.safeBags = _decodeSafeContents(safeContents, strict, password);\n    pfx.safeContents.push(obj);\n  }\n}\n\n/**\n * Decrypt PKCS#7 EncryptedData structure.\n *\n * @param data ASN.1 encoded EncryptedContentInfo object.\n * @param password The user-provided password.\n *\n * @return The decrypted SafeContents (ASN.1 object).\n */\nfunction _decryptSafeContents(data, password) {\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(\n    data, forge.pkcs7.asn1.encryptedDataValidator, capture, errors)) {\n    var error = new Error('Cannot read EncryptedContentInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var oid = asn1.derToOid(capture.contentType);\n  if(oid !== pki.oids.data) {\n    var error = new Error(\n      'PKCS#12 EncryptedContentInfo ContentType is not Data.');\n    error.oid = oid;\n    throw error;\n  }\n\n  // get cipher\n  oid = asn1.derToOid(capture.encAlgorithm);\n  var cipher = pki.pbe.getCipher(oid, capture.encParameter, password);\n\n  // get encrypted data\n  var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);\n  var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);\n\n  cipher.update(encrypted);\n  if(!cipher.finish()) {\n    throw new Error('Failed to decrypt PKCS#12 SafeContents.');\n  }\n\n  return cipher.output.getBytes();\n}\n\n/**\n * Decode PKCS#12 SafeContents (BER-encoded) into array of Bag objects.\n *\n * The safeContents is a BER-encoded SEQUENCE OF SafeBag.\n *\n * @param {String} safeContents BER-encoded safeContents.\n * @param strict true to use strict DER decoding, false not to.\n * @param {String} password Password to decrypt with (optional).\n *\n * @return {Array} Array of Bag objects.\n */\nfunction _decodeSafeContents(safeContents, strict, password) {\n  // if strict and no safe contents, return empty safes\n  if(!strict && safeContents.length === 0) {\n    return [];\n  }\n\n  // actually it's BER-encoded\n  safeContents = asn1.fromDer(safeContents, strict);\n\n  if(safeContents.tagClass !== asn1.Class.UNIVERSAL ||\n    safeContents.type !== asn1.Type.SEQUENCE ||\n    safeContents.constructed !== true) {\n    throw new Error(\n      'PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.');\n  }\n\n  var res = [];\n  for(var i = 0; i < safeContents.value.length; i++) {\n    var safeBag = safeContents.value[i];\n\n    // validate SafeBag and capture data\n    var capture = {};\n    var errors = [];\n    if(!asn1.validate(safeBag, safeBagValidator, capture, errors)) {\n      var error = new Error('Cannot read SafeBag.');\n      error.errors = errors;\n      throw error;\n    }\n\n    /* Create bag object and push to result array. */\n    var bag = {\n      type: asn1.derToOid(capture.bagId),\n      attributes: _decodeBagAttributes(capture.bagAttributes)\n    };\n    res.push(bag);\n\n    var validator, decoder;\n    var bagAsn1 = capture.bagValue.value[0];\n    switch(bag.type) {\n      case pki.oids.pkcs8ShroudedKeyBag:\n        /* bagAsn1 has a EncryptedPrivateKeyInfo, which we need to decrypt.\n           Afterwards we can handle it like a keyBag,\n           which is a PrivateKeyInfo. */\n        bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);\n        if(bagAsn1 === null) {\n          throw new Error(\n            'Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?');\n        }\n\n        /* fall through */\n      case pki.oids.keyBag:\n        /* A PKCS#12 keyBag is a simple PrivateKeyInfo as understood by our\n           PKI module, hence we don't have to do validation/capturing here,\n           just pass what we already got. */\n        try {\n          bag.key = pki.privateKeyFromAsn1(bagAsn1);\n        } catch(e) {\n          // ignore unknown key type, pass asn1 value\n          bag.key = null;\n          bag.asn1 = bagAsn1;\n        }\n        continue;  /* Nothing more to do. */\n\n      case pki.oids.certBag:\n        /* A PKCS#12 certBag can wrap both X.509 and sdsi certificates.\n           Therefore put the SafeBag content through another validator to\n           capture the fields.  Afterwards check & store the results. */\n        validator = certBagValidator;\n        decoder = function() {\n          if(asn1.derToOid(capture.certId) !== pki.oids.x509Certificate) {\n            var error = new Error(\n              'Unsupported certificate type, only X.509 supported.');\n            error.oid = asn1.derToOid(capture.certId);\n            throw error;\n          }\n\n          // true=produce cert hash\n          var certAsn1 = asn1.fromDer(capture.cert, strict);\n          try {\n            bag.cert = pki.certificateFromAsn1(certAsn1, true);\n          } catch(e) {\n            // ignore unknown cert type, pass asn1 value\n            bag.cert = null;\n            bag.asn1 = certAsn1;\n          }\n        };\n        break;\n\n      default:\n        var error = new Error('Unsupported PKCS#12 SafeBag type.');\n        error.oid = bag.type;\n        throw error;\n    }\n\n    /* Validate SafeBag value (i.e. CertBag, etc.) and capture data if needed. */\n    if(validator !== undefined &&\n       !asn1.validate(bagAsn1, validator, capture, errors)) {\n      var error = new Error('Cannot read PKCS#12 ' + validator.name);\n      error.errors = errors;\n      throw error;\n    }\n\n    /* Call decoder function from above to store the results. */\n    decoder();\n  }\n\n  return res;\n}\n\n/**\n * Decode PKCS#12 SET OF PKCS12Attribute into JavaScript object.\n *\n * @param attributes SET OF PKCS12Attribute (ASN.1 object).\n *\n * @return the decoded attributes.\n */\nfunction _decodeBagAttributes(attributes) {\n  var decodedAttrs = {};\n\n  if(attributes !== undefined) {\n    for(var i = 0; i < attributes.length; ++i) {\n      var capture = {};\n      var errors = [];\n      if(!asn1.validate(attributes[i], attributeValidator, capture, errors)) {\n        var error = new Error('Cannot read PKCS#12 BagAttribute.');\n        error.errors = errors;\n        throw error;\n      }\n\n      var oid = asn1.derToOid(capture.oid);\n      if(pki.oids[oid] === undefined) {\n        // unsupported attribute type, ignore.\n        continue;\n      }\n\n      decodedAttrs[pki.oids[oid]] = [];\n      for(var j = 0; j < capture.values.length; ++j) {\n        decodedAttrs[pki.oids[oid]].push(capture.values[j].value);\n      }\n    }\n  }\n\n  return decodedAttrs;\n}\n\n/**\n * Wraps a private key and certificate in a PKCS#12 PFX wrapper. If a\n * password is provided then the private key will be encrypted.\n *\n * An entire certificate chain may also be included. To do this, pass\n * an array for the \"cert\" parameter where the first certificate is\n * the one that is paired with the private key and each subsequent one\n * verifies the previous one. The certificates may be in PEM format or\n * have been already parsed by Forge.\n *\n * @todo implement password-based-encryption for the whole package\n *\n * @param key the private key.\n * @param cert the certificate (may be an array of certificates in order\n *          to specify a certificate chain).\n * @param password the password to use, null for none.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          useMac true to include a MAC, false not to, defaults to true.\n *          localKeyId the local key ID to use, in hex.\n *          friendlyName the friendly name to use.\n *          generateLocalKeyId true to generate a random local key ID,\n *            false not to, defaults to true.\n *\n * @return the PKCS#12 PFX ASN.1 object.\n */\np12.toPkcs12Asn1 = function(key, cert, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || options.encAlgorithm || 'aes128';\n  if(!('useMac' in options)) {\n    options.useMac = true;\n  }\n  if(!('localKeyId' in options)) {\n    options.localKeyId = null;\n  }\n  if(!('generateLocalKeyId' in options)) {\n    options.generateLocalKeyId = true;\n  }\n\n  var localKeyId = options.localKeyId;\n  var bagAttrs;\n  if(localKeyId !== null) {\n    localKeyId = forge.util.hexToBytes(localKeyId);\n  } else if(options.generateLocalKeyId) {\n    // use SHA-1 of paired cert, if available\n    if(cert) {\n      var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;\n      if(typeof pairedCert === 'string') {\n        pairedCert = pki.certificateFromPem(pairedCert);\n      }\n      var sha1 = forge.md.sha1.create();\n      sha1.update(asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes());\n      localKeyId = sha1.digest().getBytes();\n    } else {\n      // FIXME: consider using SHA-1 of public key (which can be generated\n      // from private key components), see: cert.generateSubjectKeyIdentifier\n      // generate random bytes\n      localKeyId = forge.random.getBytes(20);\n    }\n  }\n\n  var attrs = [];\n  if(localKeyId !== null) {\n    attrs.push(\n      // localKeyID\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // attrId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.localKeyId).getBytes()),\n        // attrValues\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n            localKeyId)\n        ])\n      ]));\n  }\n  if('friendlyName' in options) {\n    attrs.push(\n      // friendlyName\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // attrId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.friendlyName).getBytes()),\n        // attrValues\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BMPSTRING, false,\n            options.friendlyName)\n        ])\n      ]));\n  }\n\n  if(attrs.length > 0) {\n    bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);\n  }\n\n  // collect contents for AuthenticatedSafe\n  var contents = [];\n\n  // create safe bag(s) for certificate chain\n  var chain = [];\n  if(cert !== null) {\n    if(forge.util.isArray(cert)) {\n      chain = cert;\n    } else {\n      chain = [cert];\n    }\n  }\n\n  var certSafeBags = [];\n  for(var i = 0; i < chain.length; ++i) {\n    // convert cert from PEM as necessary\n    cert = chain[i];\n    if(typeof cert === 'string') {\n      cert = pki.certificateFromPem(cert);\n    }\n\n    // SafeBag\n    var certBagAttrs = (i === 0) ? bagAttrs : undefined;\n    var certAsn1 = pki.certificateToAsn1(cert);\n    var certSafeBag =\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // bagId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.certBag).getBytes()),\n        // bagValue\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          // CertBag\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // certId\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n              asn1.oidToDer(pki.oids.x509Certificate).getBytes()),\n            // certValue (x509Certificate)\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n              asn1.create(\n                asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n                asn1.toDer(certAsn1).getBytes())\n            ])])]),\n        // bagAttributes (OPTIONAL)\n        certBagAttrs\n      ]);\n    certSafeBags.push(certSafeBag);\n  }\n\n  if(certSafeBags.length > 0) {\n    // SafeContents\n    var certSafeContents = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, certSafeBags);\n\n    // ContentInfo\n    var certCI =\n      // PKCS#7 ContentInfo\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // contentType\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          // OID for the content type is 'data'\n          asn1.oidToDer(pki.oids.data).getBytes()),\n        // content\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n            asn1.toDer(certSafeContents).getBytes())\n        ])\n      ]);\n    contents.push(certCI);\n  }\n\n  // create safe contents for private key\n  var keyBag = null;\n  if(key !== null) {\n    // SafeBag\n    var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));\n    if(password === null) {\n      // no encryption\n      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // bagId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.keyBag).getBytes()),\n        // bagValue\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          // PrivateKeyInfo\n          pkAsn1\n        ]),\n        // bagAttributes (OPTIONAL)\n        bagAttrs\n      ]);\n    } else {\n      // encrypted PrivateKeyInfo\n      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // bagId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()),\n        // bagValue\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          // EncryptedPrivateKeyInfo\n          pki.encryptPrivateKeyInfo(pkAsn1, password, options)\n        ]),\n        // bagAttributes (OPTIONAL)\n        bagAttrs\n      ]);\n    }\n\n    // SafeContents\n    var keySafeContents =\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]);\n\n    // ContentInfo\n    var keyCI =\n      // PKCS#7 ContentInfo\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // contentType\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          // OID for the content type is 'data'\n          asn1.oidToDer(pki.oids.data).getBytes()),\n        // content\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n            asn1.toDer(keySafeContents).getBytes())\n        ])\n      ]);\n    contents.push(keyCI);\n  }\n\n  // create AuthenticatedSafe by stringing together the contents\n  var safe = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, contents);\n\n  var macData;\n  if(options.useMac) {\n    // MacData\n    var sha1 = forge.md.sha1.create();\n    var macSalt = new forge.util.ByteBuffer(\n      forge.random.getBytes(options.saltSize));\n    var count = options.count;\n    // 160-bit key\n    var key = p12.generateKey(password, macSalt, 3, count, 20);\n    var mac = forge.hmac.create();\n    mac.start(sha1, key);\n    mac.update(asn1.toDer(safe).getBytes());\n    var macValue = mac.getMac();\n    macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // mac DigestInfo\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // digestAlgorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // algorithm = SHA-1\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(pki.oids.sha1).getBytes()),\n          // parameters = Null\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n        ]),\n        // digest\n        asn1.create(\n          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,\n          false, macValue.getBytes())\n      ]),\n      // macSalt OCTET STRING\n      asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macSalt.getBytes()),\n      // iterations INTEGER (XXX: Only support count < 65536)\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        asn1.integerToDer(count).getBytes()\n      )\n    ]);\n  }\n\n  // PFX\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (3)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(3).getBytes()),\n    // PKCS#7 ContentInfo\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // contentType\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        // OID for the content type is 'data'\n        asn1.oidToDer(pki.oids.data).getBytes()),\n      // content\n      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n        asn1.create(\n          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n          asn1.toDer(safe).getBytes())\n      ])\n    ]),\n    macData\n  ]);\n};\n\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */\np12.generateKey = forge.pbe.generatePkcs12Key;\n\n};"],
"names":["shadow$provide","global","require","module","exports","_getBagsByAttribute","safeContents","attrName","attrValue","bagType","result","i","length","j","safeBags","bag","undefined","type","push","attributes","indexOf","_decodePkcs7Data","data","composed","constructed","value","forge","util","createBuffer","putBytes","getBytes","_decodeAuthenticatedSafe","pfx","authSafe","strict","password","asn1","fromDer","tagClass","Class","UNIVERSAL","Type","SEQUENCE","Error","capture","errors","validate","contentInfo","contentInfoValidator","error","obj","encrypted","content","derToOid","contentType","pki","oids","OCTETSTRING","encryptedData","pkcs7","encryptedDataValidator","oid","encAlgorithm","cipher","pbe","getCipher","encParameter","encryptedContentAsn1","update","finish","output","_decodeSafeContents","res","safeBag","safeBagValidator","bagId","_decodeBagAttributes","bagAttributes","bagAsn1","bagValue","pkcs8ShroudedKeyBag","decryptPrivateKeyInfo","keyBag","key","privateKeyFromAsn1","e","certBag","validator","certBagValidator","decoder","certId","x509Certificate","certAsn1","cert","certificateFromAsn1","name","decodedAttrs","attributeValidator","values","p12","pkcs12","OID","CONTEXT_SPECIFIC","captureAsn1","pfxValidator","INTEGER","optional","SET","pkcs12FromAsn1","p12.pkcs12FromAsn1","version","charCodeAt","getBags","filter","rval","localKeyId","hexToBytes","localKeyIdHex","friendlyName","getBagsByFriendlyName","getBagsByLocalKeyId","mac","md","macKeyBytes","macAlgorithm","sha1","create","sha256","sha384","sha512","md5","macSalt","ByteBuffer","macIterations","parseInt","bytesToHex","macKey","generateKey","hmac","start","getMac","macValue","macDigest","toPkcs12Asn1","p12.toPkcs12Asn1","options","saltSize","count","algorithm","useMac","generateLocalKeyId","bagAttrs","pairedCert","isArray","certificateFromPem","toDer","certificateToAsn1","digest","random","attrs","oidToDer","BMPSTRING","contents","chain","certSafeBags","certBagAttrs","certSafeBag","certSafeContents","certCI","pkAsn1","wrapRsaPrivateKey","privateKeyToAsn1","encryptPrivateKeyInfo","keySafeContents","keyCI","safe","macData","NULL","integerToDer","generatePkcs12Key"]
}
