{"version":3,"sources":["qsr/events.cljs"],"mappings":";;;;AAKA,AAAA,AAACA,AAEA,AAAKC,AAAEA;AAAP,AACE,AAACC,AAAQC;;AACTA;;AAEH,AAAA,AAACH,AAEA,AAAAI,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASJ;AAAT,AAAAK,AAAAD,AAAA,AAAA,AAAWG;AAAX,AACE,AAAMC,AAAM,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACH,AAAAA,AAAAA;;AACPI,AAAW,AAACC,AAAM,AAAA,AAACG;AAADF,AAAAC;AAAA,AAAe,AAAM,AAACE,AAAE,AAAAC,AAAA;AAAA,AAAA,AAAAH,AAAAA,AAAAG,AAAAH,AAAAG;AAAS,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACV,AAAAA,AAAAA;;AAAnB,AAAAK;;AAAA;;;AAAkCJ;AACnEU,AAAc,AAAA,AAACC,AAAOb,AAAU;AAAKC;AAAL,AACE,AAAA,AAACa,AAAQ,AAAA,AAACE;AAADD;AAAA,AAAM,AAAAA,AAAA,AAAA,AAACE;;AAA0BhB;;;AAHlF,AAIE,AAAA,AAAA,AAAA,AAAA,AAACiB,AAAUN,AAAsBR;;AAAjC,AAAyD,AAAA,AAACe;;;;AAE/D,AAAA,AAAC1B,AAEC,AAAA2B,AAAKpB;AAAL,AAAA,AAAAqB,AAAAD;AAAA,AAAArB,AAAAsB,AAAA,AAAA,AAAS3B;AAAT,AAAAK,AAAAsB,AAAA,AAAA,AAAWnB;AAAX,AACE,AAAA,AAACe,AAAMjB,AAAUE;;AAErB,AAAA,AAACT,AAEC,AAAA6B,AAAKtB;AAAL,AAAA,AAAAuB,AAAAD;AAAA,AAAAvB,AAAAwB,AAAA,AAAA,AAAS7B;AAAT,AAAAK,AAAAwB,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACP,AAAMjB,AAAYwB;;AAEvB,AAAA,AAAC/B,AAEC,AAAAgC,AAAKzB;AAAL,AAAA,AAAA0B,AAAAD;AAAA,AAAA1B,AAAA2B,AAAA,AAAA,AAAShC;AAAT,AAAAK,AAAA2B,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACV,AAAMjB,AAAe2B;;AAE1B,AAAA,AAAClC,AAEC,AAAKO,AAAGN;AAAR,AACE,AAAMkC,AAAa,AAACC,AAAQ,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC9B,AAAAA,AAAAA;AAAa,AAAA+B,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC/B,AAAAA,AAAAA;;AAA3C,AACE,AAAA,AAACiB,AAAMjB,AACA,AAAAgC,AAAM,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACnC,AAAAA,AAAAA;;AAAPgC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACa,AAAA,AAAClB,AAAQc;;;AADtB;AAEc,AAAA,AAACd,AAAQ,AAACsB,AAAQR;;;;AAFhC,AAAA,AAAAM,AAAA,AAAA,AAAAF;;;;;AAIb,AAAA,AAACvC,AAEC,AAAA4C,AAAKrC;AAAL,AAAA,AAAAsC,AAAAD;AAAA,AAAAtC,AAAAuC,AAAA,AAAA,AAAS5C;AAAT,AAAAK,AAAAuC,AAAA,AAAA,AAAWC;AAAX,AACE,AAAMC,AAAK,AAAA,AAAA,AAACD,AAAAA,AAAAA;AACNE,AAAG,AAAA,AAAA,AAACF,AAAAA,AAAAA;AADV,AAEMvC,AACA,AAAA,AAAA,AAACa;AAAD6B;AAAA,AAAgB,AAAA,AAAC5B,AAAQ,AAAA4B,AAACC,AAAQF,AAAG,AAAAC,AAAAA,AAAAA,AAAGF,AAAAA,AAAMA,AAAK,AAAAE,AAAAA,AAAAA,AAAGD,AAAAA","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","qsr.db/default-db","p__33957","vec__33958","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","item","items","G__33961","select-idx","cljs.core/first","p1__33955#","p2__33954#","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__33962","G__33963","unselected-db","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__33956#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/constantly","p__33964","vec__33965","p__33968","vec__33969","by","p__33972","vec__33973","order","sorted-items","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","G__33976","G__33977","G__33978","cljs.core/Keyword","js/Error","G__33979","cljs.core/reverse","p__33981","vec__33982","from-to","from","to","p1__33980#","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns qsr.events\n  (:require\n   [re-frame.core :as re-frame]\n   [qsr.db :as db]))\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   (println db/default-db)\n   db/default-db))\n\n(re-frame/reg-event-db\n ::select-item\n (fn [db [_ item]]\n   (let [items (db :items)\n         select-idx (first (keep-indexed #(when (= (%2 :id) (item :id)) %1) items))\n         unselected-db (update db :items (fn [item]\n                                           (into [] (map #(assoc % :selected? false) item))))]\n     (update-in unselected-db [:items select-idx :selected?] #(constantly true)))))\n\n(re-frame/reg-event-db\n  ::set-items\n  (fn [db [_ items]]\n    (assoc db :items items)))\n\n(re-frame/reg-event-db\n  ::set-sort-by\n  (fn [db [_ by]]\n    (assoc db :sort-by by)))\n\n(re-frame/reg-event-db\n  ::set-sort-order\n  (fn [db [_ order]]\n    (assoc db :sort-order order)))\n\n(re-frame/reg-event-db\n  ::sort-items\n  (fn [db _]\n    (let [sorted-items (sort-by (db :sort-by) (db :items))]\n      (assoc db :items\n             (case (db :sort-order)\n               :ascending (into [] sorted-items)\n               :descending (into [] (reverse sorted-items)))))))\n\n(re-frame/reg-event-db\n  ::on-manually-sorted\n  (fn [db [_ from-to]]\n    (let [from (from-to 0)\n          to (from-to 1)]\n      (-> db\n          (update :items #(into [] (assoc % to (% from) from (% to))))))))\n"]}