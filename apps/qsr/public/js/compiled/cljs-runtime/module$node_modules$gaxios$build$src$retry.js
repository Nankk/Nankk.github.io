shadow$provide.module$node_modules$gaxios$build$src$retry=function(global,require,module,exports){function shouldRetryRequest(err){var config=getConfig(err);if(!config||0===config.retry||!err.response&&(config.currentRetryAttempt||0)>=config.noResponseRetries||!err.config.method||0>config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()))return!1;if(err.response&&err.response.status){for(var isInRange=!1,$jscomp$iter$1=$jscomp.makeIterator(config.statusCodesToRetry),$jscomp$key$=$jscomp$iter$1.next();!$jscomp$key$.done;$jscomp$key$=
$jscomp$iter$1.next()){var $jscomp$destructuring$var1=$jscomp.makeIterator($jscomp$key$.value);$jscomp$key$=$jscomp$destructuring$var1.next().value;$jscomp$destructuring$var1=$jscomp$destructuring$var1.next().value;var status=err.response.status;if(status>=$jscomp$key$&&status<=$jscomp$destructuring$var1){isInRange=!0;break}}if(!isInRange)return!1}config.currentRetryAttempt=config.currentRetryAttempt||0;return config.currentRetryAttempt>=config.retry?!1:!0}function getConfig(err){if(err&&err.config&&
err.config.retryConfig)return err.config.retryConfig}Object.defineProperty(exports,"__esModule",{value:!0});exports.getRetryConfig=function(err){var config,retryRanges,shouldRetryFn,delay,backoff;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress){config=getConfig(err);if(!err||!err.config||!config&&!err.config.retry)return $jscomp$generator$context.return({shouldRetry:!1});config=config||{};config.currentRetryAttempt=
config.currentRetryAttempt||0;config.retry=void 0===config.retry||null===config.retry?3:config.retry;config.retryDelay=config.retryDelay||100;config.httpMethodsToRetry=config.httpMethodsToRetry||["GET","HEAD","PUT","OPTIONS","DELETE"];config.noResponseRetries=void 0===config.noResponseRetries||null===config.noResponseRetries?2:config.noResponseRetries;retryRanges=[[100,199],[429,429],[500,599]];config.statusCodesToRetry=config.statusCodesToRetry||retryRanges;err.config.retryConfig=config;shouldRetryFn=
config.shouldRetry||shouldRetryRequest;if(!shouldRetryFn(err))return $jscomp$generator$context.return({shouldRetry:!1,config:err.config});delay=(Math.pow(2,config.currentRetryAttempt)-1)/2*1E3;err.config.retryConfig.currentRetryAttempt+=1;backoff=new Promise(function(resolve){setTimeout(resolve,delay)});if(config.onRetryAttempt)config.onRetryAttempt(err);return $jscomp$generator$context.yield(backoff,2)}return $jscomp$generator$context.return({shouldRetry:!0,config:err.config})})}}
//# sourceMappingURL=module$node_modules$gaxios$build$src$retry.js.map
