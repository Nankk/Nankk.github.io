shadow$provide.module$node_modules$node_forge$lib$ssh=function(global,require,module,exports){function _addBigIntegerToBuffer(buffer,val){val=val.toString(16);"8"<=val[0]&&(val="00"+val);val=forge.util.hexToBytes(val);buffer.putInt32(val.length);buffer.putBytes(val)}function _addStringToBuffer(buffer,val){buffer.putInt32(val.length);buffer.putString(val)}function _sha1(){for(var sha=forge.md.sha1.create(),num=arguments.length,i=0;i<num;++i)sha.update(arguments[i]);return sha.digest()}var forge=require("module$node_modules$node_forge$lib$forge");
require("module$node_modules$node_forge$lib$aes");require("module$node_modules$node_forge$lib$hmac");require("module$node_modules$node_forge$lib$md5");require("module$node_modules$node_forge$lib$sha1");require("module$node_modules$node_forge$lib$util");global=module.exports=forge.ssh=forge.ssh||{};global.privateKeyToPutty=function(privateKey,passphrase,comment){comment=comment||"";passphrase=passphrase||"";var encryptionAlgorithm=""===passphrase?"none":"aes256-cbc";var ppk="PuTTY-User-Key-File-2: ssh-rsa\r\nEncryption: "+
(encryptionAlgorithm+"\r\nComment: ")+(comment+"\r\n");var pubbuffer=forge.util.createBuffer();_addStringToBuffer(pubbuffer,"ssh-rsa");_addBigIntegerToBuffer(pubbuffer,privateKey.e);_addBigIntegerToBuffer(pubbuffer,privateKey.n);var pub=forge.util.encode64(pubbuffer.bytes(),64),length=Math.floor(pub.length/66)+1;ppk+="Public-Lines: "+length+"\r\n";ppk+=pub;pub=forge.util.createBuffer();_addBigIntegerToBuffer(pub,privateKey.d);_addBigIntegerToBuffer(pub,privateKey.p);_addBigIntegerToBuffer(pub,privateKey.q);
_addBigIntegerToBuffer(pub,privateKey.qInv);passphrase?(length=pub.length()+16-1,length-=length%16,privateKey=_sha1(pub.bytes()),privateKey.truncate(privateKey.length()-length+pub.length()),pub.putBuffer(privateKey),length=forge.util.createBuffer(),length.putBuffer(_sha1("\x00\x00\x00\x00",passphrase)),length.putBuffer(_sha1("\x00\x00\x00",passphrase)),length=forge.aes.createEncryptionCipher(length.truncate(8),"CBC"),length.start(forge.util.createBuffer().fillWithByte(0,16)),length.update(pub.copy()),
length.finish(),length=length.output,length.truncate(16),privateKey=forge.util.encode64(length.bytes(),64)):privateKey=forge.util.encode64(pub.bytes(),64);length=Math.floor(privateKey.length/66)+1;ppk+="\r\nPrivate-Lines: "+length+"\r\n";ppk+=privateKey;passphrase=_sha1("putty-private-key-file-mac-key",passphrase);length=forge.util.createBuffer();_addStringToBuffer(length,"ssh-rsa");_addStringToBuffer(length,encryptionAlgorithm);_addStringToBuffer(length,comment);length.putInt32(pubbuffer.length());
length.putBuffer(pubbuffer);length.putInt32(pub.length());length.putBuffer(pub);comment=forge.hmac.create();comment.start("sha1",passphrase);comment.update(length.bytes());return ppk+="\r\nPrivate-MAC: "+comment.digest().toHex()+"\r\n"};global.publicKeyToOpenSSH=function(key,comment){comment=comment||"";var buffer=forge.util.createBuffer();_addStringToBuffer(buffer,"ssh-rsa");_addBigIntegerToBuffer(buffer,key.e);_addBigIntegerToBuffer(buffer,key.n);return"ssh-rsa "+forge.util.encode64(buffer.bytes())+
" "+comment};global.privateKeyToOpenSSH=function(privateKey,passphrase){return passphrase?forge.pki.encryptRsaPrivateKey(privateKey,passphrase,{legacy:!0,algorithm:"aes128"}):forge.pki.privateKeyToPem(privateKey)};global.getPublicKeyFingerprint=function(key,options){options=options||{};var md=options.md||forge.md.md5.create(),buffer=forge.util.createBuffer();_addStringToBuffer(buffer,"ssh-rsa");_addBigIntegerToBuffer(buffer,key.e);_addBigIntegerToBuffer(buffer,key.n);md.start();md.update(buffer.getBytes());
key=md.digest();if("hex"===options.encoding)return key=key.toHex(),options.delimiter?key.match(/.{2}/g).join(options.delimiter):key;if("binary"===options.encoding)return key.getBytes();if(options.encoding)throw Error('Unknown encoding "'+options.encoding+'".');return key}}
//# sourceMappingURL=module$node_modules$node_forge$lib$ssh.js.map
