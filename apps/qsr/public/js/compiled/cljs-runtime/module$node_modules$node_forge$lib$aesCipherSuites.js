shadow$provide.module$node_modules$node_forge$lib$aesCipherSuites=function(global,require,module,exports){function initConnectionState(state,c,sp){c=c.entity===forge.tls.ConnectionEnd.client;state.read.cipherState={init:!1,cipher:forge.cipher.createDecipher("AES-CBC",c?sp.keys.server_write_key:sp.keys.client_write_key),iv:c?sp.keys.server_write_IV:sp.keys.client_write_IV};state.write.cipherState={init:!1,cipher:forge.cipher.createCipher("AES-CBC",c?sp.keys.client_write_key:sp.keys.server_write_key),
iv:c?sp.keys.client_write_IV:sp.keys.server_write_IV};state.read.cipherFunction=decrypt_aes_cbc_sha1;state.write.cipherFunction=encrypt_aes_cbc_sha1;state.read.macLength=state.write.macLength=sp.mac_length;state.read.macFunction=state.write.macFunction=tls.hmac_sha1}function encrypt_aes_cbc_sha1(record,s){var rval=!1,mac=s.macFunction(s.macKey,s.sequenceNumber,record);record.fragment.putBytes(mac);s.updateSequenceNumber();mac=record.version.minor===tls.Versions.TLS_1_0.minor?s.cipherState.init?null:
s.cipherState.iv:forge.random.getBytesSync(16);s.cipherState.init=!0;s=s.cipherState.cipher;s.start({iv:mac});record.version.minor>=tls.Versions.TLS_1_1.minor&&s.output.putBytes(mac);s.update(record.fragment);s.finish(encrypt_aes_cbc_sha1_padding)&&(record.fragment=s.output,record.length=record.fragment.length(),rval=!0);return rval}function encrypt_aes_cbc_sha1_padding(blockSize,input,decrypt){decrypt||(blockSize-=input.length()%blockSize,input.fillWithByte(blockSize-1,blockSize));return!0}function decrypt_aes_cbc_sha1_padding(blockSize,
output,decrypt){blockSize=!0;if(decrypt){decrypt=output.length();for(var paddingLength=output.last(),i=decrypt-1-paddingLength;i<decrypt-1;++i)blockSize=blockSize&&output.at(i)==paddingLength;blockSize&&output.truncate(paddingLength+1)}return blockSize}function decrypt_aes_cbc_sha1(record,s){var rval=record.version.minor===tls.Versions.TLS_1_0.minor?s.cipherState.init?null:s.cipherState.iv:record.fragment.getBytes(16);s.cipherState.init=!0;var cipher=s.cipherState.cipher;cipher.start({iv:rval});cipher.update(record.fragment);
rval=cipher.finish(decrypt_aes_cbc_sha1_padding);var macLen=s.macLength,mac=forge.random.getBytesSync(macLen),len=cipher.output.length();len>=macLen?(record.fragment=cipher.output.getBytes(len-macLen),mac=cipher.output.getBytes(macLen)):record.fragment=cipher.output.getBytes();record.fragment=forge.util.createBuffer(record.fragment);record.length=record.fragment.length();record=s.macFunction(s.macKey,s.sequenceNumber,record);s.updateSequenceNumber();s=s.macKey;cipher=forge.hmac.create();cipher.start("SHA1",
s);cipher.update(mac);mac=cipher.digest().getBytes();cipher.start(null,null);cipher.update(record);record=cipher.digest().getBytes();return mac===record&&rval}var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$aes");require("module$node_modules$node_forge$lib$tls");var tls=module.exports=forge.tls;tls.CipherSuites.TLS_RSA_WITH_AES_128_CBC_SHA={id:[0,47],name:"TLS_RSA_WITH_AES_128_CBC_SHA",initSecurityParameters:function(sp){sp.bulk_cipher_algorithm=
tls.BulkCipherAlgorithm.aes;sp.cipher_type=tls.CipherType.block;sp.enc_key_length=16;sp.block_length=16;sp.fixed_iv_length=16;sp.record_iv_length=16;sp.mac_algorithm=tls.MACAlgorithm.hmac_sha1;sp.mac_length=20;sp.mac_key_length=20},initConnectionState:initConnectionState};tls.CipherSuites.TLS_RSA_WITH_AES_256_CBC_SHA={id:[0,53],name:"TLS_RSA_WITH_AES_256_CBC_SHA",initSecurityParameters:function(sp){sp.bulk_cipher_algorithm=tls.BulkCipherAlgorithm.aes;sp.cipher_type=tls.CipherType.block;sp.enc_key_length=
32;sp.block_length=16;sp.fixed_iv_length=16;sp.record_iv_length=16;sp.mac_algorithm=tls.MACAlgorithm.hmac_sha1;sp.mac_length=20;sp.mac_key_length=20},initConnectionState:initConnectionState}}
//# sourceMappingURL=module$node_modules$node_forge$lib$aesCipherSuites.js.map
