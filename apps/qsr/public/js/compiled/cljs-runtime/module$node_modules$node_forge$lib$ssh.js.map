{
"version":3,
"file":"module$node_modules$node_forge$lib$ssh.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/node-forge/lib/ssh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$ssh\"] = function(global,require,module,exports) {\n/**\n * Functions to output keys in SSH-friendly formats.\n *\n * This is part of the Forge project which may be used under the terms of\n * either the BSD License or the GNU General Public License (GPL) Version 2.\n *\n * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE\n *\n * @author https://github.com/shellac\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./hmac');\nrequire('./md5');\nrequire('./sha1');\nrequire('./util');\n\nvar ssh = module.exports = forge.ssh = forge.ssh || {};\n\n/**\n * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.\n *\n * @param privateKey the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n * @param comment a comment to include in the key file.\n *\n * @return the PPK file as a string.\n */\nssh.privateKeyToPutty = function(privateKey, passphrase, comment) {\n  comment = comment || '';\n  passphrase = passphrase || '';\n  var algorithm = 'ssh-rsa';\n  var encryptionAlgorithm = (passphrase === '') ? 'none' : 'aes256-cbc';\n\n  var ppk = 'PuTTY-User-Key-File-2: ' + algorithm + '\\r\\n';\n  ppk += 'Encryption: ' + encryptionAlgorithm + '\\r\\n';\n  ppk += 'Comment: ' + comment + '\\r\\n';\n\n  // public key into buffer for ppk\n  var pubbuffer = forge.util.createBuffer();\n  _addStringToBuffer(pubbuffer, algorithm);\n  _addBigIntegerToBuffer(pubbuffer, privateKey.e);\n  _addBigIntegerToBuffer(pubbuffer, privateKey.n);\n\n  // write public key\n  var pub = forge.util.encode64(pubbuffer.bytes(), 64);\n  var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \\r\\n\n  ppk += 'Public-Lines: ' + length + '\\r\\n';\n  ppk += pub;\n\n  // private key into a buffer\n  var privbuffer = forge.util.createBuffer();\n  _addBigIntegerToBuffer(privbuffer, privateKey.d);\n  _addBigIntegerToBuffer(privbuffer, privateKey.p);\n  _addBigIntegerToBuffer(privbuffer, privateKey.q);\n  _addBigIntegerToBuffer(privbuffer, privateKey.qInv);\n\n  // optionally encrypt the private key\n  var priv;\n  if(!passphrase) {\n    // use the unencrypted buffer\n    priv = forge.util.encode64(privbuffer.bytes(), 64);\n  } else {\n    // encrypt RSA key using passphrase\n    var encLen = privbuffer.length() + 16 - 1;\n    encLen -= encLen % 16;\n\n    // pad private key with sha1-d data -- needs to be a multiple of 16\n    var padding = _sha1(privbuffer.bytes());\n\n    padding.truncate(padding.length() - encLen + privbuffer.length());\n    privbuffer.putBuffer(padding);\n\n    var aeskey = forge.util.createBuffer();\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x00', passphrase));\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x01', passphrase));\n\n    // encrypt some bytes using CBC mode\n    // key is 40 bytes, so truncate *by* 8 bytes\n    var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), 'CBC');\n    cipher.start(forge.util.createBuffer().fillWithByte(0, 16));\n    cipher.update(privbuffer.copy());\n    cipher.finish();\n    var encrypted = cipher.output;\n\n    // Note: this appears to differ from Putty -- is forge wrong, or putty?\n    // due to padding we finish as an exact multiple of 16\n    encrypted.truncate(16); // all padding\n\n    priv = forge.util.encode64(encrypted.bytes(), 64);\n  }\n\n  // output private key\n  length = Math.floor(priv.length / 66) + 1; // 64 + \\r\\n\n  ppk += '\\r\\nPrivate-Lines: ' + length + '\\r\\n';\n  ppk += priv;\n\n  // MAC\n  var mackey = _sha1('putty-private-key-file-mac-key', passphrase);\n\n  var macbuffer = forge.util.createBuffer();\n  _addStringToBuffer(macbuffer, algorithm);\n  _addStringToBuffer(macbuffer, encryptionAlgorithm);\n  _addStringToBuffer(macbuffer, comment);\n  macbuffer.putInt32(pubbuffer.length());\n  macbuffer.putBuffer(pubbuffer);\n  macbuffer.putInt32(privbuffer.length());\n  macbuffer.putBuffer(privbuffer);\n\n  var hmac = forge.hmac.create();\n  hmac.start('sha1', mackey);\n  hmac.update(macbuffer.bytes());\n\n  ppk += '\\r\\nPrivate-MAC: ' + hmac.digest().toHex() + '\\r\\n';\n\n  return ppk;\n};\n\n/**\n * Encodes a public RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param comment a comment.\n *\n * @return the public key in OpenSSH format.\n */\nssh.publicKeyToOpenSSH = function(key, comment) {\n  var type = 'ssh-rsa';\n  comment = comment || '';\n\n  var buffer = forge.util.createBuffer();\n  _addStringToBuffer(buffer, type);\n  _addBigIntegerToBuffer(buffer, key.e);\n  _addBigIntegerToBuffer(buffer, key.n);\n\n  return type + ' ' + forge.util.encode64(buffer.bytes()) + ' ' + comment;\n};\n\n/**\n * Encodes a private RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n *\n * @return the public key in OpenSSH format.\n */\nssh.privateKeyToOpenSSH = function(privateKey, passphrase) {\n  if(!passphrase) {\n    return forge.pki.privateKeyToPem(privateKey);\n  }\n  // OpenSSH private key is just a legacy format, it seems\n  return forge.pki.encryptRsaPrivateKey(privateKey, passphrase,\n    {legacy: true, algorithm: 'aes128'});\n};\n\n/**\n * Gets the SSH fingerprint for the given public key.\n *\n * @param options the options to use.\n *          [md] the message digest object to use (defaults to forge.md.md5).\n *          [encoding] an alternative output encoding, such as 'hex'\n *            (defaults to none, outputs a byte buffer).\n *          [delimiter] the delimiter to use between bytes for 'hex' encoded\n *            output, eg: ':' (defaults to none).\n *\n * @return the fingerprint as a byte buffer or other encoding based on options.\n */\nssh.getPublicKeyFingerprint = function(key, options) {\n  options = options || {};\n  var md = options.md || forge.md.md5.create();\n\n  var type = 'ssh-rsa';\n  var buffer = forge.util.createBuffer();\n  _addStringToBuffer(buffer, type);\n  _addBigIntegerToBuffer(buffer, key.e);\n  _addBigIntegerToBuffer(buffer, key.n);\n\n  // hash public key bytes\n  md.start();\n  md.update(buffer.getBytes());\n  var digest = md.digest();\n  if(options.encoding === 'hex') {\n    var hex = digest.toHex();\n    if(options.delimiter) {\n      return hex.match(/.{2}/g).join(options.delimiter);\n    }\n    return hex;\n  } else if(options.encoding === 'binary') {\n    return digest.getBytes();\n  } else if(options.encoding) {\n    throw new Error('Unknown encoding \"' + options.encoding + '\".');\n  }\n  return digest;\n};\n\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a big integer.\n */\nfunction _addBigIntegerToBuffer(buffer, val) {\n  var hexVal = val.toString(16);\n  // ensure 2s complement +ve\n  if(hexVal[0] >= '8') {\n    hexVal = '00' + hexVal;\n  }\n  var bytes = forge.util.hexToBytes(hexVal);\n  buffer.putInt32(bytes.length);\n  buffer.putBytes(bytes);\n}\n\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a string.\n */\nfunction _addStringToBuffer(buffer, val) {\n  buffer.putInt32(val.length);\n  buffer.putString(val);\n}\n\n/**\n * Hashes the arguments into one value using SHA-1.\n *\n * @return the sha1 hash of the provided arguments.\n */\nfunction _sha1() {\n  var sha = forge.md.sha1.create();\n  var num = arguments.length;\n  for (var i = 0; i < num; ++i) {\n    sha.update(arguments[i]);\n  }\n  return sha.digest();\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","_addBigIntegerToBuffer","buffer","val","hexVal","toString","bytes","forge","util","hexToBytes","putInt32","length","putBytes","_addStringToBuffer","putString","_sha1","sha","md","sha1","create","num","arguments","i","update","digest","ssh","privateKeyToPutty","ssh.privateKeyToPutty","privateKey","passphrase","comment","encryptionAlgorithm","ppk","pubbuffer","createBuffer","algorithm","e","n","pub","encode64","Math","floor","privbuffer","d","p","q","qInv","encLen","padding","truncate","putBuffer","aeskey","cipher","aes","createEncryptionCipher","start","fillWithByte","copy","finish","encrypted","output","priv","mackey","macbuffer","hmac","toHex","publicKeyToOpenSSH","ssh.publicKeyToOpenSSH","key","type","privateKeyToOpenSSH","ssh.privateKeyToOpenSSH","pki","encryptRsaPrivateKey","legacy","privateKeyToPem","getPublicKeyFingerprint","ssh.getPublicKeyFingerprint","options","md5","getBytes","encoding","hex","delimiter","match","join","Error"]
}
