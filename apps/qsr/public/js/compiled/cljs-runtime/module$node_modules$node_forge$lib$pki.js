shadow$provide.module$node_modules$node_forge$lib$pki=function(global,require,module,exports){var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$asn1");require("module$node_modules$node_forge$lib$oids");require("module$node_modules$node_forge$lib$pbe");require("module$node_modules$node_forge$lib$pem");require("module$node_modules$node_forge$lib$pbkdf2");require("module$node_modules$node_forge$lib$pkcs12");require("module$node_modules$node_forge$lib$pss");
require("module$node_modules$node_forge$lib$rsa");require("module$node_modules$node_forge$lib$util");require("module$node_modules$node_forge$lib$x509");var asn1=forge.asn1,pki$jscomp$0=module.exports=forge.pki=forge.pki||{};pki$jscomp$0.pemToDer=function(pem){pem=forge.pem.decode(pem)[0];if(pem.procType&&"ENCRYPTED"===pem.procType.type)throw Error("Could not convert PEM to DER; PEM is encrypted.");return forge.util.createBuffer(pem.body)};pki$jscomp$0.privateKeyFromPem=function(pem){pem=forge.pem.decode(pem)[0];
if("PRIVATE KEY"!==pem.type&&"RSA PRIVATE KEY"!==pem.type){var error=Error('Could not convert private key from PEM; PEM header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');error.headerType=pem.type;throw error;}if(pem.procType&&"ENCRYPTED"===pem.procType.type)throw Error("Could not convert private key from PEM; PEM is encrypted.");pem=asn1.fromDer(pem.body);return pki$jscomp$0.privateKeyFromAsn1(pem)};pki$jscomp$0.privateKeyToPem=function(key,maxline){key={type:"RSA PRIVATE KEY",body:asn1.toDer(pki$jscomp$0.privateKeyToAsn1(key)).getBytes()};
return forge.pem.encode(key,{maxline:maxline})};pki$jscomp$0.privateKeyInfoToPem=function(pki,maxline){pki={type:"PRIVATE KEY",body:asn1.toDer(pki).getBytes()};return forge.pem.encode(pki,{maxline:maxline})}}
//# sourceMappingURL=module$node_modules$node_forge$lib$pki.js.map
