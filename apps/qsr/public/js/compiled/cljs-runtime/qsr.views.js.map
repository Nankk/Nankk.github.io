{"version":3,"sources":["qsr/views.cljs"],"mappings":"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","names":["qsr.views/post-request","request","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs-http.client/post","qsr.views/on-item-click","item","api-url","req-url","G__34612","qsr.views/item-card","G__34613","G__34614","G__34616","G__34618","qsr.views/item-list-row","pair","cljs.core/first","cljs.core/second","qsr.views/item-list","cljs.core/deref","items","G__34619","re-frame.core/subscribe","pairs","queue","item-pairs","cljs.core/not-empty","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__34621","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__34623","cljs.core/chunk-buffer","i__34622","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__34620","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","qsr.views/main-panel","refresh-fn","qsr.gapis/get-values-from-sheet","cljs.core/chunk-first"],"sourcesContent":["(ns qsr.views\n  (:require\n   [re-frame.core :as re-frame]\n   [reagent.core :as reagent]\n   [qsr.subs :as subs]\n   [qsr.events :as events]\n   [qsr.db :as db]\n   [clojure.string :as str]\n   [qsr.gapis :as gapis]\n   [cljs-http.client :as http]))\n\n;; Item panel ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn post-request [request]\n  (println \"post-request called\")\n  (println request)\n  (http/post request))\n\n(defn on-item-click [item]\n  ;; (re-frame/dispatch-sync [::events/select-item item])\n  (let [api-url \"https://vrcpanorama-get-image.herokuapp.com/index.php\"\n        req-url (str api-url \"?type=move&page=\" (item :index))]\n    (post-request req-url)))\n\n(defn item-card [item]\n  [:button {:class \"transparent\" :on-click #(on-item-click item)}\n   [:div {:class \"card\"}\n    [:img {:class \"card-img-top\" :style {:width \"100%\" :object-fit \"cover\"} :src (item :url) :alt (item :name)}]\n    [:div {:class \"card-body\"}\n     [:p (str \"Index: \" (item :index))]\n     [:p (str \"Drive ID:\" (item :id))]]]]\n  )\n\n(defn item-list-row [pair] ; TODO: change to accept arbitrary number of items\n  (println (first pair))\n  [:div.row\n   [:div {:class \"col-sm-6\"} [item-card (first pair)]]\n   (when (some? (second pair))\n     [:div {:class \"col-sm-6\"} [item-card (second pair)]])])\n\n(defn item-list []\n  [:div.container\n   (let [items @(re-frame/subscribe [::subs/items])\n         pairs (loop [queue items\n                      item-pairs []]\n                 (println (str \"queue: \" queue))\n                 (println (str \"item-pairs: \" item-pairs))\n                 (if (not-empty queue)\n                   (recur (if (= (count queue) 1)\n                            (conj queue nil)\n                            (subvec queue 2))\n                          (conj item-pairs [(first queue) (second queue)]))\n                   item-pairs))]\n     (println pairs)\n     (for [pair pairs]\n       [item-list-row pair]))])\n\n;; Main ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn main-panel []\n  (let [refresh-fn #(gapis/get-values-from-sheet\n                     \"1vkNkO71CfPhft-gRYFkvTwtg23-O75Dyaq0IIiF_-Dg\"\n                     \"Default!A:A\")]\n    (refresh-fn)\n    [:div.large-container\n     [:h1 \"Hi I am Main Panel.\"]\n     [:button {:class \"btn btn-primary\"\n               :on-click refresh-fn}\n      [:i {:class \"fas fa-sync-alt\" :aria-hidden true}]\n      \" Refresh\"]\n     [item-list]]))\n\n\n\n"]}