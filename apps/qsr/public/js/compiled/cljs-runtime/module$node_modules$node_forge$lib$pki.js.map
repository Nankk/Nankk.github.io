{
"version":3,
"file":"module$node_modules$node_forge$lib$pki.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CASnG,IAAIC,MAAQH,OAAA,CAAQ,0CAAR,CACZA,QAAA,CAAQ,yCAAR,CACAA,QAAA,CAAQ,yCAAR,CACAA,QAAA,CAAQ,wCAAR,CACAA,QAAA,CAAQ,wCAAR,CACAA,QAAA,CAAQ,2CAAR,CACAA,QAAA,CAAQ,2CAAR,CACAA,QAAA,CAAQ,wCAAR,CACAA;OAAA,CAAQ,wCAAR,CACAA,QAAA,CAAQ,yCAAR,CACAA,QAAA,CAAQ,yCAAR,CAGA,KAAII,KAAOD,KAAAC,KAAX,CAGIC,aAAMJ,MAAAC,QAANG,CAAuBF,KAAAE,IAAvBA,CAAmCF,KAAAE,IAAnCA,EAAgD,EAWpDA,aAAAC,SAAA,CAAeC,QAAQ,CAACC,GAAD,CAAM,CACvBC,GAAAA,CAAMN,KAAAK,IAAAE,OAAA,CAAiBF,GAAjB,CAAA,CAAsB,CAAtB,CACV,IAAGC,GAAAE,SAAH,EAAyC,WAAzC,GAAmBF,GAAAE,SAAAC,KAAnB,CACE,KAAUC,MAAJ,CAAU,iDAAV,CAAN,CAEF,MAAOV,MAAAW,KAAAC,aAAA,CAAwBN,GAAAO,KAAxB,CALoB,CAe7BX,aAAAY,kBAAA,CAAwBC,QAAQ,CAACV,GAAD,CAAM,CAChCC,GAAAA,CAAMN,KAAAK,IAAAE,OAAA,CAAiBF,GAAjB,CAAA,CAAsB,CAAtB,CAEV;GAAgB,aAAhB,GAAGC,GAAAG,KAAH,EAA8C,iBAA9C,GAAiCH,GAAAG,KAAjC,CAAiE,CAC/D,IAAIO,MAAYN,KAAJ,CAAU,oGAAV,CAEZM,MAAAC,WAAA,CAAmBX,GAAAG,KACnB,MAAMO,MAAN,CAJ+D,CAMjE,GAAGV,GAAAE,SAAH,EAAyC,WAAzC,GAAmBF,GAAAE,SAAAC,KAAnB,CACE,KAAUC,MAAJ,CAAU,2DAAV,CAAN,CAIEQ,GAAAA,CAAMjB,IAAAkB,QAAA,CAAab,GAAAO,KAAb,CAEV,OAAOX,aAAAkB,mBAAA,CAAuBF,GAAvB,CAhB6B,CA2BtChB,aAAAmB,gBAAA,CAAsBC,QAAQ,CAACC,GAAD,CAAMC,OAAN,CAAe,CAEvClB,GAAAA,CAAM,CACRG,KAAM,iBADE,CAERI,KAAMZ,IAAAwB,MAAA,CAAWvB,YAAAwB,iBAAA,CAAqBH,GAArB,CAAX,CAAAI,SAAA,EAFE,CAIV;MAAO3B,MAAAK,IAAAuB,OAAA,CAAiBtB,GAAjB,CAAsB,CAACkB,QAASA,OAAV,CAAtB,CANoC,CAiB7CtB,aAAA2B,oBAAA,CAA0BC,QAAQ,CAAC5B,GAAD,CAAMsB,OAAN,CAAe,CAE3ClB,GAAAA,CAAM,CACRG,KAAM,aADE,CAERI,KAAMZ,IAAAwB,MAAA,CAAWvB,GAAX,CAAAyB,SAAA,EAFE,CAIV,OAAO3B,MAAAK,IAAAuB,OAAA,CAAiBtB,GAAjB,CAAsB,CAACkB,QAASA,OAAV,CAAtB,CANwC,CA/FkD;",
"sources":["node_modules/node-forge/lib/pki.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$pki\"] = function(global,require,module,exports) {\n/**\n * Javascript implementation of a basic Public Key Infrastructure, including\n * support for RSA public and private keys.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./oids');\nrequire('./pbe');\nrequire('./pem');\nrequire('./pbkdf2');\nrequire('./pkcs12');\nrequire('./pss');\nrequire('./rsa');\nrequire('./util');\nrequire('./x509');\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Public Key Infrastructure (PKI) implementation. */\nvar pki = module.exports = forge.pki = forge.pki || {};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\n *\n * Converts PEM-formatted data to DER.\n *\n * @param pem the PEM-formatted data.\n *\n * @return the DER-formatted data.\n */\npki.pemToDer = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert PEM to DER; PEM is encrypted.');\n  }\n  return forge.util.createBuffer(msg.body);\n};\n\n/**\n * Converts an RSA private key from PEM format.\n *\n * @param pem the PEM-formatted private key.\n *\n * @return the private key.\n */\npki.privateKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM ' +\n      'header type is not \"PRIVATE KEY\" or \"RSA PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert private key from PEM; PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  var obj = asn1.fromDer(msg.body);\n\n  return pki.privateKeyFromAsn1(obj);\n};\n\n/**\n * Converts an RSA private key to PEM format.\n *\n * @param key the private key.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\npki.privateKeyToPem = function(key, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts a PrivateKeyInfo to PEM format.\n *\n * @param pki the PrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\npki.privateKeyInfoToPem = function(pki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'PRIVATE KEY',\n    body: asn1.toDer(pki).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","forge","asn1","pki","pemToDer","pki.pemToDer","pem","msg","decode","procType","type","Error","util","createBuffer","body","privateKeyFromPem","pki.privateKeyFromPem","error","headerType","obj","fromDer","privateKeyFromAsn1","privateKeyToPem","pki.privateKeyToPem","key","maxline","toDer","privateKeyToAsn1","getBytes","encode","privateKeyInfoToPem","pki.privateKeyInfoToPem"]
}
