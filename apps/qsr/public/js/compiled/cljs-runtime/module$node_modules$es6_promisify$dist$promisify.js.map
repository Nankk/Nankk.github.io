{
"version":3,
"file":"module$node_modules$es6_promisify$dist$promisify.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAI7GD,MAAAC,QAAA,CAAiB,QAAS,EAAG,CAMzB,IAAIC,WAAaH,OAAA,CAAQ,gDAAR,CA2BjB,OAAOI,SAAkB,CAACC,QAAD,CAAWC,QAAX,CAAqB,CAE1C,MAAO,SAAS,EAAG,CACf,IADe,IACNC,KAAOC,SAAAC,OADD,CACmBC,KAAOC,KAAA,CAAMJ,IAAN,CAD1B,CACuCK,KAAO,CAA7D,CAAgEA,IAAhE,CAAuEL,IAAvE,CAA6EK,IAAA,EAA7E,CACIF,IAAA,CAAKE,IAAL,CAAA,CAAaJ,SAAA,CAAUI,IAAV,CAGjB,KAAIC,wBAA0BP,QAA1BO,EAAsCP,QAAAQ,UAA1C,CAEIC,OAAS,IAAK,EACdT,SAAJ,EAAgBA,QAAAU,QAAhB,CACID,MADJ,CACaT,QAAAU,QADb,CAEWV,QAFX,GAGIS,MAHJ,CAGaT,QAHb,CAOA;MAAO,KAAIH,UAAJ,CAAe,QAAS,CAACc,OAAD,CAAUC,MAAV,CAAkB,CAG7CR,IAAAS,KAAA,CAAUC,QAAiB,CAACC,GAAD,CAAM,CAE7B,GAAIA,GAAJ,CACI,MAAOH,OAAA,CAAOG,GAAP,CAGX,KAN6B,IAMpBC,MAAQd,SAAAC,OANY,CAMMc,OAASZ,KAAA,CAAc,CAAR,CAAAW,KAAA,CAAYA,KAAZ,CAAoB,CAApB,CAAwB,CAA9B,CANf,CAMiDE,MAAQ,CAAtF,CAAyFA,KAAzF,CAAiGF,KAAjG,CAAwGE,KAAA,EAAxG,CACID,MAAA,CAAOC,KAAP,CAAe,CAAf,CAAA,CAAoBhB,SAAA,CAAUgB,KAAV,CAGxB,IAAI,CAAA,CAAJ,GAAc,CAAC,CAACX,uBAAhB,CACI,MAAOI,QAAA,CAAQM,MAAA,CAAO,CAAP,CAAR,CAGXN,QAAA,CAAQM,MAAR,CAd6B,CAAjC,CAkBA,KAAIE,SAAWpB,QAAAqB,MAAA,CAAeX,MAAf,CAAuBL,IAAvB,CAIee,SAA9B,EA1DsB,UA0DtB,GA1DI,MA0D0BA,SA1DnBE,KA0DX,EA1DuD,UA0DvD,GA1DoC,MA0DNF,SA1DaG,MA0D3C,EACIX,OAAA,CAAQQ,QAAR,CA1ByC,CAA1C,CAfQ,CAFuB,CAjCrB,CAAZ,EAJ4F;",
"sources":["node_modules/es6-promisify/dist/promisify.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$es6_promisify$dist$promisify\"] = function(global,require,module,exports) {\n\"use strict\";\n\n/* global module, require */\nmodule.exports = function () {\n\n    \"use strict\";\n\n    // Get a promise object. This may be native, or it may be polyfilled\n\n    var ES6Promise = require(\"./promise.js\");\n\n    /**\n     * thatLooksLikeAPromiseToMe()\n     *\n     * Duck-types a promise.\n     *\n     * @param {object} o\n     * @return {bool} True if this resembles a promise\n     */\n    function thatLooksLikeAPromiseToMe(o) {\n        return o && typeof o.then === \"function\" && typeof o.catch === \"function\";\n    }\n\n    /**\n     * promisify()\n     *\n     * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into\n     * an ES6-compatible Promise. Promisify provides a default callback of the form (error, result)\n     * and rejects when `error` is truthy. You can also supply settings object as the second argument.\n     *\n     * @param {function} original - The function to promisify\n     * @param {object} settings - Settings object\n     * @param {object} settings.thisArg - A `this` context to use. If not set, assume `settings` _is_ `thisArg`\n     * @param {bool} settings.multiArgs - Should multiple arguments be returned as an array?\n     * @return {function} A promisified version of `original`\n     */\n    return function promisify(original, settings) {\n\n        return function () {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var returnMultipleArguments = settings && settings.multiArgs;\n\n            var target = void 0;\n            if (settings && settings.thisArg) {\n                target = settings.thisArg;\n            } else if (settings) {\n                target = settings;\n            }\n\n            // Return the promisified function\n            return new ES6Promise(function (resolve, reject) {\n\n                // Append the callback bound to the context\n                args.push(function callback(err) {\n\n                    if (err) {\n                        return reject(err);\n                    }\n\n                    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                        values[_key2 - 1] = arguments[_key2];\n                    }\n\n                    if (false === !!returnMultipleArguments) {\n                        return resolve(values[0]);\n                    }\n\n                    resolve(values);\n                });\n\n                // Call the function\n                var response = original.apply(target, args);\n\n                // If it looks like original already returns a promise,\n                // then just resolve with that promise. Hopefully, the callback function we added will just be ignored.\n                if (thatLooksLikeAPromiseToMe(response)) {\n                    resolve(response);\n                }\n            });\n        };\n    };\n}();\n};"],
"names":["shadow$provide","global","require","module","exports","ES6Promise","promisify","original","settings","_len","arguments","length","args","Array","_key","returnMultipleArguments","multiArgs","target","thisArg","resolve","reject","push","callback","err","_len2","values","_key2","response","apply","then","catch"]
}
