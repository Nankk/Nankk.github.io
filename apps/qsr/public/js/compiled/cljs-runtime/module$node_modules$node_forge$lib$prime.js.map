{
"version":3,
"file":"module$node_modules$node_forge$lib$prime.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/node-forge/lib/prime.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$prime\"] = function(global,require,module,exports) {\n/**\n * Prime number generation API.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./jsbn');\nrequire('./random');\n\n(function() {\n\n// forge.prime already defined\nif(forge.prime) {\n  module.exports = forge.prime;\n  return;\n}\n\n/* PRIME API */\nvar prime = module.exports = forge.prime = forge.prime || {};\n\nvar BigInteger = forge.jsbn.BigInteger;\n\n// primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\nvar THIRTY = new BigInteger(null);\nTHIRTY.fromInt(30);\nvar op_or = function(x, y) {return x|y;};\n\n/**\n * Generates a random probable prime with the given number of bits.\n *\n * Alternative algorithms can be specified by name as a string or as an\n * object with custom options like so:\n *\n * {\n *   name: 'PRIMEINC',\n *   options: {\n *     maxBlockTime: <the maximum amount of time to block the main\n *       thread before allowing I/O other JS to run>,\n *     millerRabinTests: <the number of miller-rabin tests to run>,\n *     workerScript: <the worker script URL>,\n *     workers: <the number of web workers (if supported) to use,\n *       -1 to use estimated cores minus one>.\n *     workLoad: the size of the work load, ie: number of possible prime\n *       numbers for each web worker to check per work assignment,\n *       (default: 100).\n *   }\n * }\n *\n * @param bits the number of bits for the prime number.\n * @param options the options to use.\n *          [algorithm] the algorithm to use (default: 'PRIMEINC').\n *          [prng] a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *\n * @return callback(err, num) called once the operation completes.\n */\nprime.generateProbablePrime = function(bits, options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  // default to PRIMEINC algorithm\n  var algorithm = options.algorithm || 'PRIMEINC';\n  if(typeof algorithm === 'string') {\n    algorithm = {name: algorithm};\n  }\n  algorithm.options = algorithm.options || {};\n\n  // create prng with api that matches BigInteger secure random\n  var prng = options.prng || forge.random;\n  var rng = {\n    // x is an array to fill with bytes\n    nextBytes: function(x) {\n      var b = prng.getBytesSync(x.length);\n      for(var i = 0; i < x.length; ++i) {\n        x[i] = b.charCodeAt(i);\n      }\n    }\n  };\n\n  if(algorithm.name === 'PRIMEINC') {\n    return primeincFindPrime(bits, rng, algorithm.options, callback);\n  }\n\n  throw new Error('Invalid prime generation algorithm: ' + algorithm.name);\n};\n\nfunction primeincFindPrime(bits, rng, options, callback) {\n  if('workers' in options) {\n    return primeincFindPrimeWithWorkers(bits, rng, options, callback);\n  }\n  return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);\n}\n\nfunction primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {\n  // initialize random number\n  var num = generateRandom(bits, rng);\n\n  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The\n  number we are given is always aligned at 30k + 1. Each time the number is\n  determined not to be prime we add to get to the next 'i', eg: if the number\n  was at 30k + 1 we add 6. */\n  var deltaIdx = 0;\n\n  // get required number of MR tests\n  var mrTests = getMillerRabinTests(num.bitLength());\n  if('millerRabinTests' in options) {\n    mrTests = options.millerRabinTests;\n  }\n\n  // find prime nearest to 'num' for maxBlockTime ms\n  // 10 ms gives 5ms of leeway for other calculations before dropping\n  // below 60fps (1000/60 == 16.67), but in reality, the number will\n  // likely be higher due to an 'atomic' big int modPow\n  var maxBlockTime = 10;\n  if('maxBlockTime' in options) {\n    maxBlockTime = options.maxBlockTime;\n  }\n\n  _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);\n}\n\nfunction _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {\n  var start = +new Date();\n  do {\n    // overflow, regenerate random number\n    if(num.bitLength() > bits) {\n      num = generateRandom(bits, rng);\n    }\n    // do primality test\n    if(num.isProbablePrime(mrTests)) {\n      return callback(null, num);\n    }\n    // get next potential prime\n    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n  } while(maxBlockTime < 0 || (+new Date() - start < maxBlockTime));\n\n  // keep trying later\n  forge.util.setImmediate(function() {\n    _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);\n  });\n}\n\n// NOTE: This algorithm is indeterminate in nature because workers\n// run in parallel looking at different segments of numbers. Even if this\n// algorithm is run twice with the same input from a predictable RNG, it\n// may produce different outputs.\nfunction primeincFindPrimeWithWorkers(bits, rng, options, callback) {\n  // web workers unavailable\n  if(typeof Worker === 'undefined') {\n    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);\n  }\n\n  // initialize random number\n  var num = generateRandom(bits, rng);\n\n  // use web workers to generate keys\n  var numWorkers = options.workers;\n  var workLoad = options.workLoad || 100;\n  var range = workLoad * 30 / 8;\n  var workerScript = options.workerScript || 'forge/prime.worker.js';\n  if(numWorkers === -1) {\n    return forge.util.estimateCores(function(err, cores) {\n      if(err) {\n        // default to 2\n        cores = 2;\n      }\n      numWorkers = cores - 1;\n      generate();\n    });\n  }\n  generate();\n\n  function generate() {\n    // require at least 1 worker\n    numWorkers = Math.max(1, numWorkers);\n\n    // TODO: consider optimizing by starting workers outside getPrime() ...\n    // note that in order to clean up they will have to be made internally\n    // asynchronous which may actually be slower\n\n    // start workers immediately\n    var workers = [];\n    for(var i = 0; i < numWorkers; ++i) {\n      // FIXME: fix path or use blob URLs\n      workers[i] = new Worker(workerScript);\n    }\n    var running = numWorkers;\n\n    // listen for requests from workers and assign ranges to find prime\n    for(var i = 0; i < numWorkers; ++i) {\n      workers[i].addEventListener('message', workerMessage);\n    }\n\n    /* Note: The distribution of random numbers is unknown. Therefore, each\n    web worker is continuously allocated a range of numbers to check for a\n    random number until one is found.\n\n    Every 30 numbers will be checked just 8 times, because prime numbers\n    have the form:\n\n    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)\n\n    Therefore, if we want a web worker to run N checks before asking for\n    a new range of numbers, each range must contain N*30/8 numbers.\n\n    For 100 checks (workLoad), this is a range of 375. */\n\n    var found = false;\n    function workerMessage(e) {\n      // ignore message, prime already found\n      if(found) {\n        return;\n      }\n\n      --running;\n      var data = e.data;\n      if(data.found) {\n        // terminate all workers\n        for(var i = 0; i < workers.length; ++i) {\n          workers[i].terminate();\n        }\n        found = true;\n        return callback(null, new BigInteger(data.prime, 16));\n      }\n\n      // overflow, regenerate random number\n      if(num.bitLength() > bits) {\n        num = generateRandom(bits, rng);\n      }\n\n      // assign new range to check\n      var hex = num.toString(16);\n\n      // start prime search\n      e.target.postMessage({\n        hex: hex,\n        workLoad: workLoad\n      });\n\n      num.dAddOffset(range, 0);\n    }\n  }\n}\n\n/**\n * Generates a random number using the given number of bits and RNG.\n *\n * @param bits the number of bits for the number.\n * @param rng the random number generator to use.\n *\n * @return the random number.\n */\nfunction generateRandom(bits, rng) {\n  var num = new BigInteger(bits, rng);\n  // force MSB set\n  var bits1 = bits - 1;\n  if(!num.testBit(bits1)) {\n    num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);\n  }\n  // align number on 30k+1 boundary\n  num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);\n  return num;\n}\n\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */\nfunction getMillerRabinTests(bits) {\n  if(bits <= 100) return 27;\n  if(bits <= 150) return 18;\n  if(bits <= 200) return 15;\n  if(bits <= 250) return 12;\n  if(bits <= 300) return 9;\n  if(bits <= 350) return 8;\n  if(bits <= 400) return 7;\n  if(bits <= 500) return 6;\n  if(bits <= 600) return 5;\n  if(bits <= 800) return 4;\n  if(bits <= 1250) return 3;\n  return 2;\n}\n\n})();\n\n};"],
"names":["shadow$provide","global","require","module","exports","forge","primeincFindPrime","bits","rng","options","callback","primeincFindPrimeWithWorkers","primeincFindPrimeWithoutWorkers","num","generateRandom","bitLength","mrTests","millerRabinTests","maxBlockTime","_primeinc","deltaIdx","start","Date","isProbablePrime","dAddOffset","GCD_30_DELTA","util","setImmediate","generate","workerMessage","e","found","running","data","i","workers","length","terminate","BigInteger","prime","hex","toString","target","postMessage","workLoad","range","numWorkers","Math","max","Worker","workerScript","addEventListener","estimateCores","err","cores","bits1","testBit","bitwiseTo","ONE","shiftLeft","op_or","mod","THIRTY","byteValue","jsbn","fromInt","x","y","generateProbablePrime","prime.generateProbablePrime","algorithm","name","prng","random","nextBytes","b","getBytesSync","charCodeAt","Error"]
}
