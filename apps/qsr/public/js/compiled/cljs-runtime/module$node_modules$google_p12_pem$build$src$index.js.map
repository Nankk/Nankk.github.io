{
"version":3,
"file":"module$node_modules$google_p12_pem$build$src$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwB/GC,QAASA,YAAW,CAACC,QAAD,CAAW,CAC3B,MAAOC,SAAA,CAASD,QAAT,CAAmB,CAAEE,SAAU,QAAZ,CAAnB,CAAAC,KAAA,CAAgD,QAAA,CAAAC,MAAA,CAAU,CAU3DC,MAAAA,CAASC,KAAAC,KAAAC,SAAA,CATSJ,MAST,CACTK,OAAAA,CAAUH,KAAAI,KAAAC,QAAA,CAAmBN,MAAnB,CAEVO,OAAAA,CADMN,KAAAO,OAAAC,eAAAC,CAA4BN,MAA5BM,CAAqC,YAArCA,CACCC,QAAA,CAAY,CAAEC,aAAc,YAAhB,CAAZ,CACb,IAAIL,MAAAK,aAAJ,CAGI,MAAA,CADYX,KAAAY,IAAAC,gBAAAC,CADOR,MAAAK,aAAA,CAAkB,CAAlB,CAAAI,IACPD,CACLE,QAAA,CAAY,OAAZ,CAAqB,IAArB,CAHX,KAMI,MAAUC,MAAJ,CAAU,8BAAV,CAAN;AAnBA,MAAO,OADsD,CAA1D,CADoB,CAhB/BC,MAAAC,eAAA,CAAsB3B,OAAtB,CAA+B,YAA/B,CAA6C,CAAE4B,MAAO,CAAA,CAAT,CAA7C,CACMC,OAAAA,CAAK/B,OAAA,CAAQ,cAAR,CACX,KAAMU,MAAQV,OAAA,CAAQ,0CAAR,CAAd,CAEMK,SADSL,OAAAgC,CAAQ,+BAARA,CACEC,UAAA,CAAiBF,MAAA1B,SAAjB,CAWjBH,QAAAgC,OAAA,CAVAA,QAAe,CAAC9B,QAAD,CAAW+B,QAAX,CAAqB,CAChC,GAAIA,QAAJ,CACIhC,WAAA,CAAYC,QAAZ,CAAAG,KAAA,CACU,QAAA,CAAAiB,GAAA,CAAO,CAAA,MAAAW,SAAA,CAAS,IAAT,CAAeX,GAAf,CAAA,CADjB,CAAAY,MAAA,CAEW,QAAA,CAAAC,GAAA,CAAO,CAAA,MAAAF,SAAA,CAASE,GAAT,CAAc,IAAd,CAAA,CAFlB,CADJ,KAMI,OAAOlC,YAAA,CAAYC,QAAZ,CAPqB,CAb2E;",
"sources":["node_modules/google-p12-pem/build/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$google_p12_pem$build$src$index\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst forge = require(\"node-forge\");\nconst util_1 = require(\"util\");\nconst readFile = util_1.promisify(fs.readFile);\nfunction getPem(filename, callback) {\n    if (callback) {\n        getPemAsync(filename)\n            .then(pem => callback(null, pem))\n            .catch(err => callback(err, null));\n    }\n    else {\n        return getPemAsync(filename);\n    }\n}\nexports.getPem = getPem;\nfunction getPemAsync(filename) {\n    return readFile(filename, { encoding: 'base64' }).then(keyp12 => {\n        return convertToPem(keyp12);\n    });\n}\n/**\n * Converts a P12 in base64 encoding to a pem.\n * @param p12base64 String containing base64 encoded p12.\n * @returns a string containing the pem.\n */\nfunction convertToPem(p12base64) {\n    const p12Der = forge.util.decode64(p12base64);\n    const p12Asn1 = forge.asn1.fromDer(p12Der);\n    const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n    const bags = p12.getBags({ friendlyName: 'privatekey' });\n    if (bags.friendlyName) {\n        const privateKey = bags.friendlyName[0].key;\n        const pem = forge.pki.privateKeyToPem(privateKey);\n        return pem.replace(/\\r\\n/g, '\\n');\n    }\n    else {\n        throw new Error('Unable to get friendly name.');\n    }\n}\n//# sourceMappingURL=index.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getPemAsync","filename","readFile","encoding","then","keyp12","p12Der","forge","util","decode64","p12Asn1","asn1","fromDer","bags","pkcs12","pkcs12FromAsn1","p12","getBags","friendlyName","pki","privateKeyToPem","pem","key","replace","Error","Object","defineProperty","value","fs","util_1","promisify","getPem","callback","catch","err"]
}
