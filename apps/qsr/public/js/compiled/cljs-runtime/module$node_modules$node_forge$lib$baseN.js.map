{
"version":3,
"file":"module$node_modules$node_forge$lib$baseN.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/node-forge/lib/baseN.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$baseN\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nvar api = {};\nmodule.exports = api;\n\n// baseN alphabet indexes\nvar _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the baseN-encoded output string.\n */\napi.encode = function(input, alphabet, maxline) {\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n\n  var output = '';\n\n  if(!(input instanceof Uint8Array)) {\n    // assume forge byte buffer\n    output = _encodeWithByteBuffer(input, alphabet);\n  } else {\n    var i = 0;\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var digits = [0];\n    for(i = 0; i < input.length; ++i) {\n      for(var j = 0, carry = input[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % base;\n        carry = (carry / base) | 0;\n      }\n\n      while(carry > 0) {\n        digits.push(carry % base);\n        carry = (carry / base) | 0;\n      }\n    }\n\n    // deal with leading zeros\n    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n      output += first;\n    }\n    // convert digits to a string\n    for(i = digits.length - 1; i >= 0; --i) {\n      output += alphabet[digits[i]];\n    }\n  }\n\n  if(maxline) {\n    var regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n};\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param input the baseN-encoded input string.\n *\n * @return the Uint8Array.\n */\napi.decode = function(input, alphabet) {\n  if(typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  var table = _reverseAlphabets[alphabet];\n  if(!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for(var i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var bytes = [0];\n  for(var i = 0; i < input.length; i++) {\n    var value = table[input.charCodeAt(i)];\n    if(value === undefined) {\n      return;\n    }\n\n    for(var j = 0, carry = value; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while(carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  if(typeof Buffer !== 'undefined') {\n    return Buffer.from(bytes.reverse());\n  }\n\n  return new Uint8Array(bytes.reverse());\n};\n\nfunction _encodeWithByteBuffer(input, alphabet) {\n  var i = 0;\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var digits = [0];\n  for(i = 0; i < input.length(); ++i) {\n    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = (carry / base) | 0;\n    }\n\n    while(carry > 0) {\n      digits.push(carry % base);\n      carry = (carry / base) | 0;\n    }\n  }\n\n  var output = '';\n\n  // deal with leading zeros\n  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for(i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  return output;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","api","_reverseAlphabets","encode","api.encode","input","alphabet","maxline","TypeError","undefined","output","Uint8Array","i","base","length","first","charAt","digits","j","carry","push","at","match","regex","RegExp","join","decode","api.decode","table","charCodeAt","replace","bytes","value","k","from","reverse"]
}
