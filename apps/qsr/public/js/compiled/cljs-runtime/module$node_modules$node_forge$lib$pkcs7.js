shadow$provide.module$node_modules$node_forge$lib$pkcs7=function(global,require,module,exports){function _recipientFromAsn1(obj){var capture={},errors=[];if(!asn1.validate(obj,p7.asn1.recipientInfoValidator,capture,errors))throw obj=Error("Cannot read PKCS#7 RecipientInfo. ASN.1 object is not an PKCS#7 RecipientInfo."),obj.errors=errors,obj;return{version:capture.version.charCodeAt(0),issuer:forge.pki.RDNAttributesAsArray(capture.issuer),serialNumber:forge.util.createBuffer(capture.serial).toHex(),
encryptedContent:{algorithm:asn1.derToOid(capture.encAlgorithm),parameter:capture.encParameter.value,content:capture.encKey}}}function _recipientToAsn1(obj){return asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,asn1.integerToDer(obj.version).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[forge.pki.distinguishedNameToAsn1({attributes:obj.issuer}),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,forge.util.hexToBytes(obj.serialNumber))]),
asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.NULL,!1,"")]),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,!1,obj.encryptedContent.content)])}function _recipientsToAsn1(recipients){for(var ret=[],i=0;i<recipients.length;++i)ret.push(_recipientToAsn1(recipients[i]));return ret}function _signerToAsn1(obj){var rval=asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,asn1.integerToDer(obj.version).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[forge.pki.distinguishedNameToAsn1({attributes:obj.issuer}),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,forge.util.hexToBytes(obj.serialNumber))]),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(obj.digestAlgorithm).getBytes()),asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.NULL,!1,"")])]);obj.authenticatedAttributesAsn1&&rval.value.push(obj.authenticatedAttributesAsn1);rval.value.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(obj.signatureAlgorithm).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.NULL,!1,"")]));rval.value.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,!1,obj.signature));if(0<obj.unauthenticatedAttributes.length){for(var attrsAsn1=asn1.create(asn1.Class.CONTEXT_SPECIFIC,
1,!0,[]),i=0;i<obj.unauthenticatedAttributes.length;++i)attrsAsn1.values.push(_attributeToAsn1(obj.unauthenticatedAttributes[i]));rval.value.push(attrsAsn1)}return rval}function _attributeToAsn1(attr){if(attr.type===forge.pki.oids.contentType)var value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(attr.value).getBytes());else if(attr.type===forge.pki.oids.messageDigest)value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,!1,attr.value.bytes());else if(attr.type===forge.pki.oids.signingTime){value=
new Date("1950-01-01T00:00:00Z");var jan_1_2050=new Date("2050-01-01T00:00:00Z"),date=attr.value;if("string"===typeof date){var timestamp=Date.parse(date);date=isNaN(timestamp)?13===date.length?asn1.utcTimeToDate(date):asn1.generalizedTimeToDate(date):new Date(timestamp)}value=date>=value&&date<jan_1_2050?asn1.create(asn1.Class.UNIVERSAL,asn1.Type.UTCTIME,!1,asn1.dateToUtcTime(date)):asn1.create(asn1.Class.UNIVERSAL,asn1.Type.GENERALIZEDTIME,!1,asn1.dateToGeneralizedTime(date))}return asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(attr.type).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SET,!0,[value])])}function _encryptedContentToAsn1(ec){return[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(forge.pki.oids.data).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(ec.algorithm).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,
!1,ec.parameter.getBytes())]),asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,!1,ec.content.getBytes())])]}function _fromAsn1(msg,obj,validator){var capture={};if(!asn1.validate(obj,validator,capture,[]))throw msg=Error("Cannot read PKCS#7 message. ASN.1 object is not a supported PKCS#7 message."),msg.errors=msg,msg;if(asn1.derToOid(capture.contentType)!==forge.pki.oids.data)throw Error("Unsupported PKCS#7 message. Only wrapped ContentType Data supported.");
if(capture.encryptedContent){obj="";if(forge.util.isArray(capture.encryptedContent))for(validator=0;validator<capture.encryptedContent.length;++validator){if(capture.encryptedContent[validator].type!==asn1.Type.OCTETSTRING)throw Error("Malformed PKCS#7 message, expecting encrypted content constructed of only OCTET STRING objects.");obj+=capture.encryptedContent[validator].value}else obj=capture.encryptedContent;msg.encryptedContent={algorithm:asn1.derToOid(capture.encAlgorithm),parameter:forge.util.createBuffer(capture.encParameter.value),
content:forge.util.createBuffer(obj)}}if(capture.content){obj="";if(forge.util.isArray(capture.content))for(validator=0;validator<capture.content.length;++validator){if(capture.content[validator].type!==asn1.Type.OCTETSTRING)throw Error("Malformed PKCS#7 message, expecting content constructed of only OCTET STRING objects.");obj+=capture.content[validator].value}else obj=capture.content;msg.content=forge.util.createBuffer(obj)}msg.version=capture.version.charCodeAt(0);return msg.rawCapture=capture}
function _decryptContent(msg){if(void 0===msg.encryptedContent.key)throw Error("Symmetric key not available.");if(void 0===msg.content){switch(msg.encryptedContent.algorithm){case forge.pki.oids["aes128-CBC"]:case forge.pki.oids["aes192-CBC"]:case forge.pki.oids["aes256-CBC"]:var ciph=forge.aes.createDecryptionCipher(msg.encryptedContent.key);break;case forge.pki.oids.desCBC:case forge.pki.oids["des-EDE3-CBC"]:ciph=forge.des.createDecryptionCipher(msg.encryptedContent.key);break;default:throw Error("Unsupported symmetric cipher, OID "+
msg.encryptedContent.algorithm);}ciph.start(msg.encryptedContent.parameter);ciph.update(msg.encryptedContent.content);if(!ciph.finish())throw Error("Symmetric decryption failed.");msg.content=ciph.output}}var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$aes");require("module$node_modules$node_forge$lib$asn1");require("module$node_modules$node_forge$lib$des");require("module$node_modules$node_forge$lib$oids");require("module$node_modules$node_forge$lib$pem");
require("module$node_modules$node_forge$lib$pkcs7asn1");require("module$node_modules$node_forge$lib$random");require("module$node_modules$node_forge$lib$util");require("module$node_modules$node_forge$lib$x509");var asn1=forge.asn1,p7=module.exports=forge.pkcs7=forge.pkcs7||{};p7.messageFromPem=function(pem){pem=forge.pem.decode(pem)[0];if("PKCS7"!==pem.type){var error=Error('Could not convert PKCS#7 message from PEM; PEM header type is not "PKCS#7".');error.headerType=pem.type;throw error;}if(pem.procType&&
"ENCRYPTED"===pem.procType.type)throw Error("Could not convert PKCS#7 message from PEM; PEM is encrypted.");pem=asn1.fromDer(pem.body);return p7.messageFromAsn1(pem)};p7.messageToPem=function(msg,maxline){msg={type:"PKCS7",body:asn1.toDer(msg.toAsn1()).getBytes()};return forge.pem.encode(msg,{maxline:maxline})};p7.messageFromAsn1=function(obj){var capture={},errors=[];if(!asn1.validate(obj,p7.asn1.contentInfoValidator,capture,errors))throw capture=Error("Cannot read PKCS#7 message. ASN.1 object is not an PKCS#7 ContentInfo."),
capture.errors=errors,capture;errors=asn1.derToOid(capture.contentType);switch(errors){case forge.pki.oids.envelopedData:errors=p7.createEnvelopedData();break;case forge.pki.oids.encryptedData:errors=p7.createEncryptedData();break;case forge.pki.oids.signedData:errors=p7.createSignedData();break;default:throw Error("Cannot read PKCS#7 message. ContentType with OID "+errors+" is not (yet) supported.");}errors.fromAsn1(capture.content.value[0]);return errors};p7.createSignedData=function(){var msg=
null;return msg={type:forge.pki.oids.signedData,version:1,certificates:[],crls:[],signers:[],digestAlgorithmIdentifiers:[],contentInfo:null,signerInfos:[],fromAsn1:function(obj){_fromAsn1(msg,obj,p7.asn1.signedDataValidator);msg.certificates=[];msg.crls=[];msg.digestAlgorithmIdentifiers=[];msg.contentInfo=null;msg.signerInfos=[];if(msg.rawCapture.certificates){obj=msg.rawCapture.certificates.value;for(var i=0;i<obj.length;++i)msg.certificates.push(forge.pki.certificateFromAsn1(obj[i]))}},toAsn1:function(){msg.contentInfo||
msg.sign();for(var certs=[],i=0;i<msg.certificates.length;++i)certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));i=[];var signedData=asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,asn1.integerToDer(msg.version).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SET,!0,msg.digestAlgorithmIdentifiers),msg.contentInfo])]);0<certs.length&&signedData.value[0].value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,
0,!0,certs));0<i.length&&signedData.value[0].value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,1,!0,i));signedData.value[0].value.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SET,!0,msg.signerInfos));return asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(msg.type).getBytes()),signedData])},addSigner:function(signer){var issuer=signer.issuer,serialNumber=signer.serialNumber;signer.certificate&&(serialNumber=signer.certificate,
"string"===typeof serialNumber&&(serialNumber=forge.pki.certificateFromPem(serialNumber)),issuer=serialNumber.issuer.attributes,serialNumber=serialNumber.serialNumber);var key=signer.key;if(!key)throw Error("Could not add PKCS#7 signer; no private key specified.");"string"===typeof key&&(key=forge.pki.privateKeyFromPem(key));var digestAlgorithm=signer.digestAlgorithm||forge.pki.oids.sha1;switch(digestAlgorithm){case forge.pki.oids.sha1:case forge.pki.oids.sha256:case forge.pki.oids.sha384:case forge.pki.oids.sha512:case forge.pki.oids.md5:break;
default:throw Error("Could not add PKCS#7 signer; unknown message digest algorithm: "+digestAlgorithm);}signer=signer.authenticatedAttributes||[];if(0<signer.length){for(var contentType=!1,messageDigest=!1,i=0;i<signer.length;++i){var attr=signer[i];if(!contentType&&attr.type===forge.pki.oids.contentType){if(contentType=!0,messageDigest)break}else if(!messageDigest&&attr.type===forge.pki.oids.messageDigest&&(messageDigest=!0,contentType))break}if(!contentType||!messageDigest)throw Error("Invalid signer.authenticatedAttributes. If signer.authenticatedAttributes is specified, then it must contain at least two attributes, PKCS #9 content-type and PKCS #9 message-digest.");
}msg.signers.push({key:key,version:1,issuer:issuer,serialNumber:serialNumber,digestAlgorithm:digestAlgorithm,signatureAlgorithm:forge.pki.oids.rsaEncryption,signature:null,authenticatedAttributes:signer,unauthenticatedAttributes:[]})},sign:function(options){options=options||{};if("object"!==typeof msg.content||null===msg.contentInfo)if(msg.contentInfo=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(forge.pki.oids.data).getBytes())]),
"content"in msg){var content;msg.content instanceof forge.util.ByteBuffer?content=msg.content.bytes():"string"===typeof msg.content&&(content=forge.util.encodeUtf8(msg.content));options.detached?msg.detachedContent=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,!1,content):msg.contentInfo.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,!1,content)]))}if(0!==msg.signers.length){options={};for(content=0;content<msg.signers.length;++content){var signer=
msg.signers[content],oid=signer.digestAlgorithm;oid in options||(options[oid]=forge.md[forge.pki.oids[oid]].create());signer.md=0===signer.authenticatedAttributes.length?options[oid]:forge.md[forge.pki.oids[oid]].create()}msg.digestAlgorithmIdentifiers=[];for(oid in options)msg.digestAlgorithmIdentifiers.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(oid).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.NULL,!1,"")]));
msg.detachedContent?content=msg.detachedContent:(content=msg.contentInfo.value[1],content=content.value[0]);if(!content)throw Error("Could not sign PKCS#7 message; there is no content to sign.");oid=asn1.derToOid(msg.contentInfo.value[0].value);var bytes=asn1.toDer(content);bytes.getByte();asn1.getBerValueLength(bytes);bytes=bytes.getBytes();for(var oid$jscomp$0 in options)options[oid$jscomp$0].start().update(bytes);oid$jscomp$0=new Date;for(content=0;content<msg.signers.length;++content){signer=
msg.signers[content];if(0===signer.authenticatedAttributes.length){if(oid!==forge.pki.oids.data)throw Error("Invalid signer; authenticatedAttributes must be present when the ContentInfo content type is not PKCS#7 Data.");}else{signer.authenticatedAttributesAsn1=asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[]);bytes=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SET,!0,[]);for(var ai=0;ai<signer.authenticatedAttributes.length;++ai){var attr=signer.authenticatedAttributes[ai];attr.type===forge.pki.oids.messageDigest?
attr.value=options[signer.digestAlgorithm].digest():attr.type!==forge.pki.oids.signingTime||attr.value||(attr.value=oid$jscomp$0);bytes.value.push(_attributeToAsn1(attr));signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr))}bytes=asn1.toDer(bytes).getBytes();signer.md.start().update(bytes)}signer.signature=signer.key.sign(signer.md,"RSASSA-PKCS1-V1_5")}options=msg;oid=msg.signers;oid$jscomp$0=[];for(content=0;content<oid.length;++content)oid$jscomp$0.push(_signerToAsn1(oid[content]));
options.signerInfos=oid$jscomp$0}},verify:function(){throw Error("PKCS#7 signature verification not yet implemented.");},addCertificate:function(cert){"string"===typeof cert&&(cert=forge.pki.certificateFromPem(cert));msg.certificates.push(cert)},addCertificateRevokationList:function(crl){throw Error("PKCS#7 CRL support not yet implemented.");}}};p7.createEncryptedData=function(){var msg=null;return msg={type:forge.pki.oids.encryptedData,version:0,encryptedContent:{algorithm:forge.pki.oids["aes256-CBC"]},
fromAsn1:function(obj){_fromAsn1(msg,obj,p7.asn1.encryptedDataValidator)},decrypt:function(key){void 0!==key&&(msg.encryptedContent.key=key);_decryptContent(msg)}}};p7.createEnvelopedData=function(){var msg=null;return msg={type:forge.pki.oids.envelopedData,version:0,recipients:[],encryptedContent:{algorithm:forge.pki.oids["aes256-CBC"]},fromAsn1:function(obj){var capture=_fromAsn1(msg,obj,p7.asn1.envelopedDataValidator);obj=msg;capture=capture.recipientInfos.value;for(var ret=[],i=0;i<capture.length;++i)ret.push(_recipientFromAsn1(capture[i]));
obj.recipients=ret},toAsn1:function(){return asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(msg.type).getBytes()),asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,asn1.integerToDer(msg.version).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SET,!0,_recipientsToAsn1(msg.recipients)),asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.SEQUENCE,!0,_encryptedContentToAsn1(msg.encryptedContent))])])])},findRecipient:function(cert){for(var sAttr=cert.issuer.attributes,i=0;i<msg.recipients.length;++i){var r=msg.recipients[i],rAttr=r.issuer;if(r.serialNumber===cert.serialNumber&&rAttr.length===sAttr.length){for(var match=!0,j=0;j<sAttr.length;++j)if(rAttr[j].type!==sAttr[j].type||rAttr[j].value!==sAttr[j].value){match=!1;break}if(match)return r}}return null},decrypt:function(recipient,privKey){if(void 0===msg.encryptedContent.key&&
void 0!==recipient&&void 0!==privKey)switch(recipient.encryptedContent.algorithm){case forge.pki.oids.rsaEncryption:case forge.pki.oids.desCBC:recipient=privKey.decrypt(recipient.encryptedContent.content);msg.encryptedContent.key=forge.util.createBuffer(recipient);break;default:throw Error("Unsupported asymmetric cipher, OID "+recipient.encryptedContent.algorithm);}_decryptContent(msg)},addRecipient:function(cert){msg.recipients.push({version:0,issuer:cert.issuer.attributes,serialNumber:cert.serialNumber,
encryptedContent:{algorithm:forge.pki.oids.rsaEncryption,key:cert.publicKey}})},encrypt:function(key,cipher){if(void 0===msg.encryptedContent.content){cipher=cipher||msg.encryptedContent.algorithm;key=key||msg.encryptedContent.key;var keyLen;switch(cipher){case forge.pki.oids["aes128-CBC"]:var ivLen=keyLen=16;var ciphFn=forge.aes.createEncryptionCipher;break;case forge.pki.oids["aes192-CBC"]:keyLen=24;ivLen=16;ciphFn=forge.aes.createEncryptionCipher;break;case forge.pki.oids["aes256-CBC"]:keyLen=
32;ivLen=16;ciphFn=forge.aes.createEncryptionCipher;break;case forge.pki.oids["des-EDE3-CBC"]:keyLen=24;ivLen=8;ciphFn=forge.des.createEncryptionCipher;break;default:throw Error("Unsupported symmetric cipher, OID "+cipher);}if(void 0===key)key=forge.util.createBuffer(forge.random.getBytes(keyLen));else if(key.length()!=keyLen)throw Error("Symmetric key has wrong length; got "+key.length()+" bytes, expected "+keyLen+".");msg.encryptedContent.algorithm=cipher;msg.encryptedContent.key=key;msg.encryptedContent.parameter=
forge.util.createBuffer(forge.random.getBytes(ivLen));key=ciphFn(key);key.start(msg.encryptedContent.parameter.copy());key.update(msg.content);if(!key.finish())throw Error("Symmetric encryption failed.");msg.encryptedContent.content=key.output}for(key=0;key<msg.recipients.length;++key)if(cipher=msg.recipients[key],void 0===cipher.encryptedContent.content)switch(cipher.encryptedContent.algorithm){case forge.pki.oids.rsaEncryption:cipher.encryptedContent.content=cipher.encryptedContent.key.encrypt(msg.encryptedContent.key.data);
break;default:throw Error("Unsupported asymmetric cipher, OID "+cipher.encryptedContent.algorithm);}}}}}
//# sourceMappingURL=module$node_modules$node_forge$lib$pkcs7.js.map
