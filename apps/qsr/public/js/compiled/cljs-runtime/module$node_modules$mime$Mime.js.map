{
"version":3,
"file":"module$node_modules$mime$Mime.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,8BAAA,CAAkD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO1FC,QAASA,KAAI,EAAG,CACd,IAAAC,OAAA,CAAcC,MAAAC,OAAA,CAAc,IAAd,CACd,KAAAC,YAAA,CAAmBF,MAAAC,OAAA,CAAc,IAAd,CAEnB,KAAK,IAAIE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,SAAAC,OAApB,CAAsCF,CAAA,EAAtC,CACE,IAAAG,OAAA,CAAYF,SAAA,CAAUD,CAAV,CAAZ,CAGF,KAAAG,OAAA,CAAc,IAAAA,OAAAC,KAAA,CAAiB,IAAjB,CACd,KAAAC,QAAA,CAAe,IAAAA,QAAAD,KAAA,CAAkB,IAAlB,CACf,KAAAE,aAAA,CAAoB,IAAAA,aAAAF,KAAA,CAAuB,IAAvB,CAVN,CAgChBT,IAAAY,UAAAJ,OAAA,CAAwBK,QAAQ,CAACC,OAAD,CAAUC,KAAV,CAAiB,CAC/C,IAAKC,IAAIA,IAAT,GAAiBF,QAAjB,CAA0B,CACxB,IAAIG,WAAaH,OAAA,CAAQE,IAAR,CAAAE,IAAA,CAAkB,QAAQ,CAACC,CAAD,CAAI,CAAC,MAAOA,EAAAC,YAAA,EAAR,CAA9B,CACjBJ,KAAA,CAAOA,IAAAI,YAAA,EAEP;IAAK,IAAIf,EAAI,CAAb,CAAgBA,CAAhB,CAAoBY,UAAAV,OAApB,CAAuCF,CAAA,EAAvC,CAA4C,CAC1C,IAAIgB,IAAMJ,UAAA,CAAWZ,CAAX,CAIV,IAAc,GAAd,EAAIgB,GAAA,CAAI,CAAJ,CAAJ,CAAA,CAIA,GAAI,CAACN,KAAL,EAAeM,GAAf,GAAsB,KAAApB,OAAtB,CACE,KAAUqB,MAAJ,CACJ,iCADI,CACgCD,GADhC,CAEJ,oBAFI,CAEmB,IAAApB,OAAA,CAAYoB,GAAZ,CAFnB,CAEsC,QAFtC,CAEiDL,IAFjD,CAGJ,2DAHI,CAGuDK,GAHvD,CAIJ,qCAJI,CAIoCL,IAJpC,CAI2C,IAJ3C,CAAN,CAQF,IAAAf,OAAA,CAAYoB,GAAZ,CAAA,CAAmBL,IAbnB,CAL0C,CAsB5C,GAAID,KAAJ,EAAa,CAAC,IAAAX,YAAA,CAAiBY,IAAjB,CAAd,CACMK,GACJ,CADUJ,UAAA,CAAW,CAAX,CACV,CAAA,IAAAb,YAAA,CAAiBY,IAAjB,CAAA,CAAoC,GAAX,EAACK,GAAA,CAAI,CAAJ,CAAD,CAAkBA,GAAlB,CAAwBA,GAAAE,OAAA,CAAW,CAAX,CA5B3B,CADqB,CAqCjDvB,KAAAY,UAAAF,QAAA,CAAyBc,QAAQ,CAACC,IAAD,CAAO,CACtCA,IAAA,CAAOC,MAAA,CAAOD,IAAP,CACP;IAAIE,KAAOF,IAAAG,QAAA,CAAa,UAAb,CAAyB,EAAzB,CAAAR,YAAA,EAAX,CACIC,IAAMM,IAAAC,QAAA,CAAa,OAAb,CAAsB,EAAtB,CAAAR,YAAA,EAENS,KAAAA,CAAUF,IAAApB,OAAVsB,CAAwBJ,IAAAlB,OAG5B,QAFac,GAAAd,OAEb,CAF0BoB,IAAApB,OAE1B,CAFwC,CAExC,EAAkB,CAACsB,IAAnB,GAA+B,IAAA5B,OAAA,CAAYoB,GAAZ,CAA/B,EAAmD,IARb,CAcxCrB,KAAAY,UAAAD,aAAA,CAA8BmB,QAAQ,CAACd,IAAD,CAAO,CAE3C,OADAA,IACA,CADO,eAAAe,KAAA,CAAqBf,IAArB,CACP,EADqCgB,MAAAC,GACrC,GAAe,IAAA7B,YAAA,CAAiBY,IAAAI,YAAA,EAAjB,CAAf,EAAuD,IAFZ,CAK7CtB,OAAAC,QAAA,CAAiBC,IA/FyE;",
"sources":["node_modules/mime/Mime.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mime$Mime\"] = function(global,require,module,exports) {\n'use strict';\n\n/**\n * @param typeMap [Object] Map of MIME type -> Array[extensions]\n * @param ...\n */\nfunction Mime() {\n  this._types = Object.create(null);\n  this._extensions = Object.create(null);\n\n  for (var i = 0; i < arguments.length; i++) {\n    this.define(arguments[i]);\n  }\n\n  this.define = this.define.bind(this);\n  this.getType = this.getType.bind(this);\n  this.getExtension = this.getExtension.bind(this);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * If a type declares an extension that has already been defined, an error will\n * be thrown.  To suppress this error and force the extension to be associated\n * with the new type, pass `force`=true.  Alternatively, you may prefix the\n * extension with \"*\" to map the type to extension, without mapping the\n * extension to the type.\n *\n * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});\n *\n *\n * @param map (Object) type definitions\n * @param force (Boolean) if true, force overriding of existing definitions\n */\nMime.prototype.define = function(typeMap, force) {\n  for (var type in typeMap) {\n    var extensions = typeMap[type].map(function(t) {return t.toLowerCase()});\n    type = type.toLowerCase();\n\n    for (var i = 0; i < extensions.length; i++) {\n      var ext = extensions[i];\n\n      // '*' prefix = not the preferred type for this extension.  So fixup the\n      // extension, and skip it.\n      if (ext[0] == '*') {\n        continue;\n      }\n\n      if (!force && (ext in this._types)) {\n        throw new Error(\n          'Attempt to change mapping for \"' + ext +\n          '\" extension from \"' + this._types[ext] + '\" to \"' + type +\n          '\". Pass `force=true` to allow this, otherwise remove \"' + ext +\n          '\" from the list of extensions for \"' + type + '\".'\n        );\n      }\n\n      this._types[ext] = type;\n    }\n\n    // Use first extension as default\n    if (force || !this._extensions[type]) {\n      var ext = extensions[0];\n      this._extensions[type] = (ext[0] != '*') ? ext : ext.substr(1)\n    }\n  }\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.getType = function(path) {\n  path = String(path);\n  var last = path.replace(/^.*[/\\\\]/, '').toLowerCase();\n  var ext = last.replace(/^.*\\./, '').toLowerCase();\n\n  var hasPath = last.length < path.length;\n  var hasDot = ext.length < last.length - 1;\n\n  return (hasDot || !hasPath) && this._types[ext] || null;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.getExtension = function(type) {\n  type = /^\\s*([^;\\s]*)/.test(type) && RegExp.$1;\n  return type && this._extensions[type.toLowerCase()] || null;\n};\n\nmodule.exports = Mime;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Mime","_types","Object","create","_extensions","i","arguments","length","define","bind","getType","getExtension","prototype","Mime.prototype.define","typeMap","force","type","extensions","map","t","toLowerCase","ext","Error","substr","Mime.prototype.getType","path","String","last","replace","hasPath","Mime.prototype.getExtension","test","RegExp","$1"]
}
