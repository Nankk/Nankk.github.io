{"version":3,"sources":["reagent/dom.cljs"],"mappings":"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","names":["js/reagent","js/reagent.dom","js/reagent.dom.imported","reagent.dom/imported","reagent.dom/module","js/ReactDOM","js/require","or__4131__auto__","js/Error","js/reagent.dom.roots","reagent.dom/roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.dom/unmount-comp","container","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","reagent.dom/render-comp","comp","callback","*always-update*-orig-val__42202","*always-update*-temp-val__42203","reagent.impl.util/*always-update*","*always-update*-orig-val__42204","*always-update*-temp-val__42205","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent.impl.batching/flush-after-render","reagent.dom/re-render-component","var_args","G__42207","reagent.dom/render","reagent.dom.render.cljs$core$IFn$_invoke$arity$3","reagent.ratom/flush!","f","reagent.impl.template/as-element","cljs.core/fn?","reagent.dom/unmount-component-at-node","reagent.dom/dom-node","this","reagent.impl.template/find-dom-node","reagent.dom/force-update-all","seq__42208","cljs.core/seq","chunk__42209","count__42210","i__42211","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","v","cljs.core/deref","cljs.core/vals","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns reagent.dom\n  (:require [cljsjs.react.dom]\n            [reagent.impl.util :as util]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dbg]]\n            [reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defn module []\n  (cond\n    (some? imported) imported\n    (exists? js/ReactDOM) (set! imported js/ReactDOM)\n    (exists? js/require) (or (set! imported (js/require \"react-dom\"))\n                             (throw (js/Error. \"require('react-dom') failed\")))\n    :else\n    (throw (js/Error. \"js/ReactDOM is missing\"))))\n\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  ($ (module) unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (->> ($ (module) render (comp) container\n            (fn []\n              (binding [util/*always-update* false]\n                (swap! roots assoc container [comp container])\n                (batch/flush-after-render)\n                (if (some? callback)\n                  (callback))))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  ($ (module) findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"]}