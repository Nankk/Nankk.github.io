shadow$provide.module$node_modules$google_auth_library$build$src$auth$refreshclient=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var oauth2client_1=require("module$node_modules$google_auth_library$build$src$auth$oauth2client");global=function(optionsOrClientId,clientSecret,refreshToken,eagerRefreshThresholdMillis){clientSecret=optionsOrClientId&&"object"===typeof optionsOrClientId?optionsOrClientId:{clientId:optionsOrClientId,clientSecret:clientSecret,
refreshToken:refreshToken,eagerRefreshThresholdMillis:eagerRefreshThresholdMillis};optionsOrClientId=oauth2client_1.OAuth2Client.call(this,{clientId:clientSecret.clientId,clientSecret:clientSecret.clientSecret,eagerRefreshThresholdMillis:clientSecret.eagerRefreshThresholdMillis})||this;optionsOrClientId._refreshToken=clientSecret.refreshToken;return optionsOrClientId};$jscomp.inherits(global,oauth2client_1.OAuth2Client);global.prototype.refreshTokenNoCache=function(refreshToken){var $jscomp$async$this=
this;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){return $jscomp$generator$context.return(oauth2client_1.OAuth2Client.prototype.refreshTokenNoCache.call($jscomp$async$this,$jscomp$async$this._refreshToken))})};global.prototype.fromJSON=function(json){if(!json)throw Error("Must pass in a JSON object containing the user refresh token");if("authorized_user"!==json.type)throw Error('The incoming JSON object does not have the "authorized_user" type');if(!json.client_id)throw Error("The incoming JSON object does not contain a client_id field");
if(!json.client_secret)throw Error("The incoming JSON object does not contain a client_secret field");if(!json.refresh_token)throw Error("The incoming JSON object does not contain a refresh_token field");this._clientId=json.client_id;this._clientSecret=json.client_secret;this._refreshToken=json.refresh_token;this.credentials.refresh_token=json.refresh_token};global.prototype.fromStream=function(inputStream,callback){if(callback)this.fromStreamAsync(inputStream).then(function(r){return callback()},
callback);else return this.fromStreamAsync(inputStream)};global.prototype.fromStreamAsync=function(inputStream){var $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){return $jscomp$generator$context.return(new Promise(function(resolve,reject){if(!inputStream)return reject(Error("Must pass in a stream containing the user refresh token."));var s="";inputStream.setEncoding("utf8").on("error",reject).on("data",function(chunk){return s+=chunk}).on("end",
function(){try{var data=JSON.parse(s);$jscomp$async$this.fromJSON(data);return resolve()}catch(err){return reject(err)}})}))})};exports.UserRefreshClient=global}
//# sourceMappingURL=module$node_modules$google_auth_library$build$src$auth$refreshclient.js.map
