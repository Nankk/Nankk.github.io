{
"version":3,
"file":"module$node_modules$encoding$lib$encoding.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0CAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0FtGC,QAASA,iBAAgB,CAACC,GAAD,CAAMC,EAAN,CAAUC,IAAV,CAAgB,CACrC,MAAW,OAAX,GAAID,EAAJ,CACWE,SAAAC,OAAA,CAAiBJ,GAAjB,CAAsBE,IAAtB,CADX,CAEoB,OAAb,GAAIA,IAAJ,CACIC,SAAAE,OAAA,CAAiBL,GAAjB,CAAsBC,EAAtB,CADJ,CAGIE,SAAAE,OAAA,CAAiBF,SAAAC,OAAA,CAAiBJ,GAAjB,CAAsBE,IAAtB,CAAjB,CAA8CD,EAA9C,CAN0B,CAgBzCK,QAASA,cAAa,CAACC,IAAD,CAAO,CACzB,MAAOC,CAACD,IAADC,EAAS,EAATA,UAAA,EAAAC,KAAA,EAAAC,QAAA,CACC,qBADD,CACwB,aADxB,CAAAA,QAAA,CAEC,4BAFD,CAE+B,YAF/B,CAAAA,QAAA,CAGC,mBAHD,CAGsB,QAHtB,CAAAA,QAAA,CAIC,oBAJD,CAIuB,OAJvB,CAAAA,QAAA,CAKC,kBALD;AAKqB,OALrB,CAAAC,YAAA,EADkB,CAzG7B,IAAIC,OAAShB,OAAA,CAAQ,kCAAR,CAAAgB,OACb,aAEA,KAAIT,UAAYP,OAAA,CAAQ,0CAAR,CAAhB,CAGIiB,MAAQjB,OAAA,CAAQ,+CAAR,CAGZC,OAAAC,QAAAgB,QAAA,CAWAA,QAAgB,CAACd,GAAD,CAAMC,EAAN,CAAUC,IAAV,CAAgBa,OAAhB,CAAyB,CACrCb,IAAA,CAAOI,aAAA,CAAcJ,IAAd,EAAsB,OAAtB,CACPD,GAAA,CAAKK,aAAA,CAAcL,EAAd,EAAoB,OAApB,CACLD,IAAA,CAAMA,GAAN,EAAa,EAIA,QAAb,GAAIE,IAAJ,EAAuC,QAAvC,GAAwB,MAAOF,IAA/B,GACIA,GADJ,CACU,IAAIY,MAAJ,CAAWZ,GAAX,CAAgB,QAAhB,CADV,CAIA,IAAIE,IAAJ,GAAaD,EAAb,CAEQ,IAAAe,OADe,QAAnB,GAAI,MAAOhB,IAAX,CACa,IAAIY,MAAJ,CAAWZ,GAAX,CADb,CAGaA,GAJjB,KAMO,IAAIa,KAAJ;AAAa,CAACE,OAAd,CACH,GAAI,CACsBf,OAAAA,CAAAA,GAsC9B,KAAAiB,SAAWH,CADHI,IAAIL,KAAJK,CArC+BhB,IAqC/BgB,CArC2BjB,EAqC3BiB,CAAqB,oBAArBA,CACGJ,SAAA,CAAcd,OAAd,CACX,OAAA,CAAOiB,QAAAE,MAAA,CAAe,CAAf,CAAkBF,QAAAG,OAAlB,CAxCC,CAEF,MAAOC,IAAP,CAAU,CACRC,OAAAC,MAAA,CAAcF,IAAd,CACA,IAAI,CACAL,MAAA,CAASjB,gBAAA,CAAiBC,GAAjB,CAAsBC,EAAtB,CAA0BC,IAA1B,CADT,CAEF,MAAOmB,CAAP,CAAU,CACRC,OAAAC,MAAA,CAAcF,CAAd,CACA,CAAAL,MAAA,CAAShB,GAFD,CAJJ,CAHT,IAaH,IAAI,CACAgB,MAAA,CAASjB,gBAAA,CAAiBC,GAAjB,CAAsBC,EAAtB,CAA0BC,IAA1B,CADT,CAEF,MAAOmB,IAAP,CAAU,CACRC,OAAAC,MAAA,CAAcF,IAAd,CACA,CAAAL,MAAA,CAAShB,GAFD,CAOM,QAAtB,GAAI,MAAOgB,OAAX,GACIA,MADJ,CACa,IAAIJ,MAAJ,CAAWI,MAAX,CAAmB,OAAnB,CADb,CAIA,OAAOA,OA3C8B,CArB6D;",
"sources":["node_modules/encoding/lib/encoding.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$encoding$lib$encoding\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\n\nvar iconvLite = require('iconv-lite');\n// Load Iconv from an external file to be able to disable Iconv for webpack\n// Add /\\/iconv-loader$/ to webpack.IgnorePlugin to ignore it\nvar Iconv = require('./iconv-loader');\n\n// Expose to the world\nmodule.exports.convert = convert;\n\n/**\n * Convert encoding of an UTF-8 string or a buffer\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @param {Boolean} useLite If set to ture, force to use iconvLite\n * @return {Buffer} Encoded string\n */\nfunction convert(str, to, from, useLite) {\n    from = checkEncoding(from || 'UTF-8');\n    to = checkEncoding(to || 'UTF-8');\n    str = str || '';\n\n    var result;\n\n    if (from !== 'UTF-8' && typeof str === 'string') {\n        str = new Buffer(str, 'binary');\n    }\n\n    if (from === to) {\n        if (typeof str === 'string') {\n            result = new Buffer(str);\n        } else {\n            result = str;\n        }\n    } else if (Iconv && !useLite) {\n        try {\n            result = convertIconv(str, to, from);\n        } catch (E) {\n            console.error(E);\n            try {\n                result = convertIconvLite(str, to, from);\n            } catch (E) {\n                console.error(E);\n                result = str;\n            }\n        }\n    } else {\n        try {\n            result = convertIconvLite(str, to, from);\n        } catch (E) {\n            console.error(E);\n            result = str;\n        }\n    }\n\n\n    if (typeof result === 'string') {\n        result = new Buffer(result, 'utf-8');\n    }\n\n    return result;\n}\n\n/**\n * Convert encoding of a string with node-iconv (if available)\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconv(str, to, from) {\n    var response, iconv;\n    iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\n    response = iconv.convert(str);\n    return response.slice(0, response.length);\n}\n\n/**\n * Convert encoding of astring with iconv-lite\n *\n * @param {String|Buffer} str String to be converted\n * @param {String} to Encoding to be converted to\n * @param {String} [from='UTF-8'] Encoding to be converted from\n * @return {Buffer} Encoded string\n */\nfunction convertIconvLite(str, to, from) {\n    if (to === 'UTF-8') {\n        return iconvLite.decode(str, from);\n    } else if (from === 'UTF-8') {\n        return iconvLite.encode(str, to);\n    } else {\n        return iconvLite.encode(iconvLite.decode(str, from), to);\n    }\n}\n\n/**\n * Converts charset name if needed\n *\n * @param {String} name Character set\n * @return {String} Character set name\n */\nfunction checkEncoding(name) {\n    return (name || '').toString().trim().\n    replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').\n    replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').\n    replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').\n    replace(/^ks_c_5601\\-1987$/i, 'CP949').\n    replace(/^us[\\-_]?ascii$/i, 'ASCII').\n    toUpperCase();\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","convertIconvLite","str","to","from","iconvLite","decode","encode","checkEncoding","name","toString","trim","replace","toUpperCase","Buffer","Iconv","convert","useLite","result","response","iconv","slice","length","E","console","error"]
}
