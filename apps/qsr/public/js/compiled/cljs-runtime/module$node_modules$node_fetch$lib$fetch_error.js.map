{
"version":3,
"file":"module$node_modules$node_fetch$lib$fetch_error.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkB3GC,QAASA,WAAU,CAACC,OAAD,CAAUC,IAAV,CAAgBC,WAAhB,CAA6B,CAE/C,IAAAC,KAAA,CAAY,IAAAC,YAAAD,KACZ,KAAAH,QAAA,CAAeA,OACf,KAAAC,KAAA,CAAYA,IAGRC,YAAJ,GACC,IAAAG,KADD,CACa,IAAAC,MADb,CAC0BJ,WAAAG,KAD1B,CAKAE,MAAAC,kBAAA,CAAwB,IAAxB,CAA8B,IAAAJ,YAA9B,CAZ+C,CAVhDP,MAAAC,QAAA,CAAiBC,UAyBjBH,QAAA,CAAQ,+BAAR,CAAAa,SAAA,CAAyBV,UAAzB,CAAqCQ,KAArC,CAjC2G;",
"sources":["node_modules/node-fetch/lib/fetch-error.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_fetch$lib$fetch_error\"] = function(global,require,module,exports) {\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\nmodule.exports = FetchError;\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n\n\tthis.name = this.constructor.name;\n\tthis.message = message;\n\tthis.type = type;\n\n\t// when err.type is `system`, err.code contains system error code\n\tif (systemError) {\n\t\tthis.code = this.errno = systemError.code;\n\t}\n\n\t// hide custom error implementation details from end-users\n\tError.captureStackTrace(this, this.constructor);\n}\n\nrequire('util').inherits(FetchError, Error);\n\n};"],
"names":["shadow$provide","global","require","module","exports","FetchError","message","type","systemError","name","constructor","code","errno","Error","captureStackTrace","inherits"]
}
