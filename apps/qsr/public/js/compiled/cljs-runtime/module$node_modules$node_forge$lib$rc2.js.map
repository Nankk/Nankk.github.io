{
"version":3,
"file":"module$node_modules$node_forge$lib$rc2.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/node-forge/lib/rc2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$rc2\"] = function(global,require,module,exports) {\n/**\n * RC2 implementation.\n *\n * @author Stefan Siegl\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * Information on the RC2 cipher is available from RFC #2268,\n * http://www.ietf.org/rfc/rfc2268.txt\n */\nvar forge = require('./forge');\nrequire('./util');\n\nvar piTable = [\n  0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,\n  0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,\n  0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,\n  0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,\n  0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,\n  0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,\n  0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,\n  0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,\n  0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,\n  0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,\n  0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,\n  0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,\n  0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,\n  0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,\n  0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,\n  0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad\n];\n\nvar s = [1, 2, 3, 5];\n\n/**\n * Rotate a word left by given number of bits.\n *\n * Bits that are shifted out on the left are put back in on the right\n * hand side.\n *\n * @param word The word to shift left.\n * @param bits The number of bits to shift by.\n * @return The rotated word.\n */\nvar rol = function(word, bits) {\n  return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));\n};\n\n/**\n * Rotate a word right by given number of bits.\n *\n * Bits that are shifted out on the right are put back in on the left\n * hand side.\n *\n * @param word The word to shift right.\n * @param bits The number of bits to shift by.\n * @return The rotated word.\n */\nvar ror = function(word, bits) {\n  return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);\n};\n\n/* RC2 API */\nmodule.exports = forge.rc2 = forge.rc2 || {};\n\n/**\n * Perform RC2 key expansion as per RFC #2268, section 2.\n *\n * @param key variable-length user key (between 1 and 128 bytes)\n * @param effKeyBits number of effective key bits (default: 128)\n * @return the expanded RC2 key (ByteBuffer of 128 bytes)\n */\nforge.rc2.expandKey = function(key, effKeyBits) {\n  if(typeof key === 'string') {\n    key = forge.util.createBuffer(key);\n  }\n  effKeyBits = effKeyBits || 128;\n\n  /* introduce variables that match the names used in RFC #2268 */\n  var L = key;\n  var T = key.length();\n  var T1 = effKeyBits;\n  var T8 = Math.ceil(T1 / 8);\n  var TM = 0xff >> (T1 & 0x07);\n  var i;\n\n  for(i = T; i < 128; i++) {\n    L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);\n  }\n\n  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);\n\n  for(i = 127 - T8; i >= 0; i--) {\n    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);\n  }\n\n  return L;\n};\n\n/**\n * Creates a RC2 cipher object.\n *\n * @param key the symmetric key to use (as base for key generation).\n * @param bits the number of effective key bits.\n * @param encrypt false for decryption, true for encryption.\n *\n * @return the cipher.\n */\nvar createCipher = function(key, bits, encrypt) {\n  var _finish = false, _input = null, _output = null, _iv = null;\n  var mixRound, mashRound;\n  var i, j, K = [];\n\n  /* Expand key and fill into K[] Array */\n  key = forge.rc2.expandKey(key, bits);\n  for(i = 0; i < 64; i++) {\n    K.push(key.getInt16Le());\n  }\n\n  if(encrypt) {\n    /**\n     * Perform one mixing round \"in place\".\n     *\n     * @param R Array of four words to perform mixing on.\n     */\n    mixRound = function(R) {\n      for(i = 0; i < 4; i++) {\n        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +\n          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);\n        R[i] = rol(R[i], s[i]);\n        j++;\n      }\n    };\n\n    /**\n     * Perform one mashing round \"in place\".\n     *\n     * @param R Array of four words to perform mashing on.\n     */\n    mashRound = function(R) {\n      for(i = 0; i < 4; i++) {\n        R[i] += K[R[(i + 3) % 4] & 63];\n      }\n    };\n  } else {\n    /**\n     * Perform one r-mixing round \"in place\".\n     *\n     * @param R Array of four words to perform mixing on.\n     */\n    mixRound = function(R) {\n      for(i = 3; i >= 0; i--) {\n        R[i] = ror(R[i], s[i]);\n        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +\n          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);\n        j--;\n      }\n    };\n\n    /**\n     * Perform one r-mashing round \"in place\".\n     *\n     * @param R Array of four words to perform mashing on.\n     */\n    mashRound = function(R) {\n      for(i = 3; i >= 0; i--) {\n        R[i] -= K[R[(i + 3) % 4] & 63];\n      }\n    };\n  }\n\n  /**\n   * Run the specified cipher execution plan.\n   *\n   * This function takes four words from the input buffer, applies the IV on\n   * it (if requested) and runs the provided execution plan.\n   *\n   * The plan must be put together in form of a array of arrays.  Where the\n   * outer one is simply a list of steps to perform and the inner one needs\n   * to have two elements: the first one telling how many rounds to perform,\n   * the second one telling what to do (i.e. the function to call).\n   *\n   * @param {Array} plan The plan to execute.\n   */\n  var runPlan = function(plan) {\n    var R = [];\n\n    /* Get data from input buffer and fill the four words into R */\n    for(i = 0; i < 4; i++) {\n      var val = _input.getInt16Le();\n\n      if(_iv !== null) {\n        if(encrypt) {\n          /* We're encrypting, apply the IV first. */\n          val ^= _iv.getInt16Le();\n        } else {\n          /* We're decryption, keep cipher text for next block. */\n          _iv.putInt16Le(val);\n        }\n      }\n\n      R.push(val & 0xffff);\n    }\n\n    /* Reset global \"j\" variable as per spec. */\n    j = encrypt ? 0 : 63;\n\n    /* Run execution plan. */\n    for(var ptr = 0; ptr < plan.length; ptr++) {\n      for(var ctr = 0; ctr < plan[ptr][0]; ctr++) {\n        plan[ptr][1](R);\n      }\n    }\n\n    /* Write back result to output buffer. */\n    for(i = 0; i < 4; i++) {\n      if(_iv !== null) {\n        if(encrypt) {\n          /* We're encrypting in CBC-mode, feed back encrypted bytes into\n             IV buffer to carry it forward to next block. */\n          _iv.putInt16Le(R[i]);\n        } else {\n          R[i] ^= _iv.getInt16Le();\n        }\n      }\n\n      _output.putInt16Le(R[i]);\n    }\n  };\n\n  /* Create cipher object */\n  var cipher = null;\n  cipher = {\n    /**\n     * Starts or restarts the encryption or decryption process, whichever\n     * was previously configured.\n     *\n     * To use the cipher in CBC mode, iv may be given either as a string\n     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.\n     *\n     * @param iv the initialization vector to use, null for ECB mode.\n     * @param output the output the buffer to write to, null to create one.\n     */\n    start: function(iv, output) {\n      if(iv) {\n        /* CBC mode */\n        if(typeof iv === 'string') {\n          iv = forge.util.createBuffer(iv);\n        }\n      }\n\n      _finish = false;\n      _input = forge.util.createBuffer();\n      _output = output || new forge.util.createBuffer();\n      _iv = iv;\n\n      cipher.output = _output;\n    },\n\n    /**\n     * Updates the next block.\n     *\n     * @param input the buffer to read from.\n     */\n    update: function(input) {\n      if(!_finish) {\n        // not finishing, so fill the input buffer with more input\n        _input.putBuffer(input);\n      }\n\n      while(_input.length() >= 8) {\n        runPlan([\n            [ 5, mixRound ],\n            [ 1, mashRound ],\n            [ 6, mixRound ],\n            [ 1, mashRound ],\n            [ 5, mixRound ]\n          ]);\n      }\n    },\n\n    /**\n     * Finishes encrypting or decrypting.\n     *\n     * @param pad a padding function to use, null for PKCS#7 padding,\n     *           signature(blockSize, buffer, decrypt).\n     *\n     * @return true if successful, false on error.\n     */\n    finish: function(pad) {\n      var rval = true;\n\n      if(encrypt) {\n        if(pad) {\n          rval = pad(8, _input, !encrypt);\n        } else {\n          // add PKCS#7 padding to block (each pad byte is the\n          // value of the number of pad bytes)\n          var padding = (_input.length() === 8) ? 8 : (8 - _input.length());\n          _input.fillWithByte(padding, padding);\n        }\n      }\n\n      if(rval) {\n        // do final update\n        _finish = true;\n        cipher.update();\n      }\n\n      if(!encrypt) {\n        // check for error: input data not a multiple of block size\n        rval = (_input.length() === 0);\n        if(rval) {\n          if(pad) {\n            rval = pad(8, _output, !encrypt);\n          } else {\n            // ensure padding byte count is valid\n            var len = _output.length();\n            var count = _output.at(len - 1);\n\n            if(count > len) {\n              rval = false;\n            } else {\n              // trim off padding bytes\n              _output.truncate(count);\n            }\n          }\n        }\n      }\n\n      return rval;\n    }\n  };\n\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\n * given symmetric key. The output will be stored in the 'output' member\n * of the returned cipher.\n *\n * The key and iv may be given as a string of bytes or a byte buffer.\n * The cipher is initialized to use 128 effective key bits.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n *\n * @return the cipher.\n */\nforge.rc2.startEncrypting = function(key, iv, output) {\n  var cipher = forge.rc2.createEncryptionCipher(key, 128);\n  cipher.start(iv, output);\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\n * given symmetric key.\n *\n * The key may be given as a string of bytes or a byte buffer.\n *\n * To start encrypting call start() on the cipher with an iv and optional\n * output buffer.\n *\n * @param key the symmetric key to use.\n *\n * @return the cipher.\n */\nforge.rc2.createEncryptionCipher = function(key, bits) {\n  return createCipher(key, bits, true);\n};\n\n/**\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\n * given symmetric key. The output will be stored in the 'output' member\n * of the returned cipher.\n *\n * The key and iv may be given as a string of bytes or a byte buffer.\n * The cipher is initialized to use 128 effective key bits.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n *\n * @return the cipher.\n */\nforge.rc2.startDecrypting = function(key, iv, output) {\n  var cipher = forge.rc2.createDecryptionCipher(key, 128);\n  cipher.start(iv, output);\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\n * given symmetric key.\n *\n * The key may be given as a string of bytes or a byte buffer.\n *\n * To start decrypting call start() on the cipher with an iv and optional\n * output buffer.\n *\n * @param key the symmetric key to use.\n *\n * @return the cipher.\n */\nforge.rc2.createDecryptionCipher = function(key, bits) {\n  return createCipher(key, bits, false);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","forge","piTable","s","rc2","expandKey","forge.rc2.expandKey","key","effKeyBits","util","createBuffer","L","T","length","T1","T8","Math","ceil","TM","i","putByte","at","setAt","createCipher","bits","encrypt","_finish","_input","_output","_iv","j","K","push","getInt16Le","mixRound","R","word","mashRound","cipher","start","iv","output","update","input","putBuffer","val","putInt16Le","ptr","plan","ctr","finish","pad","rval","padding","fillWithByte","len","count","truncate","startEncrypting","forge.rc2.startEncrypting","createEncryptionCipher","forge.rc2.createEncryptionCipher","startDecrypting","forge.rc2.startDecrypting","createDecryptionCipher","forge.rc2.createDecryptionCipher"]
}
