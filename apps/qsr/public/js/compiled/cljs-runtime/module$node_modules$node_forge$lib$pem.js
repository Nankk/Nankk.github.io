shadow$provide.module$node_modules$node_forge$lib$pem=function(global,require,module,exports){function foldHeader(header){for(var rval=header.name+": ",values=[],insertSpace=function(match,$1){return" "+$1},i=0;i<header.values.length;++i)values.push(header.values[i].replace(/^(\S+\r\n)/,insertSpace));rval+=values.join(",")+"\r\n";values=0;header=-1;for(i=0;i<rval.length;++i,++values)if(65<values&&-1!==header)values=rval[header],","===values?(++header,rval=rval.substr(0,header)+"\r\n "+rval.substr(header)):
rval=rval.substr(0,header)+"\r\n"+values+rval.substr(header+1),values=i-header-1,header=-1,++i;else if(" "===rval[i]||"\t"===rval[i]||","===rval[i])header=i;return rval}var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$util");global=module.exports=forge.pem=forge.pem||{};global.encode=function(msg,options){options=options||{};var rval="-----BEGIN "+msg.type+"-----\r\n";if(msg.procType){var header={name:"Proc-Type",values:[String(msg.procType.version),
msg.procType.type]};rval+=foldHeader(header)}msg.contentDomain&&(header={name:"Content-Domain",values:[msg.contentDomain]},rval+=foldHeader(header));msg.dekInfo&&(header={name:"DEK-Info",values:[msg.dekInfo.algorithm]},msg.dekInfo.parameters&&header.values.push(msg.dekInfo.parameters),rval+=foldHeader(header));if(msg.headers)for(header=0;header<msg.headers.length;++header)rval+=foldHeader(msg.headers[header]);msg.procType&&(rval+="\r\n");rval+=forge.util.encode64(msg.body,options.maxline||64)+"\r\n";
return rval+="-----END "+msg.type+"-----\r\n"};global.decode=function(str){for(var rval=[],rMessage=/\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g,rHeader=/([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/,rCRLF=/\r?\n/,match;;){match=rMessage.exec(str);if(!match)break;var msg={type:match[1],procType:null,contentDomain:null,dekInfo:null,headers:[],body:forge.util.decode64(match[3])};rval.push(msg);if(match[2]){for(var lines=match[2].split(rCRLF),
li=0;match&&li<lines.length;){match=lines[li].replace(/\s+$/,"");for(var nl=li+1;nl<lines.length;++nl){var next=lines[nl];if(!/\s/.test(next[0]))break;match+=next;li=nl}if(match=match.match(rHeader)){nl={name:match[1],values:[]};next=match[2].split(",");for(var vi=0;vi<next.length;++vi)nl.values.push(next[vi].replace(/^\s+/,""));if(msg.procType)if(msg.contentDomain||"Content-Domain"!==nl.name)if(msg.dekInfo||"DEK-Info"!==nl.name)msg.headers.push(nl);else{if(0===nl.values.length)throw Error('Invalid PEM formatted message. The "DEK-Info" header must have at least one subfield.');
msg.dekInfo={algorithm:next[0],parameters:next[1]||null}}else msg.contentDomain=next[0]||"";else{if("Proc-Type"!==nl.name)throw Error('Invalid PEM formatted message. The first encapsulated header must be "Proc-Type".');if(2!==nl.values.length)throw Error('Invalid PEM formatted message. The "Proc-Type" header must have two subfields.');msg.procType={version:next[0],type:next[1]}}}++li}if("ENCRYPTED"===msg.procType&&!msg.dekInfo)throw Error('Invalid PEM formatted message. The "DEK-Info" header must be present if "Proc-Type" is "ENCRYPTED".');
}}if(0===rval.length)throw Error("Invalid PEM formatted message.");return rval}}
//# sourceMappingURL=module$node_modules$node_forge$lib$pem.js.map
