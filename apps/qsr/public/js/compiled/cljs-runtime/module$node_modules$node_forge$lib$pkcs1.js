shadow$provide.module$node_modules$node_forge$lib$pkcs1=function(global,require,module,exports){function rsa_mgf1(seed,maskLength,hash){hash||(hash=forge.md.sha1.create());for(var t="",count=Math.ceil(maskLength/hash.digestLength),i=0;i<count;++i){var c=String.fromCharCode(i>>24&255,i>>16&255,i>>8&255,i&255);hash.start();hash.update(seed+c);t+=hash.digest().getBytes()}return t.substring(0,maskLength)}var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$util");
require("module$node_modules$node_forge$lib$random");require("module$node_modules$node_forge$lib$sha1");global=module.exports=forge.pkcs1=forge.pkcs1||{};global.encode_rsa_oaep=function(key,message,options,JSCompiler_OptimizeArgumentsArray_p0,JSCompiler_OptimizeArgumentsArray_p1){if("string"===typeof options){var label=options;var seed=JSCompiler_OptimizeArgumentsArray_p0||void 0;var md=JSCompiler_OptimizeArgumentsArray_p1||void 0}else if(options&&(label=options.label||void 0,seed=options.seed||void 0,
md=options.md||void 0,options.mgf1&&options.mgf1.md))var mgf1Md=options.mgf1.md;md?md.start():md=forge.md.sha1.create();mgf1Md||(mgf1Md=md);key=Math.ceil(key.n.bitLength()/8);options=key-2*md.digestLength-2;if(message.length>options)throw mgf1Md=Error("RSAES-OAEP input message length is too long."),mgf1Md.length=message.length,mgf1Md.maxLength=options,mgf1Md;label||(label="");md.update(label,"raw");label=md.digest();JSCompiler_OptimizeArgumentsArray_p0="";options-=message.length;for(JSCompiler_OptimizeArgumentsArray_p1=
0;JSCompiler_OptimizeArgumentsArray_p1<options;JSCompiler_OptimizeArgumentsArray_p1++)JSCompiler_OptimizeArgumentsArray_p0+="\x00";message=label.getBytes()+JSCompiler_OptimizeArgumentsArray_p0+""+message;if(!seed)seed=forge.random.getBytes(md.digestLength);else if(seed.length!==md.digestLength)throw mgf1Md=Error("Invalid RSAES-OAEP seed. The seed length must match the digest length."),mgf1Md.seedLength=seed.length,mgf1Md.digestLength=md.digestLength,mgf1Md;key=rsa_mgf1(seed,key-md.digestLength-1,
mgf1Md);message=forge.util.xorBytes(message,key,message.length);md=rsa_mgf1(message,md.digestLength,mgf1Md);return"\x00"+forge.util.xorBytes(seed,md,seed.length)+message};global.decode_rsa_oaep=function(key,em,options,JSCompiler_OptimizeArgumentsArray_p2){if("string"===typeof options){var label=options;var md=JSCompiler_OptimizeArgumentsArray_p2||void 0}else if(options&&(label=options.label||void 0,md=options.md||void 0,options.mgf1&&options.mgf1.md))var mgf1Md=options.mgf1.md;options=Math.ceil(key.n.bitLength()/
8);if(em.length!==options)throw mgf1Md=Error("RSAES-OAEP encoded message length is invalid."),mgf1Md.length=em.length,mgf1Md.expectedLength=options,mgf1Md;void 0===md?md=forge.md.sha1.create():md.start();mgf1Md||(mgf1Md=md);if(options<2*md.digestLength+2)throw Error("RSAES-OAEP key is too short for the hash function.");label||(label="");md.update(label,"raw");label=md.digest().getBytes();key=em.charAt(0);JSCompiler_OptimizeArgumentsArray_p2=em.substring(1,md.digestLength+1);em=em.substring(1+md.digestLength);
var seedMask=rsa_mgf1(em,md.digestLength,mgf1Md);JSCompiler_OptimizeArgumentsArray_p2=forge.util.xorBytes(JSCompiler_OptimizeArgumentsArray_p2,seedMask,JSCompiler_OptimizeArgumentsArray_p2.length);mgf1Md=rsa_mgf1(JSCompiler_OptimizeArgumentsArray_p2,options-md.digestLength-1,mgf1Md);em=forge.util.xorBytes(em,mgf1Md,em.length);options=em.substring(0,md.digestLength);mgf1Md="\x00"!==key;for(key=0;key<md.digestLength;++key)mgf1Md|=label.charAt(key)!==options.charAt(key);label=1;for(md=key=md.digestLength;md<
em.length;md++)options=em.charCodeAt(md),JSCompiler_OptimizeArgumentsArray_p2=options&1^1,mgf1Md|=options&(label?65534:0),label&=JSCompiler_OptimizeArgumentsArray_p2,key+=label;if(mgf1Md||1!==em.charCodeAt(key))throw Error("Invalid RSAES-OAEP padding.");return em.substring(key+1)}}
//# sourceMappingURL=module$node_modules$node_forge$lib$pkcs1.js.map
