{
"version":3,
"file":"module$node_modules$google_auth_library$build$src$auth$oauth2client.js",
"lineCount":41,
"mappings":"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",
"sources":["node_modules/google-auth-library/build/src/auth/oauth2client.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$google_auth_library$build$src$auth$oauth2client\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst querystring = require(\"querystring\");\nconst stream = require(\"stream\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst messages = require(\"../messages\");\nconst authclient_1 = require(\"./authclient\");\nconst loginticket_1 = require(\"./loginticket\");\nvar CodeChallengeMethod;\n(function (CodeChallengeMethod) {\n    CodeChallengeMethod[\"Plain\"] = \"plain\";\n    CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod = exports.CodeChallengeMethod || (exports.CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function (CertificateFormat) {\n    CertificateFormat[\"PEM\"] = \"PEM\";\n    CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat = exports.CertificateFormat || (exports.CertificateFormat = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n    constructor(optionsOrClientId, clientSecret, redirectUri) {\n        super();\n        this.certificateCache = {};\n        this.certificateExpiry = null;\n        this.certificateCacheFormat = CertificateFormat.PEM;\n        this.refreshTokenPromises = new Map();\n        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'\n            ? optionsOrClientId\n            : { clientId: optionsOrClientId, clientSecret, redirectUri };\n        this._clientId = opts.clientId;\n        this._clientSecret = opts.clientSecret;\n        this.redirectUri = opts.redirectUri;\n        this.eagerRefreshThresholdMillis =\n            opts.eagerRefreshThresholdMillis || 5 * 60 * 1000;\n    }\n    /**\n     * Generates URL for consent page landing.\n     * @param opts Options.\n     * @return URL to consent page.\n     */\n    generateAuthUrl(opts = {}) {\n        if (opts.code_challenge_method && !opts.code_challenge) {\n            throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n        }\n        opts.response_type = opts.response_type || 'code';\n        opts.client_id = opts.client_id || this._clientId;\n        opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n        // Allow scopes to be passed either as array or a string\n        if (opts.scope instanceof Array) {\n            opts.scope = opts.scope.join(' ');\n        }\n        const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;\n        return rootUrl + '?' + querystring.stringify(opts);\n    }\n    generateCodeVerifier() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n    }\n    /**\n     * Convenience method to automatically generate a code_verifier, and it's\n     * resulting SHA256. If used, this must be paired with a S256\n     * code_challenge_method.\n     */\n    async generateCodeVerifierAsync() {\n        // base64 encoding uses 6 bits per character, and we want to generate128\n        // characters. 6*128/8 = 96.\n        const crypto = crypto_1.createCrypto();\n        const randomString = crypto.randomBytesBase64(96);\n        // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n        // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n        // swapping out a few chars.\n        const codeVerifier = randomString\n            .replace(/\\+/g, '~')\n            .replace(/=/g, '_')\n            .replace(/\\//g, '-');\n        // Generate the base64 encoded SHA256\n        const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier);\n        // We need to use base64UrlEncoding instead of standard base64\n        const codeChallenge = unencodedCodeChallenge\n            .split('=')[0]\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_');\n        return { codeVerifier, codeChallenge };\n    }\n    getToken(codeOrOptions, callback) {\n        const options = typeof codeOrOptions === 'string' ? { code: codeOrOptions } : codeOrOptions;\n        if (callback) {\n            this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n        }\n        else {\n            return this.getTokenAsync(options);\n        }\n    }\n    async getTokenAsync(options) {\n        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n        const values = {\n            code: options.code,\n            client_id: options.client_id || this._clientId,\n            client_secret: this._clientSecret,\n            redirect_uri: options.redirect_uri || this.redirectUri,\n            grant_type: 'authorization_code',\n            code_verifier: options.codeVerifier,\n        };\n        const res = await this.transporter.request({\n            method: 'POST',\n            url,\n            data: querystring.stringify(values),\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        });\n        const tokens = res.data;\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    /**\n     * Refreshes the access token.\n     * @param refresh_token Existing refresh token.\n     * @private\n     */\n    async refreshToken(refreshToken) {\n        if (!refreshToken) {\n            return this.refreshTokenNoCache(refreshToken);\n        }\n        // If a request to refresh using the same token has started,\n        // return the same promise.\n        if (this.refreshTokenPromises.has(refreshToken)) {\n            return this.refreshTokenPromises.get(refreshToken);\n        }\n        const p = this.refreshTokenNoCache(refreshToken).then(r => {\n            this.refreshTokenPromises.delete(refreshToken);\n            return r;\n        }, e => {\n            this.refreshTokenPromises.delete(refreshToken);\n            throw e;\n        });\n        this.refreshTokenPromises.set(refreshToken, p);\n        return p;\n    }\n    async refreshTokenNoCache(refreshToken) {\n        if (!refreshToken) {\n            throw new Error('No refresh token is set.');\n        }\n        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n        const data = {\n            refresh_token: refreshToken,\n            client_id: this._clientId,\n            client_secret: this._clientSecret,\n            grant_type: 'refresh_token',\n        };\n        // request for new token\n        const res = await this.transporter.request({\n            method: 'POST',\n            url,\n            data: querystring.stringify(data),\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        });\n        const tokens = res.data;\n        // TODO: de-duplicate this code from a few spots\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    refreshAccessToken(callback) {\n        messages.warn(messages.REFRESH_ACCESS_TOKEN_DEPRECATED);\n        if (callback) {\n            this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n        }\n        else {\n            return this.refreshAccessTokenAsync();\n        }\n    }\n    async refreshAccessTokenAsync() {\n        const r = await this.refreshToken(this.credentials.refresh_token);\n        const tokens = r.tokens;\n        tokens.refresh_token = this.credentials.refresh_token;\n        this.credentials = tokens;\n        return { credentials: this.credentials, res: r.res };\n    }\n    getAccessToken(callback) {\n        if (callback) {\n            this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n        }\n        else {\n            return this.getAccessTokenAsync();\n        }\n    }\n    async getAccessTokenAsync() {\n        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n        if (shouldRefresh) {\n            if (!this.credentials.refresh_token) {\n                throw new Error('No refresh token is set.');\n            }\n            const r = await this.refreshAccessTokenAsync();\n            if (!r.credentials || (r.credentials && !r.credentials.access_token)) {\n                throw new Error('Could not refresh access token.');\n            }\n            return { token: r.credentials.access_token, res: r.res };\n        }\n        else {\n            return { token: this.credentials.access_token };\n        }\n    }\n    getRequestMetadata(url, callback) {\n        messages.warn(messages.OAUTH_GET_REQUEST_METADATA_DEPRECATED);\n        if (callback) {\n            this.getRequestMetadataAsync(url).then(r => callback(null, r.headers, r.res), callback);\n        }\n        else {\n            return this.getRequestMetadataAsync();\n        }\n    }\n    /**\n     * The main authentication interface.  It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * In OAuth2Client, the result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     * @param url The optional url being authorized\n     */\n    async getRequestHeaders(url) {\n        const res = await this.getRequestMetadataAsync(url);\n        return res.headers;\n    }\n    async getRequestMetadataAsync(url) {\n        const thisCreds = this.credentials;\n        if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey) {\n            throw new Error('No access, refresh token or API key is set.');\n        }\n        if (thisCreds.access_token && !this.isTokenExpiring()) {\n            thisCreds.token_type = thisCreds.token_type || 'Bearer';\n            const headers = {\n                Authorization: thisCreds.token_type + ' ' + thisCreds.access_token,\n            };\n            return { headers };\n        }\n        if (this.apiKey) {\n            return { headers: { 'X-Goog-Api-Key': this.apiKey } };\n        }\n        let r = null;\n        let tokens = null;\n        try {\n            r = await this.refreshToken(thisCreds.refresh_token);\n            tokens = r.tokens;\n        }\n        catch (err) {\n            const e = err;\n            if (e.response &&\n                (e.response.status === 403 || e.response.status === 404)) {\n                e.message = `Could not refresh access token: ${e.message}`;\n            }\n            throw e;\n        }\n        const credentials = this.credentials;\n        credentials.token_type = credentials.token_type || 'Bearer';\n        tokens.refresh_token = credentials.refresh_token;\n        this.credentials = tokens;\n        const headers = {\n            Authorization: credentials.token_type + ' ' + tokens.access_token,\n        };\n        return { headers, res: r.res };\n    }\n    /**\n     * Generates an URL to revoke the given token.\n     * @param token The existing token to be revoked.\n     */\n    static getRevokeTokenUrl(token) {\n        const parameters = querystring.stringify({ token });\n        return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;\n    }\n    revokeToken(token, callback) {\n        const opts = {\n            url: OAuth2Client.getRevokeTokenUrl(token),\n            method: 'POST',\n        };\n        if (callback) {\n            this.transporter\n                .request(opts)\n                .then(r => callback(null, r), callback);\n        }\n        else {\n            return this.transporter.request(opts);\n        }\n    }\n    revokeCredentials(callback) {\n        if (callback) {\n            this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n        }\n        else {\n            return this.revokeCredentialsAsync();\n        }\n    }\n    async revokeCredentialsAsync() {\n        const token = this.credentials.access_token;\n        this.credentials = {};\n        if (token) {\n            return this.revokeToken(token);\n        }\n        else {\n            throw new Error('No access token to revoke.');\n        }\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    async requestAsync(opts, retry = false) {\n        let r2;\n        try {\n            const r = await this.getRequestMetadataAsync(opts.url);\n            if (r.headers && r.headers.Authorization) {\n                opts.headers = opts.headers || {};\n                opts.headers.Authorization = r.headers.Authorization;\n            }\n            if (this.apiKey) {\n                opts.headers = opts.headers || {};\n                opts.headers['X-Goog-Api-Key'] = this.apiKey;\n            }\n            r2 = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - An access_token and refresh_token were available, but no\n                //   expiry_date was availabe. This can happen when developers stash\n                //   the access_token and refresh_token for later use, but the\n                //   access_token fails on the first try because it's expired.\n                const mayRequireRefresh = this.credentials &&\n                    this.credentials.access_token &&\n                    this.credentials.refresh_token &&\n                    !this.credentials.expiry_date;\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {\n                    await this.refreshAccessTokenAsync();\n                    return this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return r2;\n    }\n    verifyIdToken(options, callback) {\n        // This function used to accept two arguments instead of an options object.\n        // Check the types to help users upgrade with less pain.\n        // This check can be removed after a 2.0 release.\n        if (callback && typeof callback !== 'function') {\n            throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n        }\n        if (callback) {\n            this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.verifyIdTokenAsync(options);\n        }\n    }\n    async verifyIdTokenAsync(options) {\n        if (!options.idToken) {\n            throw new Error('The verifyIdToken method requires an ID Token');\n        }\n        const response = await this.getFederatedSignonCertsAsync();\n        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);\n        return login;\n    }\n    /**\n     * Obtains information about the provisioned access token.  Especially useful\n     * if you want to check the scopes that were provisioned to a given token.\n     *\n     * @param accessToken Required.  The Access Token for which you want to get\n     * user info.\n     */\n    async getTokenInfo(accessToken) {\n        const { data } = await this.transporter.request({\n            method: 'GET',\n            url: OAuth2Client.GOOGLE_TOKEN_INFO_URL,\n            params: { access_token: accessToken },\n        });\n        const info = Object.assign({\n            expiry_date: new Date().getTime() + data.expires_in * 1000,\n            scopes: data.scope.split(' '),\n        }, data);\n        delete info.expires_in;\n        delete info.scope;\n        return info;\n    }\n    getFederatedSignonCerts(callback) {\n        if (callback) {\n            this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n        }\n        else {\n            return this.getFederatedSignonCertsAsync();\n        }\n    }\n    async getFederatedSignonCertsAsync() {\n        const nowTime = new Date().getTime();\n        const format = crypto_1.hasBrowserCrypto()\n            ? CertificateFormat.JWK\n            : CertificateFormat.PEM;\n        if (this.certificateExpiry &&\n            nowTime < this.certificateExpiry.getTime() &&\n            this.certificateCacheFormat === format) {\n            return { certs: this.certificateCache, format };\n        }\n        let res;\n        let url;\n        switch (format) {\n            case CertificateFormat.PEM:\n                url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;\n                break;\n            case CertificateFormat.JWK:\n                url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        try {\n            res = await this.transporter.request({ url });\n        }\n        catch (e) {\n            e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            throw e;\n        }\n        const cacheControl = res ? res.headers['cache-control'] : undefined;\n        let cacheAge = -1;\n        if (cacheControl) {\n            const pattern = new RegExp('max-age=([0-9]*)');\n            const regexResult = pattern.exec(cacheControl);\n            if (regexResult && regexResult.length === 2) {\n                // Cache results with max-age (in seconds)\n                cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n            }\n        }\n        let certificates = {};\n        switch (format) {\n            case CertificateFormat.PEM:\n                certificates = res.data;\n                break;\n            case CertificateFormat.JWK:\n                for (const key of res.data.keys) {\n                    certificates[key.kid] = key;\n                }\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        const now = new Date();\n        this.certificateExpiry =\n            cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n        this.certificateCache = certificates;\n        this.certificateCacheFormat = format;\n        return { certs: certificates, format, res };\n    }\n    verifySignedJwtWithCerts() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n    }\n    /**\n     * Verify the id token is signed with the correct certificate\n     * and is from the correct audience.\n     * @param jwt The jwt to verify (The ID Token in this case).\n     * @param certs The array of certs to test the jwt against.\n     * @param requiredAudience The audience to test the jwt against.\n     * @param issuers The allowed issuers of the jwt (Optional).\n     * @param maxExpiry The max expiry the certificate can be (Optional).\n     * @return Returns a promise resolving to LoginTicket on verification.\n     */\n    async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n        const crypto = crypto_1.createCrypto();\n        if (!maxExpiry) {\n            maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;\n        }\n        const segments = jwt.split('.');\n        if (segments.length !== 3) {\n            throw new Error('Wrong number of segments in token: ' + jwt);\n        }\n        const signed = segments[0] + '.' + segments[1];\n        const signature = segments[2];\n        let envelope;\n        let payload;\n        try {\n            envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n        }\n        catch (err) {\n            err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n            throw err;\n        }\n        if (!envelope) {\n            throw new Error(\"Can't parse token envelope: \" + segments[0]);\n        }\n        try {\n            payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n        }\n        catch (err) {\n            err.message = `Can't parse token payload '${segments[0]}`;\n            throw err;\n        }\n        if (!payload) {\n            throw new Error(\"Can't parse token payload: \" + segments[1]);\n        }\n        if (!certs.hasOwnProperty(envelope.kid)) {\n            // If this is not present, then there's no reason to attempt verification\n            throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n        }\n        const cert = certs[envelope.kid];\n        const verified = await crypto.verify(cert, signed, signature);\n        if (!verified) {\n            throw new Error('Invalid token signature: ' + jwt);\n        }\n        if (!payload.iat) {\n            throw new Error('No issue time in token: ' + JSON.stringify(payload));\n        }\n        if (!payload.exp) {\n            throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n        }\n        const iat = Number(payload.iat);\n        if (isNaN(iat))\n            throw new Error('iat field using invalid format');\n        const exp = Number(payload.exp);\n        if (isNaN(exp))\n            throw new Error('exp field using invalid format');\n        const now = new Date().getTime() / 1000;\n        if (exp >= now + maxExpiry) {\n            throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n        }\n        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n        if (now < earliest) {\n            throw new Error('Token used too early, ' +\n                now +\n                ' < ' +\n                earliest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (now > latest) {\n            throw new Error('Token used too late, ' +\n                now +\n                ' > ' +\n                latest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (issuers && issuers.indexOf(payload.iss) < 0) {\n            throw new Error('Invalid issuer, expected one of [' +\n                issuers +\n                '], but got ' +\n                payload.iss);\n        }\n        // Check the audience matches if we have one\n        if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n            const aud = payload.aud;\n            let audVerified = false;\n            // If the requiredAudience is an array, check if it contains token\n            // audience\n            if (requiredAudience.constructor === Array) {\n                audVerified = requiredAudience.indexOf(aud) > -1;\n            }\n            else {\n                audVerified = aud === requiredAudience;\n            }\n            if (!audVerified) {\n                throw new Error('Wrong recipient, payload audience != requiredAudience');\n            }\n        }\n        return new loginticket_1.LoginTicket(envelope, payload);\n    }\n    /**\n     * Returns true if a token is expired or will expire within\n     * eagerRefreshThresholdMillismilliseconds.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     */\n    isTokenExpiring() {\n        const expiryDate = this.credentials.expiry_date;\n        return expiryDate\n            ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.OAuth2Client = OAuth2Client;\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * The base URL for auth endpoints.\n */\nOAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = 'https://accounts.google.com/o/oauth2/v2/auth';\n/**\n * The base endpoint for token retrieval.\n */\nOAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = 'https://oauth2.googleapis.com/token';\n/**\n * The base endpoint to revoke tokens.\n */\nOAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = 'https://oauth2.googleapis.com/revoke';\n/**\n * Google Sign on certificates in PEM format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v1/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v3/certs';\n/**\n * Clock skew - five minutes in seconds\n */\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * Max Token Lifetime is one day in seconds\n */\nOAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;\n/**\n * The allowed oauth token issuers.\n */\nOAuth2Client.ISSUERS_ = [\n    'accounts.google.com',\n    'https://accounts.google.com',\n];\n//# sourceMappingURL=oauth2client.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","querystring","stream","crypto_1","messages","authclient_1","loginticket_1","CodeChallengeMethod","CertificateFormat","OAuth2Client","constructor","optionsOrClientId","clientSecret","redirectUri","certificateCache","certificateExpiry","certificateCacheFormat","PEM","refreshTokenPromises","Map","opts","clientId","_clientId","_clientSecret","eagerRefreshThresholdMillis","AuthClient","generateAuthUrl","code_challenge_method","code_challenge","Error","response_type","client_id","redirect_uri","scope","Array","join","GOOGLE_OAUTH2_AUTH_BASE_URL_","stringify","generateCodeVerifier","generateCodeVerifierAsync","crypto","randomString","codeVerifier","unencodedCodeChallenge","codeChallenge","createCrypto","randomBytesBase64","replace","sha256DigestBase64","split","getToken","codeOrOptions","callback","options","code","getTokenAsync","then","r","tokens","res","e","response","url","values","GOOGLE_OAUTH2_TOKEN_URL_","client_secret","grant_type","code_verifier","transporter","request","method","data","headers","expires_in","expiry_date","getTime","Date","emit","refreshToken","p","refreshTokenNoCache","has","get","delete","set","refresh_token","refreshAccessToken","warn","REFRESH_ACCESS_TOKEN_DEPRECATED","refreshAccessTokenAsync","credentials","getAccessToken","getAccessTokenAsync","token","shouldRefresh","access_token","isTokenExpiring","getRequestMetadata","OAUTH_GET_REQUEST_METADATA_DEPRECATED","getRequestMetadataAsync","getRequestHeaders","thisCreds","err","apiKey","token_type","Authorization","status","message","getRevokeTokenUrl","parameters","GOOGLE_OAUTH2_REVOKE_URL_","revokeToken","revokeCredentials","revokeCredentialsAsync","requestAsync","retry","r2","statusCode","mayRequireRefresh","isReadableStream","isAuthErr","config","Readable","verifyIdToken","verifyIdTokenAsync","login","idToken","getFederatedSignonCertsAsync","verifySignedJwtWithCertsAsync","certs","audience","ISSUERS_","maxExpiry","getTokenInfo","accessToken","info","GOOGLE_TOKEN_INFO_URL","params","assign","scopes","getFederatedSignonCerts","nowTime","format","cacheControl","cacheAge","pattern","regexResult","certificates","key","now","hasBrowserCrypto","JWK","GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_","GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_","undefined","exec","length","Number","keys","kid","verifySignedJwtWithCerts","jwt","requiredAudience","issuers","segments","signed","signature","envelope","payload","cert","verified","iat","exp","earliest","latest","aud","audVerified","MAX_TOKEN_LIFETIME_SECS_","JSON","parse","decodeBase64StringUtf8","hasOwnProperty","verify","isNaN","CLOCK_SKEW_SECS_","indexOf","iss","LoginTicket","expiryDate"]
}
