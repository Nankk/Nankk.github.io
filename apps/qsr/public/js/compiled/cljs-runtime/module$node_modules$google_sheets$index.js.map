{
"version":3,
"file":"module$node_modules$google_sheets$index.js",
"lineCount":28,
"mappings":"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",
"sources":["node_modules/google-sheets/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$google_sheets$index\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar sheets_v4;\n(function (sheets_v4) {\n    /**\n     * Google Sheets API\n     *\n     * Reads and writes Google Sheets.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const sheets = google.sheets('v4');\n     *\n     * @namespace sheets\n     * @type {Function}\n     * @version v4\n     * @variation v4\n     * @param {object=} options Options for Sheets\n     */\n    class Sheets {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.spreadsheets = new Resource$Spreadsheets(this.context);\n        }\n    }\n    sheets_v4.Sheets = Sheets;\n    class Resource$Spreadsheets {\n        constructor(context) {\n            this.context = context;\n            this.developerMetadata = new Resource$Spreadsheets$Developermetadata(this.context);\n            this.sheets = new Resource$Spreadsheets$Sheets(this.context);\n            this.values = new Resource$Spreadsheets$Values(this.context);\n        }\n        batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}:getByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sheets_v4.Resource$Spreadsheets = Resource$Spreadsheets;\n    class Resource$Spreadsheets$Developermetadata {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'metadataId'],\n                pathParams: ['metadataId', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/developerMetadata:search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sheets_v4.Resource$Spreadsheets$Developermetadata = Resource$Spreadsheets$Developermetadata;\n    class Resource$Spreadsheets$Sheets {\n        constructor(context) {\n            this.context = context;\n        }\n        copyTo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'sheetId'],\n                pathParams: ['sheetId', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sheets_v4.Resource$Spreadsheets$Sheets = Resource$Spreadsheets$Sheets;\n    class Resource$Spreadsheets$Values {\n        constructor(context) {\n            this.context = context;\n        }\n        append(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}:append').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'range'],\n                pathParams: ['range', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchClear(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchClear').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchClearByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchGet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchGet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchGetByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchUpdateByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        clear(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}:clear').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'range'],\n                pathParams: ['range', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'range'],\n                pathParams: ['range', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'range'],\n                pathParams: ['range', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sheets_v4.Resource$Spreadsheets$Values = Resource$Spreadsheets$Values;\n})(sheets_v4 = exports.sheets_v4 || (exports.sheets_v4 = {}));\n//# sourceMappingURL=v4.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","googleapis_common_1","sheets_v4","Sheets","constructor","options","google","context","_options","spreadsheets","Resource$Spreadsheets","developerMetadata","Resource$Spreadsheets$Developermetadata","sheets","Resource$Spreadsheets$Sheets","values","Resource$Spreadsheets$Values","batchUpdate","paramsOrCallback","optionsOrCallback","callback","params","parameters","assign","url","replace","rootUrl","method","requiredParams","pathParams","createAPIRequest","create","get","getByDataFilter","search","copyTo","append","batchClear","batchClearByDataFilter","batchGet","batchGetByDataFilter","batchUpdateByDataFilter","clear","update"]
}
