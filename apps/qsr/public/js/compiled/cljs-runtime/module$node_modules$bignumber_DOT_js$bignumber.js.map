{
"version":3,
"file":"module$node_modules$bignumber_DOT_js$bignumber.js",
"lineCount":48,
"mappings":"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",
"sources":["node_modules/bignumber_DOT_js/bignumber.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bignumber_DOT_js$bignumber\"] = function(global,require,module,exports) {\n;(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        decimalSeparator: '.',\r\n        groupSeparator: ',',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        fractionGroupSize: 0\r\n      },\r\n\r\n      // The alphabet used for base conversion.\r\n      // It must be at least 2 characters long, with no '.' or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = n + '';\r\n        } else {\r\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = n + '';\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, n + '', isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *      decimalSeparator       {string}\r\n     *      groupSeparator         {string}\r\n     *      groupSize              {number}\r\n     *      secondaryGroupSize     {number}\r\n     *      fractionGroupSeparator {string}\r\n     *      fractionGroupSize      {number}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character, or contains '.' or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\r\n              : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return \u00b10 if x is \u00b10 or y is \u00b1Infinity, or return \u00b1Infinity as y is \u00b10.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var m, n,\r\n        i = 0;\r\n\r\n      if (isArray(args[0])) args = args[0];\r\n      m = new BigNumber(args[0]);\r\n\r\n      for (; ++i < args.length;) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on \u00b1Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is \u00b1Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and \u00b1Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + n);\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, \u00b1Infinity, \u00b10 or \u00b11, or n is \u00b1Infinity, NaN or \u00b10.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to \u00b1Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to \u00b1Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to \u00b10: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = \u00b1Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return \u00b10, else return \u00b1Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        nIsOdd = n % 2;\r\n      }\r\n\r\n      if (nIsNeg) n.s = 1;\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (nIsBig) {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n          if (!n.c[0]) break;\r\n          nIsBig = n.e > 14;\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          n = mathfloor(n / 2);\r\n          if (!n) break;\r\n          nIsOdd = n % 2;\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, \u00b1Infinity or \u00b10?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return \u00b1Infinity if either is \u00b1Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return \u00b10 if either is \u00b10.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return \u00b1Infinity if either \u00b1Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is \u00b1Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+x);\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c  ).slice(0, s) === (n =\r\n             coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --\u003e 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the FORMAT object (see BigNumber.set).\r\n     *\r\n     * FORMAT = {\r\n     *      decimalSeparator : '.',\r\n     *      groupSeparator : ',',\r\n     *      groupSize : 3,\r\n     *      secondaryGroupSize : 0,\r\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n     *      fractionGroupSize : 0\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFormat = function (dp, rm) {\r\n      var str = this.toFixed(dp, rm);\r\n\r\n      if (this.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +FORMAT.groupSize,\r\n          g2 = +FORMAT.secondaryGroupSize,\r\n          groupSeparator = FORMAT.groupSeparator,\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = this.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n\r\n          for (; i < len; i += g1) {\r\n            intPart += groupSeparator + intDigits.substr(i, g1);\r\n          }\r\n\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + FORMAT.fractionGroupSeparator)\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string array representing the value of this BigNumber as a simple fraction with\r\n     * an integer numerator and an integer denominator. The denominator will be a positive\r\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n     * denominator is not specified, the denominator will be the lowest value necessary to\r\n     * represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\r\n        }\r\n      }\r\n\r\n      if (!xc) return x.toString();\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e *= 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n         div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n          ? [n1.toString(), d1.toString()]\r\n          : [n0.toString(), d0.toString()];\r\n\r\n      MAX_EXP = exp;\r\n      return arr;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +this;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        str = coeffToString(n.c);\r\n\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(str, e)\r\n           : toFixedPoint(str, e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      var str,\r\n        n = this,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + n);\r\n    }\r\n  }\r\n\r\n\r\n  function isArray(obj) {\r\n    return Object.prototype.toString.call(obj) == '[object Array]';\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","globalObject","clone","configObject","BigNumber","n","b","c","i","isNum","len","x","s","e","slice","str","isNumeric","test","parseNumeric","charCodeAt","indexOf","replace","search","substring","length","intCheck","ALPHABET","round","DECIMAL_PLACES","ROUNDING_MODE","DEBUG","Error","tooManyDigits","alphabet","charAt","caseChanged","toUpperCase","toLowerCase","convertBase","MAX_SAFE_INTEGER","mathfloor","MAX_EXP","MIN_EXP","LOG_BASE","push","format","rm","id","toString","c0","ne","coeffToString","TO_EXP_NEG","toExponential","toFixedPoint","maxOrMin","args","method","m","isArray","call","normalise","j","pop","sd","r","k","ni","xc","pows10","POWS_TEN","d","rd","mathceil","BASE","P","prototype","constructor","valueOf","ONE","TO_EXP_POS","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","BigNumber.set","obj","p","hasOwnProperty","v","MAX","bignumberError","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","BigNumber.isBigNumber","_isBigNumber","maximum","max","BigNumber.max","arguments","lt","minimum","min","BigNumber.min","gt","random","random53bitInt","pow2_53","Math","dp","a","rand","Uint32Array","copy","splice","toBaseOut","baseIn","baseOut","arr","arrL","reverse","sign","callerIsToString","y","pow","decimal","div","concat","multiply","base","carry","klo","SQRT_BASE","khi","xlo","xhi","temp","compare","aL","bL","cmp","subtract","remL","yc","NaN","q","qc","bitFloor","more","xL","yL","xi","rem","yz","yc0","rem0","prod","prodL","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","P.abs","comparedTo","P.comparedTo","decimalPlaces","P.dp","dividedBy","P.div","dividedToIntegerBy","idiv","P.idiv","exponentiatedBy","P.pow","isModExp","isInteger","nIsBig","isOdd","mod","nIsNeg","half","nIsOdd","times","integerValue","P.integerValue","isEqualTo","eq","P.eq","isFinite","P.isFinite","isGreaterThan","P.gt","isGreaterThanOrEqualTo","gte","P.gte","P.isInteger","isLessThan","P.lt","isLessThanOrEqualTo","lte","P.lte","P.isNaN","isNegative","P.isNegative","isPositive","P.isPositive","isZero","P.isZero","minus","P.minus","plus","xe","ye","xLTy","t","modulo","P.mod","multipliedBy","P.times","xcL","ycL","zc","ylo","yhi","negated","P.negated","P.plus","precision","P.sd","shiftedBy","P.shiftedBy","squareRoot","sqrt","P.sqrt","rep","P.toExponential","toFixed","P.toFixed","toFormat","P.toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","P.toFraction","md","d0","exp","n0","n1","d1","d2","toNumber","P.toNumber","toPrecision","P.toPrecision","P.toString","toJSON","P.toJSON","z","l","name","Object","zs","ceil","floor","define","amd","self","window"]
}
