{
"version":3,
"file":"module$node_modules$gaxios$build$src$gaxios.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/gaxios/build/src/gaxios.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$gaxios$build$src$gaxios\"] = function(global,require,module,exports) {\nvar process = require('process');\n\"use strict\";\n// Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst extend_1 = __importDefault(require(\"extend\"));\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst querystring_1 = __importDefault(require(\"querystring\"));\nconst stream_1 = __importDefault(require(\"stream\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst common_1 = require(\"./common\");\nconst isbrowser_1 = require(\"./isbrowser\");\nconst retry_1 = require(\"./retry\");\n// tslint:disable no-any\nconst URL = isbrowser_1.isBrowser() ? window.URL : url_1.default.URL;\nconst fetch = isbrowser_1.isBrowser() ? window.fetch : node_fetch_1.default;\n// tslint:disable-next-line variable-name\nlet HttpsProxyAgent;\n// Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\nfunction loadProxy() {\n    const proxy = process.env.HTTPS_PROXY ||\n        process.env.https_proxy ||\n        process.env.HTTP_PROXY ||\n        process.env.http_proxy;\n    if (proxy) {\n        HttpsProxyAgent = require('https-proxy-agent');\n    }\n    return proxy;\n}\nloadProxy();\nclass Gaxios {\n    /**\n     * The Gaxios class is responsible for making HTTP requests.\n     * @param defaults The default set of options to be used for this instance.\n     */\n    constructor(defaults) {\n        this.agentCache = new Map();\n        this.defaults = defaults || {};\n    }\n    /**\n     * Perform an HTTP request with the given options.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async request(opts = {}) {\n        opts = this.validateOpts(opts);\n        try {\n            let translatedResponse;\n            if (opts.adapter) {\n                translatedResponse = await opts.adapter(opts);\n            }\n            else {\n                const res = await fetch(opts.url, opts);\n                const data = await this.getResponseData(opts, res);\n                translatedResponse = this.translateResponse(opts, res, data);\n            }\n            if (!opts.validateStatus(translatedResponse.status)) {\n                throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n            }\n            return translatedResponse;\n        }\n        catch (e) {\n            const err = e;\n            err.config = opts;\n            const { shouldRetry, config } = await retry_1.getRetryConfig(e);\n            if (shouldRetry && config) {\n                err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n                return this.request(err.config);\n            }\n            throw err;\n        }\n    }\n    async getResponseData(opts, res) {\n        switch (opts.responseType) {\n            case 'stream':\n                return res.body;\n            case 'json':\n                let data = await res.text();\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (e) { }\n                return data;\n            case 'arraybuffer':\n                return res.arrayBuffer();\n            case 'blob':\n                return res.blob();\n            default:\n                return res.text();\n        }\n    }\n    /**\n     * Validates the options, and merges them with defaults.\n     * @param opts The original options passed from the client.\n     */\n    validateOpts(options) {\n        const opts = extend_1.default(true, {}, this.defaults, options);\n        if (!opts.url) {\n            throw new Error('URL is required.');\n        }\n        // baseUrl has been deprecated, remove in 2.0\n        const baseUrl = opts.baseUrl || opts.baseURL;\n        if (baseUrl) {\n            opts.url = baseUrl + opts.url;\n        }\n        const parsedUrl = new URL(opts.url);\n        opts.url = `${parsedUrl.origin}${parsedUrl.pathname}`;\n        opts.params = extend_1.default(querystring_1.default.parse(parsedUrl.search.substr(1)), // removes leading ?\n        opts.params);\n        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n        if (opts.params) {\n            parsedUrl.search = opts.paramsSerializer(opts.params);\n        }\n        opts.url = parsedUrl.href;\n        if (typeof options.maxContentLength === 'number') {\n            opts.size = options.maxContentLength;\n        }\n        if (typeof options.maxRedirects === 'number') {\n            opts.follow = options.maxRedirects;\n        }\n        opts.headers = opts.headers || {};\n        if (opts.data) {\n            if (this.isReadableStream(opts.data)) {\n                opts.body = opts.data;\n            }\n            else if (typeof opts.data === 'object') {\n                opts.body = JSON.stringify(opts.data);\n                opts.headers['Content-Type'] = 'application/json';\n            }\n            else {\n                opts.body = opts.data;\n            }\n        }\n        opts.validateStatus = opts.validateStatus || this.validateStatus;\n        opts.responseType = opts.responseType || 'json';\n        if (!opts.headers['Accept'] && opts.responseType === 'json') {\n            opts.headers['Accept'] = 'application/json';\n        }\n        opts.method = opts.method || 'GET';\n        const proxy = loadProxy();\n        if (proxy) {\n            if (this.agentCache.has(proxy)) {\n                opts.agent = this.agentCache.get(proxy);\n            }\n            else {\n                opts.agent = new HttpsProxyAgent(proxy);\n                this.agentCache.set(proxy, opts.agent);\n            }\n        }\n        return opts;\n    }\n    /**\n     * By default, throw for any non-2xx status code\n     * @param status status code from the HTTP response\n     */\n    validateStatus(status) {\n        return status >= 200 && status < 300;\n    }\n    /**\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n     * @param params key value pars to encode\n     */\n    paramsSerializer(params) {\n        return querystring_1.default.stringify(params);\n    }\n    isReadableStream(obj) {\n        return obj instanceof stream_1.default.Readable && typeof obj._read === 'function';\n    }\n    translateResponse(opts, res, data) {\n        // headers need to be converted from a map to an obj\n        const headers = {};\n        res.headers.forEach((value, key) => {\n            headers[key] = value;\n        });\n        return {\n            config: opts,\n            data: data,\n            headers,\n            status: res.status,\n            statusText: res.statusText,\n        };\n    }\n}\nexports.Gaxios = Gaxios;\n//# sourceMappingURL=gaxios.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","loadProxy","proxy","process","env","HTTPS_PROXY","https_proxy","HTTP_PROXY","http_proxy","HttpsProxyAgent","__importDefault","mod","__esModule","Object","defineProperty","value","extend_1","node_fetch_1","querystring_1","stream_1","url_1","common_1","isbrowser_1","retry_1","URL","isBrowser","window","default","fetch","Gaxios","constructor","defaults","agentCache","Map","request","opts","translatedResponse","res","data","e","err","shouldRetry","config","validateOpts","adapter","url","getResponseData","translateResponse","validateStatus","status","GaxiosError","getRetryConfig","retryConfig","currentRetryAttempt","responseType","body","arrayBuffer","blob","text","JSON","parse","options","Error","baseUrl","baseURL","parsedUrl","origin","pathname","params","search","substr","paramsSerializer","href","maxContentLength","size","maxRedirects","follow","headers","isReadableStream","stringify","method","has","agent","get","set","obj","Readable","_read","forEach","key","statusText"]
}
