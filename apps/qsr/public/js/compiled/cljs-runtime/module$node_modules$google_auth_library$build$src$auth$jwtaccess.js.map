{
"version":3,
"file":"module$node_modules$google_auth_library$build$src$auth$jwtaccess.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/google-auth-library/build/src/auth/jwtaccess.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$google_auth_library$build$src$auth$jwtaccess\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jws = require(\"jws\");\nconst LRU = require(\"lru-cache\");\nconst messages = require(\"../messages\");\nconst DEFAULT_HEADER = {\n    alg: 'RS256',\n    typ: 'JWT',\n};\nclass JWTAccess {\n    /**\n     * JWTAccess service account credentials.\n     *\n     * Create a new access token by using the credential to create a new JWT token\n     * that's recognized as the access token.\n     *\n     * @param email the service account email address.\n     * @param key the private key that will be used to sign the token.\n     * @param keyId the ID of the private key used to sign the token.\n     */\n    constructor(email, key, keyId) {\n        this.cache = new LRU({ max: 500, maxAge: 60 * 60 * 1000 });\n        this.email = email;\n        this.key = key;\n        this.keyId = keyId;\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createdScoped before use.\n     * @deprecated\n     * @return always false\n     */\n    createScopedRequired() {\n        // JWT Header authentication does not use scopes.\n        messages.warn(messages.JWT_ACCESS_CREATE_SCOPED_DEPRECATED);\n        return false;\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param authURI The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @deprecated Please use `getRequestHeaders` instead.\n     * @returns An object that includes the authorization header.\n     */\n    getRequestMetadata(url, additionalClaims) {\n        messages.warn(messages.JWT_ACCESS_GET_REQUEST_METADATA_DEPRECATED);\n        return { headers: this.getRequestHeaders(url, additionalClaims) };\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param url The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @returns An object that includes the authorization header.\n     */\n    getRequestHeaders(url, additionalClaims) {\n        const cachedToken = this.cache.get(url);\n        if (cachedToken) {\n            return cachedToken;\n        }\n        const iat = Math.floor(new Date().getTime() / 1000);\n        const exp = iat + 3600; // 3600 seconds = 1 hour\n        // The payload used for signed JWT headers has:\n        // iss == sub == <client email>\n        // aud == <the authorization uri>\n        const defaultClaims = {\n            iss: this.email,\n            sub: this.email,\n            aud: url,\n            exp,\n            iat,\n        };\n        // if additionalClaims are provided, ensure they do not collide with\n        // other required claims.\n        if (additionalClaims) {\n            for (const claim in defaultClaims) {\n                if (additionalClaims[claim]) {\n                    throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n                }\n            }\n        }\n        const header = this.keyId\n            ? Object.assign(Object.assign({}, DEFAULT_HEADER), { kid: this.keyId }) : DEFAULT_HEADER;\n        const payload = Object.assign(defaultClaims, additionalClaims);\n        // Sign the jwt and add it to the cache\n        const signedJWT = jws.sign({ header, payload, secret: this.key });\n        const headers = { Authorization: `Bearer ${signedJWT}` };\n        this.cache.set(url, headers);\n        return headers;\n    }\n    /**\n     * Create a JWTAccess credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(r => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                reject(new Error('Must pass in a stream containing the service account auth settings.'));\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('data', chunk => (s += chunk))\n                .on('error', reject)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (err) {\n                    reject(err);\n                }\n            });\n        });\n    }\n}\nexports.JWTAccess = JWTAccess;\n//# sourceMappingURL=jwtaccess.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","jws","LRU","messages","DEFAULT_HEADER","alg","typ","JWTAccess","constructor","email","key","keyId","cache","max","maxAge","createScopedRequired","warn","JWT_ACCESS_CREATE_SCOPED_DEPRECATED","getRequestMetadata","url","additionalClaims","JWT_ACCESS_GET_REQUEST_METADATA_DEPRECATED","headers","getRequestHeaders","cachedToken","get","iat","Math","floor","getTime","Date","defaultClaims","iss","sub","aud","exp","claim","Error","header","assign","kid","payload","Authorization","sign","signedJWT","secret","set","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","fromStream","inputStream","callback","fromStreamAsync","then","r","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","err"]
}
