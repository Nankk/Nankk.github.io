{
"version":3,
"file":"module$node_modules$node_forge$lib$pbkdf2.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/node-forge/lib/pbkdf2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$pbkdf2\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n/**\n * Password-Based Key-Derivation Function #2 implementation.\n *\n * See RFC 2898 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./hmac');\nrequire('./md');\nrequire('./util');\n\nvar pkcs5 = forge.pkcs5 = forge.pkcs5 || {};\n\nvar crypto;\nif(forge.util.isNodejs && !forge.options.usePureJavaScript) {\n  crypto = require('crypto');\n}\n\n/**\n * Derives a key from a password.\n *\n * @param p the password as a binary-encoded string of bytes.\n * @param s the salt as a binary-encoded string of bytes.\n * @param c the iteration count, a positive integer.\n * @param dkLen the intended length, in bytes, of the derived key,\n *          (max: 2^32 - 1) * hash length of the PRF.\n * @param [md] the message digest (or algorithm identifier as a string) to use\n *          in the PRF, defaults to SHA-1.\n * @param [callback(err, key)] presence triggers asynchronous version, called\n *          once the operation completes.\n *\n * @return the derived key, as a binary-encoded string of bytes, for the\n *           synchronous version (if no callback is specified).\n */\nmodule.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(\n  p, s, c, dkLen, md, callback) {\n  if(typeof md === 'function') {\n    callback = md;\n    md = null;\n  }\n\n  // use native implementation if possible and not disabled, note that\n  // some node versions only support SHA-1, others allow digest to be changed\n  if(forge.util.isNodejs && !forge.options.usePureJavaScript &&\n    crypto.pbkdf2 && (md === null || typeof md !== 'object') &&\n    (crypto.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {\n    if(typeof md !== 'string') {\n      // default prf to SHA-1\n      md = 'sha1';\n    }\n    p = Buffer.from(p, 'binary');\n    s = Buffer.from(s, 'binary');\n    if(!callback) {\n      if(crypto.pbkdf2Sync.length === 4) {\n        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');\n      }\n      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');\n    }\n    if(crypto.pbkdf2Sync.length === 4) {\n      return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {\n        if(err) {\n          return callback(err);\n        }\n        callback(null, key.toString('binary'));\n      });\n    }\n    return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {\n      if(err) {\n        return callback(err);\n      }\n      callback(null, key.toString('binary'));\n    });\n  }\n\n  if(typeof md === 'undefined' || md === null) {\n    // default prf to SHA-1\n    md = 'sha1';\n  }\n  if(typeof md === 'string') {\n    if(!(md in forge.md.algorithms)) {\n      throw new Error('Unknown hash algorithm: ' + md);\n    }\n    md = forge.md[md].create();\n  }\n\n  var hLen = md.digestLength;\n\n  /* 1. If dkLen > (2^32 - 1) * hLen, output \"derived key too long\" and\n    stop. */\n  if(dkLen > (0xFFFFFFFF * hLen)) {\n    var err = new Error('Derived key is too long.');\n    if(callback) {\n      return callback(err);\n    }\n    throw err;\n  }\n\n  /* 2. Let len be the number of hLen-octet blocks in the derived key,\n    rounding up, and let r be the number of octets in the last\n    block:\n\n    len = CEIL(dkLen / hLen),\n    r = dkLen - (len - 1) * hLen. */\n  var len = Math.ceil(dkLen / hLen);\n  var r = dkLen - (len - 1) * hLen;\n\n  /* 3. For each block of the derived key apply the function F defined\n    below to the password P, the salt S, the iteration count c, and\n    the block index to compute the block:\n\n    T_1 = F(P, S, c, 1),\n    T_2 = F(P, S, c, 2),\n    ...\n    T_len = F(P, S, c, len),\n\n    where the function F is defined as the exclusive-or sum of the\n    first c iterates of the underlying pseudorandom function PRF\n    applied to the password P and the concatenation of the salt S\n    and the block index i:\n\n    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c\n\n    where\n\n    u_1 = PRF(P, S || INT(i)),\n    u_2 = PRF(P, u_1),\n    ...\n    u_c = PRF(P, u_{c-1}).\n\n    Here, INT(i) is a four-octet encoding of the integer i, most\n    significant octet first. */\n  var prf = forge.hmac.create();\n  prf.start(md, p);\n  var dk = '';\n  var xor, u_c, u_c1;\n\n  // sync version\n  if(!callback) {\n    for(var i = 1; i <= len; ++i) {\n      // PRF(P, S || INT(i)) (first iteration)\n      prf.start(null, null);\n      prf.update(s);\n      prf.update(forge.util.int32ToBytes(i));\n      xor = u_c1 = prf.digest().getBytes();\n\n      // PRF(P, u_{c-1}) (other iterations)\n      for(var j = 2; j <= c; ++j) {\n        prf.start(null, null);\n        prf.update(u_c1);\n        u_c = prf.digest().getBytes();\n        // F(p, s, c, i)\n        xor = forge.util.xorBytes(xor, u_c, hLen);\n        u_c1 = u_c;\n      }\n\n      /* 4. Concatenate the blocks and extract the first dkLen octets to\n        produce a derived key DK:\n\n        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n      dk += (i < len) ? xor : xor.substr(0, r);\n    }\n    /* 5. Output the derived key DK. */\n    return dk;\n  }\n\n  // async version\n  var i = 1, j;\n  function outer() {\n    if(i > len) {\n      // done\n      return callback(null, dk);\n    }\n\n    // PRF(P, S || INT(i)) (first iteration)\n    prf.start(null, null);\n    prf.update(s);\n    prf.update(forge.util.int32ToBytes(i));\n    xor = u_c1 = prf.digest().getBytes();\n\n    // PRF(P, u_{c-1}) (other iterations)\n    j = 2;\n    inner();\n  }\n\n  function inner() {\n    if(j <= c) {\n      prf.start(null, null);\n      prf.update(u_c1);\n      u_c = prf.digest().getBytes();\n      // F(p, s, c, i)\n      xor = forge.util.xorBytes(xor, u_c, hLen);\n      u_c1 = u_c;\n      ++j;\n      return forge.util.setImmediate(inner);\n    }\n\n    /* 4. Concatenate the blocks and extract the first dkLen octets to\n      produce a derived key DK:\n\n      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n    dk += (i < len) ? xor : xor.substr(0, r);\n\n    ++i;\n    outer();\n  }\n\n  outer();\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","forge","pkcs5","crypto","util","isNodejs","options","usePureJavaScript","pbkdf2","pkcs5.pbkdf2","p","s","c","dkLen","md","callback","outer","i","len","dk","prf","start","update","int32ToBytes","xor","u_c1","digest","getBytes","j","inner","u_c","xorBytes","hLen","setImmediate","substr","r","pbkdf2Sync","length","from","err","key","toString","algorithms","Error","create","digestLength","Math","ceil","hmac"]
}
