{
"version":3,
"file":"module$node_modules$gcp_metadata$build$src$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/gcp-metadata/build/src/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$gcp_metadata$build$src$index\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require('json-bigint');\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.BASE_URL = exports.HOST_ADDRESS + exports.BASE_PATH;\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.SECONDARY_BASE_URL = exports.SECONDARY_HOST_ADDRESS + exports.BASE_PATH;\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({ [exports.HEADER_NAME]: exports.HEADER_VALUE });\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n    Object.keys(options).forEach(key => {\n        switch (key) {\n            case 'params':\n            case 'property':\n            case 'headers':\n                break;\n            case 'qs':\n                throw new Error(`'qs' is not a valid configuration option. Please use 'params' instead.`);\n            default:\n                throw new Error(`'${key}' is not a valid configuration option.`);\n        }\n    });\n}\nasync function metadataAccessor(type, options, noResponseRetries = 3, fastFail = false) {\n    options = options || {};\n    if (typeof options === 'string') {\n        options = { property: options };\n    }\n    let property = '';\n    if (typeof options === 'object' && options.property) {\n        property = '/' + options.property;\n    }\n    validate(options);\n    try {\n        const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n        const res = await requestMethod({\n            url: `${exports.BASE_URL}/${type}${property}`,\n            headers: Object.assign({}, exports.HEADERS, options.headers),\n            retryConfig: { noResponseRetries },\n            params: options.params,\n            responseType: 'text',\n            timeout: 3000,\n        });\n        // NOTE: node.js converts all incoming headers to lower case.\n        if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n            throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n        }\n        else if (!res.data) {\n            throw new Error('Invalid response from the metadata service');\n        }\n        if (typeof res.data === 'string') {\n            try {\n                return jsonBigint.parse(res.data);\n            }\n            catch (_a) {\n                /* ignore */\n            }\n        }\n        return res.data;\n    }\n    catch (e) {\n        if (e.response && e.response.status !== 200) {\n            e.message = `Unsuccessful response status code. ${e.message}`;\n        }\n        throw e;\n    }\n}\nasync function fastFailMetadataRequest(options) {\n    const secondaryOptions = Object.assign(Object.assign({}, options), { url: options.url.replace(exports.BASE_URL, exports.SECONDARY_BASE_URL) });\n    return Promise.race([gaxios_1.request(options), gaxios_1.request(secondaryOptions)]);\n}\n// tslint:disable-next-line no-any\nfunction instance(options) {\n    return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n// tslint:disable-next-line no-any\nfunction project(options) {\n    return metadataAccessor('project', options);\n}\nexports.project = project;\n/**\n * Determine if the metadata server is currently available.\n */\nasync function isAvailable() {\n    try {\n        // Attempt to read instance metadata. As configured, this will\n        // retry 3 times if there is a valid response, and fail fast\n        // if there is an ETIMEDOUT or ENOTFOUND error.\n        await metadataAccessor('instance', undefined, 0, true);\n        return true;\n    }\n    catch (err) {\n        if (err.type === 'request-timeout') {\n            // If running in a GCP environment, metadata endpoint should return\n            // within ms.\n            return false;\n        }\n        else if (err.code &&\n            (err.code === 'ENOTFOUND' || err.code === 'ENOENT')) {\n            // Failure to resolve the metadata service means that it is not available.\n            return false;\n        }\n        // Throw unexpected errors.\n        throw err;\n    }\n}\nexports.isAvailable = isAvailable;\n//# sourceMappingURL=index.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","validate","options","Object","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","fastFail","property","requestMethod","res","e","fastFailMetadataRequest","gaxios_1","request","url","BASE_URL","headers","assign","HEADERS","retryConfig","params","responseType","timeout","HEADER_NAME","toLowerCase","HEADER_VALUE","data","jsonBigint","parse","_a","response","status","message","secondaryOptions","replace","SECONDARY_BASE_URL","Promise","race","defineProperty","value","HOST_ADDRESS","BASE_PATH","SECONDARY_HOST_ADDRESS","freeze","instance","project","isAvailable","err","undefined","code"]
}
