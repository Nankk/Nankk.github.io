shadow$provide.module$node_modules$google_auth_library$build$src$auth$oauth2client=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var querystring=require("module$node_modules$querystring_es3$index"),stream=require("module$node_modules$stream_browserify$index"),crypto_1=require("module$node_modules$google_auth_library$build$src$crypto$crypto"),messages=require("module$node_modules$google_auth_library$build$src$messages"),authclient_1=require("module$node_modules$google_auth_library$build$src$auth$authclient"),
loginticket_1=require("module$node_modules$google_auth_library$build$src$auth$loginticket");(function(CodeChallengeMethod){CodeChallengeMethod.Plain="plain";CodeChallengeMethod.S256="S256"})(exports.CodeChallengeMethod||(exports.CodeChallengeMethod={}));var CertificateFormat;(function(CertificateFormat){CertificateFormat.PEM="PEM";CertificateFormat.JWK="JWK"})(CertificateFormat=exports.CertificateFormat||(exports.CertificateFormat={}));var OAuth2Client=function(optionsOrClientId,clientSecret,redirectUri){var $jscomp$super$this=
authclient_1.AuthClient.call(this)||this;$jscomp$super$this.certificateCache={};$jscomp$super$this.certificateExpiry=null;$jscomp$super$this.certificateCacheFormat=CertificateFormat.PEM;$jscomp$super$this.refreshTokenPromises=new Map;optionsOrClientId=optionsOrClientId&&"object"===typeof optionsOrClientId?optionsOrClientId:{clientId:optionsOrClientId,clientSecret:clientSecret,redirectUri:redirectUri};$jscomp$super$this._clientId=optionsOrClientId.clientId;$jscomp$super$this._clientSecret=optionsOrClientId.clientSecret;
$jscomp$super$this.redirectUri=optionsOrClientId.redirectUri;$jscomp$super$this.eagerRefreshThresholdMillis=optionsOrClientId.eagerRefreshThresholdMillis||3E5;return $jscomp$super$this};$jscomp.inherits(OAuth2Client,authclient_1.AuthClient);OAuth2Client.prototype.generateAuthUrl=function(opts){opts=void 0===opts?{}:opts;if(opts.code_challenge_method&&!opts.code_challenge)throw Error("If a code_challenge_method is provided, code_challenge must be included.");opts.response_type=opts.response_type||
"code";opts.client_id=opts.client_id||this._clientId;opts.redirect_uri=opts.redirect_uri||this.redirectUri;opts.scope instanceof Array&&(opts.scope=opts.scope.join(" "));return OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_+"?"+querystring.stringify(opts)};OAuth2Client.prototype.generateCodeVerifier=function(){throw Error("generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.");};OAuth2Client.prototype.generateCodeVerifierAsync=function(){var crypto,randomString,codeVerifier,unencodedCodeChallenge,
codeChallenge;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress)return crypto=crypto_1.createCrypto(),randomString=crypto.randomBytesBase64(96),codeVerifier=randomString.replace(/\+/g,"~").replace(/=/g,"_").replace(/\//g,"-"),$jscomp$generator$context.yield(crypto.sha256DigestBase64(codeVerifier),2);unencodedCodeChallenge=$jscomp$generator$context.yieldResult;codeChallenge=unencodedCodeChallenge.split("\x3d")[0].replace(/\+/g,
"-").replace(/\//g,"_");return $jscomp$generator$context.return({codeVerifier:codeVerifier,codeChallenge:codeChallenge})})};OAuth2Client.prototype.getToken=function(codeOrOptions,callback){codeOrOptions="string"===typeof codeOrOptions?{code:codeOrOptions}:codeOrOptions;if(callback)this.getTokenAsync(codeOrOptions).then(function(r){return callback(null,r.tokens,r.res)},function(e){return callback(e,null,e.response)});else return this.getTokenAsync(codeOrOptions)};OAuth2Client.prototype.getTokenAsync=
function(options){var $jscomp$async$this=this,url,values,res,tokens;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress)return url=OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_,values={code:options.code,client_id:options.client_id||$jscomp$async$this._clientId,client_secret:$jscomp$async$this._clientSecret,redirect_uri:options.redirect_uri||$jscomp$async$this.redirectUri,grant_type:"authorization_code",code_verifier:options.codeVerifier},
$jscomp$generator$context.yield($jscomp$async$this.transporter.request({method:"POST",url:url,data:querystring.stringify(values),headers:{"Content-Type":"application/x-www-form-urlencoded"}}),2);res=$jscomp$generator$context.yieldResult;(tokens=res.data)&&res.data.expires_in&&(tokens.expiry_date=(new Date).getTime()+1E3*res.data.expires_in,delete tokens.expires_in);$jscomp$async$this.emit("tokens",tokens);return $jscomp$generator$context.return({tokens:tokens,res:res})})};OAuth2Client.prototype.refreshToken=
function(refreshToken){var $jscomp$async$this=this,p;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(!refreshToken)return $jscomp$generator$context.return($jscomp$async$this.refreshTokenNoCache(refreshToken));if($jscomp$async$this.refreshTokenPromises.has(refreshToken))return $jscomp$generator$context.return($jscomp$async$this.refreshTokenPromises.get(refreshToken));p=$jscomp$async$this.refreshTokenNoCache(refreshToken).then(function(r){$jscomp$async$this.refreshTokenPromises.delete(refreshToken);
return r},function(e){$jscomp$async$this.refreshTokenPromises.delete(refreshToken);throw e;});$jscomp$async$this.refreshTokenPromises.set(refreshToken,p);return $jscomp$generator$context.return(p)})};OAuth2Client.prototype.refreshTokenNoCache=function(refreshToken){var $jscomp$async$this=this,url,data,res,tokens;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress){if(!refreshToken)throw Error("No refresh token is set.");
url=OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;data={refresh_token:refreshToken,client_id:$jscomp$async$this._clientId,client_secret:$jscomp$async$this._clientSecret,grant_type:"refresh_token"};return $jscomp$generator$context.yield($jscomp$async$this.transporter.request({method:"POST",url:url,data:querystring.stringify(data),headers:{"Content-Type":"application/x-www-form-urlencoded"}}),2)}res=$jscomp$generator$context.yieldResult;(tokens=res.data)&&res.data.expires_in&&(tokens.expiry_date=(new Date).getTime()+
1E3*res.data.expires_in,delete tokens.expires_in);$jscomp$async$this.emit("tokens",tokens);return $jscomp$generator$context.return({tokens:tokens,res:res})})};OAuth2Client.prototype.refreshAccessToken=function(callback){messages.warn(messages.REFRESH_ACCESS_TOKEN_DEPRECATED);if(callback)this.refreshAccessTokenAsync().then(function(r){return callback(null,r.credentials,r.res)},callback);else return this.refreshAccessTokenAsync()};OAuth2Client.prototype.refreshAccessTokenAsync=function(){var $jscomp$async$this=
this,r,tokens;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress)return $jscomp$generator$context.yield($jscomp$async$this.refreshToken($jscomp$async$this.credentials.refresh_token),2);r=$jscomp$generator$context.yieldResult;tokens=r.tokens;tokens.refresh_token=$jscomp$async$this.credentials.refresh_token;$jscomp$async$this.credentials=tokens;return $jscomp$generator$context.return({credentials:$jscomp$async$this.credentials,
res:r.res})})};OAuth2Client.prototype.getAccessToken=function(callback){if(callback)this.getAccessTokenAsync().then(function(r){return callback(null,r.token,r.res)},callback);else return this.getAccessTokenAsync()};OAuth2Client.prototype.getAccessTokenAsync=function(){var $jscomp$async$this=this,shouldRefresh,r;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress){shouldRefresh=!$jscomp$async$this.credentials.access_token||
$jscomp$async$this.isTokenExpiring();if(!shouldRefresh)return $jscomp$generator$context.return({token:$jscomp$async$this.credentials.access_token});if(!$jscomp$async$this.credentials.refresh_token)throw Error("No refresh token is set.");return $jscomp$generator$context.yield($jscomp$async$this.refreshAccessTokenAsync(),3)}r=$jscomp$generator$context.yieldResult;if(!r.credentials||r.credentials&&!r.credentials.access_token)throw Error("Could not refresh access token.");return $jscomp$generator$context.return({token:r.credentials.access_token,
res:r.res})})};OAuth2Client.prototype.getRequestMetadata=function(url,callback){messages.warn(messages.OAUTH_GET_REQUEST_METADATA_DEPRECATED);if(callback)this.getRequestMetadataAsync(url).then(function(r){return callback(null,r.headers,r.res)},callback);else return this.getRequestMetadataAsync()};OAuth2Client.prototype.getRequestHeaders=function(url){var $jscomp$async$this=this,res;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress)return $jscomp$generator$context.yield($jscomp$async$this.getRequestMetadataAsync(url),
2);res=$jscomp$generator$context.yieldResult;return $jscomp$generator$context.return(res.headers)})};OAuth2Client.prototype.getRequestMetadataAsync=function(url){var $jscomp$async$this=this,thisCreds,headers$23,r,tokens,err,e,credentials,headers;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){switch($jscomp$generator$context.nextAddress){case 1:thisCreds=$jscomp$async$this.credentials;if(!thisCreds.access_token&&!thisCreds.refresh_token&&!$jscomp$async$this.apiKey)throw Error("No access, refresh token or API key is set.");
if(thisCreds.access_token&&!$jscomp$async$this.isTokenExpiring())return thisCreds.token_type=thisCreds.token_type||"Bearer",headers$23={Authorization:thisCreds.token_type+" "+thisCreds.access_token},$jscomp$generator$context.return({headers:headers$23});if($jscomp$async$this.apiKey)return $jscomp$generator$context.return({headers:{"X-Goog-Api-Key":$jscomp$async$this.apiKey}});tokens=r=null;$jscomp$generator$context.setCatchFinallyBlocks(2);return $jscomp$generator$context.yield($jscomp$async$this.refreshToken(thisCreds.refresh_token),
4);case 4:r=$jscomp$generator$context.yieldResult;tokens=r.tokens;$jscomp$generator$context.leaveTryBlock(3);break;case 2:throw e=err=$jscomp$generator$context.enterCatchBlock(),!e.response||403!==e.response.status&&404!==e.response.status||(e.message="Could not refresh access token: "+e.message),e;case 3:return credentials=$jscomp$async$this.credentials,credentials.token_type=credentials.token_type||"Bearer",tokens.refresh_token=credentials.refresh_token,$jscomp$async$this.credentials=tokens,headers=
{Authorization:credentials.token_type+" "+tokens.access_token},$jscomp$generator$context.return({headers:headers,res:r.res})}})};OAuth2Client.getRevokeTokenUrl=function(token){token=querystring.stringify({token:token});return OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_+"?"+token};OAuth2Client.prototype.revokeToken=function(token,callback){token={url:OAuth2Client.getRevokeTokenUrl(token),method:"POST"};if(callback)this.transporter.request(token).then(function(r){return callback(null,r)},callback);else return this.transporter.request(token)};
OAuth2Client.prototype.revokeCredentials=function(callback){if(callback)this.revokeCredentialsAsync().then(function(res){return callback(null,res)},callback);else return this.revokeCredentialsAsync()};OAuth2Client.prototype.revokeCredentialsAsync=function(){var $jscomp$async$this=this,token;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){token=$jscomp$async$this.credentials.access_token;$jscomp$async$this.credentials={};if(token)return $jscomp$generator$context.return($jscomp$async$this.revokeToken(token));
throw Error("No access token to revoke.");})};OAuth2Client.prototype.request=function(opts,callback){if(callback)this.requestAsync(opts).then(function(r){return callback(null,r)},function(e){return callback(e,e.response)});else return this.requestAsync(opts)};OAuth2Client.prototype.requestAsync=function(opts,retry){retry=void 0===retry?!1:retry;var $jscomp$async$this=this,r2,r,e,res,statusCode,mayRequireRefresh,isReadableStream,isAuthErr;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){switch($jscomp$generator$context.nextAddress){case 1:return $jscomp$generator$context.setCatchFinallyBlocks(2),
$jscomp$generator$context.yield($jscomp$async$this.getRequestMetadataAsync(opts.url),4);case 4:return r=$jscomp$generator$context.yieldResult,r.headers&&r.headers.Authorization&&(opts.headers=opts.headers||{},opts.headers.Authorization=r.headers.Authorization),$jscomp$async$this.apiKey&&(opts.headers=opts.headers||{},opts.headers["X-Goog-Api-Key"]=$jscomp$async$this.apiKey),$jscomp$generator$context.yield($jscomp$async$this.transporter.request(opts),5);case 5:r2=$jscomp$generator$context.yieldResult;
$jscomp$generator$context.leaveTryBlock(3);break;case 2:e=$jscomp$generator$context.enterCatchBlock();res=e.response;if(!res){$jscomp$generator$context.jumpTo(6);break}statusCode=res.status;mayRequireRefresh=$jscomp$async$this.credentials&&$jscomp$async$this.credentials.access_token&&$jscomp$async$this.credentials.refresh_token&&!$jscomp$async$this.credentials.expiry_date;isReadableStream=res.config.data instanceof stream.Readable;isAuthErr=401===statusCode||403===statusCode;if(retry||!isAuthErr||
isReadableStream||!mayRequireRefresh){$jscomp$generator$context.jumpTo(6);break}return $jscomp$generator$context.yield($jscomp$async$this.refreshAccessTokenAsync(),8);case 8:return $jscomp$generator$context.return($jscomp$async$this.requestAsync(opts,!0));case 6:throw e;case 3:return $jscomp$generator$context.return(r2)}})};OAuth2Client.prototype.verifyIdToken=function(options,callback){if(callback&&"function"!==typeof callback)throw Error("This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.");
if(callback)this.verifyIdTokenAsync(options).then(function(r){return callback(null,r)},callback);else return this.verifyIdTokenAsync(options)};OAuth2Client.prototype.verifyIdTokenAsync=function(options){var $jscomp$async$this=this,response,login;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress){if(!options.idToken)throw Error("The verifyIdToken method requires an ID Token");return $jscomp$generator$context.yield($jscomp$async$this.getFederatedSignonCertsAsync(),
2)}if(3!=$jscomp$generator$context.nextAddress)return response=$jscomp$generator$context.yieldResult,$jscomp$generator$context.yield($jscomp$async$this.verifySignedJwtWithCertsAsync(options.idToken,response.certs,options.audience,OAuth2Client.ISSUERS_,options.maxExpiry),3);login=$jscomp$generator$context.yieldResult;return $jscomp$generator$context.return(login)})};OAuth2Client.prototype.getTokenInfo=function(accessToken){var $jscomp$async$this=this,$jscomp$destructuring$var3,data,info;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==
$jscomp$generator$context.nextAddress)return $jscomp$generator$context.yield($jscomp$async$this.transporter.request({method:"GET",url:OAuth2Client.GOOGLE_TOKEN_INFO_URL,params:{access_token:accessToken}}),2);$jscomp$destructuring$var3=$jscomp$generator$context.yieldResult;data=$jscomp$destructuring$var3.data;info=Object.assign({expiry_date:(new Date).getTime()+1E3*data.expires_in,scopes:data.scope.split(" ")},data);delete info.expires_in;delete info.scope;return $jscomp$generator$context.return(info)})};
OAuth2Client.prototype.getFederatedSignonCerts=function(callback){if(callback)this.getFederatedSignonCertsAsync().then(function(r){return callback(null,r.certs,r.res)},callback);else return this.getFederatedSignonCertsAsync()};OAuth2Client.prototype.getFederatedSignonCertsAsync=function(){var $jscomp$async$this=this,nowTime,format,res,url,e,cacheControl,cacheAge,pattern,regexResult,certificates,$jscomp$iter$3,$jscomp$key$key,key,now;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){switch($jscomp$generator$context.nextAddress){case 1:nowTime=
(new Date).getTime();format=crypto_1.hasBrowserCrypto()?CertificateFormat.JWK:CertificateFormat.PEM;if($jscomp$async$this.certificateExpiry&&nowTime<$jscomp$async$this.certificateExpiry.getTime()&&$jscomp$async$this.certificateCacheFormat===format)return $jscomp$generator$context.return({certs:$jscomp$async$this.certificateCache,format:format});switch(format){case CertificateFormat.PEM:url=OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;break;case CertificateFormat.JWK:url=OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;
break;default:throw Error("Unsupported certificate format "+format);}$jscomp$generator$context.setCatchFinallyBlocks(2);return $jscomp$generator$context.yield($jscomp$async$this.transporter.request({url:url}),4);case 4:res=$jscomp$generator$context.yieldResult;$jscomp$generator$context.leaveTryBlock(3);break;case 2:throw e=$jscomp$generator$context.enterCatchBlock(),e.message="Failed to retrieve verification certificates: "+e.message,e;case 3:cacheControl=res?res.headers["cache-control"]:void 0;cacheAge=
-1;cacheControl&&(pattern=/max-age=([0-9]*)/,(regexResult=pattern.exec(cacheControl))&&2===regexResult.length&&(cacheAge=1E3*Number(regexResult[1])));certificates={};switch(format){case CertificateFormat.PEM:certificates=res.data;break;case CertificateFormat.JWK:$jscomp$iter$3=$jscomp.makeIterator(res.data.keys);for($jscomp$key$key=$jscomp$iter$3.next();!$jscomp$key$key.done;$jscomp$key$key=$jscomp$iter$3.next())key=$jscomp$key$key.value,certificates[key.kid]=key;break;default:throw Error("Unsupported certificate format "+
format);}now=new Date;$jscomp$async$this.certificateExpiry=-1===cacheAge?null:new Date(now.getTime()+cacheAge);$jscomp$async$this.certificateCache=certificates;$jscomp$async$this.certificateCacheFormat=format;return $jscomp$generator$context.return({certs:certificates,format:format,res:res})}})};OAuth2Client.prototype.verifySignedJwtWithCerts=function(){throw Error("verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.");};OAuth2Client.prototype.verifySignedJwtWithCertsAsync=
function(jwt,certs,requiredAudience,issuers,maxExpiry){var crypto,segments,signed,signature,envelope,payload,cert,verified,iat,exp,now,earliest,latest,aud,audVerified;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress){crypto=crypto_1.createCrypto();maxExpiry||(maxExpiry=OAuth2Client.MAX_TOKEN_LIFETIME_SECS_);segments=jwt.split(".");if(3!==segments.length)throw Error("Wrong number of segments in token: "+jwt);signed=segments[0]+
"."+segments[1];signature=segments[2];try{envelope=JSON.parse(crypto.decodeBase64StringUtf8(segments[0]))}catch(err){throw err.message="Can't parse token envelope: "+segments[0]+"': "+err.message,err;}if(!envelope)throw Error("Can't parse token envelope: "+segments[0]);try{payload=JSON.parse(crypto.decodeBase64StringUtf8(segments[1]))}catch(err$24){throw err$24.message="Can't parse token payload '"+segments[0],err$24;}if(!payload)throw Error("Can't parse token payload: "+segments[1]);if(!certs.hasOwnProperty(envelope.kid))throw Error("No pem found for envelope: "+
JSON.stringify(envelope));cert=certs[envelope.kid];return $jscomp$generator$context.yield(crypto.verify(cert,signed,signature),2)}verified=$jscomp$generator$context.yieldResult;if(!verified)throw Error("Invalid token signature: "+jwt);if(!payload.iat)throw Error("No issue time in token: "+JSON.stringify(payload));if(!payload.exp)throw Error("No expiration time in token: "+JSON.stringify(payload));iat=Number(payload.iat);if(isNaN(iat))throw Error("iat field using invalid format");exp=Number(payload.exp);
if(isNaN(exp))throw Error("exp field using invalid format");now=(new Date).getTime()/1E3;if(exp>=now+maxExpiry)throw Error("Expiration time too far in future: "+JSON.stringify(payload));earliest=iat-OAuth2Client.CLOCK_SKEW_SECS_;latest=exp+OAuth2Client.CLOCK_SKEW_SECS_;if(now<earliest)throw Error("Token used too early, "+now+" \x3c "+earliest+": "+JSON.stringify(payload));if(now>latest)throw Error("Token used too late, "+now+" \x3e "+latest+": "+JSON.stringify(payload));if(issuers&&0>issuers.indexOf(payload.iss))throw Error("Invalid issuer, expected one of ["+
issuers+"], but got "+payload.iss);if("undefined"!==typeof requiredAudience&&null!==requiredAudience&&(aud=payload.aud,audVerified=!1,audVerified=requiredAudience.constructor===Array?-1<requiredAudience.indexOf(aud):aud===requiredAudience,!audVerified))throw Error("Wrong recipient, payload audience !\x3d requiredAudience");return $jscomp$generator$context.return(new loginticket_1.LoginTicket(envelope,payload))})};OAuth2Client.prototype.isTokenExpiring=function(){var expiryDate=this.credentials.expiry_date;
return expiryDate?expiryDate<=(new Date).getTime()+this.eagerRefreshThresholdMillis:!1};exports.OAuth2Client=OAuth2Client;OAuth2Client.GOOGLE_TOKEN_INFO_URL="https://oauth2.googleapis.com/tokeninfo";OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_="https://accounts.google.com/o/oauth2/v2/auth";OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_="https://oauth2.googleapis.com/token";OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_="https://oauth2.googleapis.com/revoke";OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_=
"https://www.googleapis.com/oauth2/v1/certs";OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_="https://www.googleapis.com/oauth2/v3/certs";OAuth2Client.CLOCK_SKEW_SECS_=300;OAuth2Client.MAX_TOKEN_LIFETIME_SECS_=86400;OAuth2Client.ISSUERS_=["accounts.google.com","https://accounts.google.com"]}
//# sourceMappingURL=module$node_modules$google_auth_library$build$src$auth$oauth2client.js.map
