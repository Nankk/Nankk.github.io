shadow$provide.module$node_modules$node_forge$lib$x509=function(global,require,module,exports){function _getAttribute(obj,options){"string"===typeof options&&(options={shortName:options});for(var rval=null,attr,i=0;null===rval&&i<obj.attributes.length;++i)attr=obj.attributes[i],options.type&&options.type===attr.type?rval=attr:options.name&&options.name===attr.name?rval=attr:options.shortName&&options.shortName===attr.shortName&&(rval=attr);return rval}function _dnToAsn1(obj){var rval=asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.SEQUENCE,!0,[]);obj=obj.attributes;for(var i=0;i<obj.length;++i){var attr=obj[i];var value=attr.value,valueTagClass=asn1.Type.PRINTABLESTRING;"valueTagClass"in attr&&(valueTagClass=attr.valueTagClass,valueTagClass===asn1.Type.UTF8&&(value=forge.util.encodeUtf8(value)));attr=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SET,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(attr.type).getBytes()),asn1.create(asn1.Class.UNIVERSAL,
valueTagClass,!1,value)])]);rval.value.push(attr)}return rval}function _fillMissingFields(attrs){for(var attr,i=0;i<attrs.length;++i){attr=attrs[i];"undefined"===typeof attr.name&&(attr.type&&attr.type in pki.oids?attr.name=pki.oids[attr.type]:attr.shortName&&attr.shortName in _shortNames&&(attr.name=pki.oids[_shortNames[attr.shortName]]));if("undefined"===typeof attr.type)if(attr.name&&attr.name in pki.oids)attr.type=pki.oids[attr.name];else throw attrs=Error("Attribute type not specified."),attrs.attribute=
attr,attrs;"undefined"===typeof attr.shortName&&attr.name&&attr.name in _shortNames&&(attr.shortName=_shortNames[attr.name]);if(attr.type===oids.extensionRequest&&(attr.valueConstructed=!0,attr.valueTagClass=asn1.Type.SEQUENCE,!attr.value&&attr.extensions)){attr.value=[];for(var ei=0;ei<attr.extensions.length;++ei)attr.value.push(pki.certificateExtensionToAsn1(_fillMissingExtensionFields(attr.extensions[ei])))}if("undefined"===typeof attr.value)throw attrs=Error("Attribute value not specified."),
attrs.attribute=attr,attrs;}}function _fillMissingExtensionFields(e,options){options=options||{};"undefined"===typeof e.name&&e.id&&e.id in pki.oids&&(e.name=pki.oids[e.id]);if("undefined"===typeof e.id)if(e.name&&e.name in pki.oids)e.id=pki.oids[e.name];else{var error=Error("Extension ID not specified.");error.extension=e;throw error;}if("undefined"!==typeof e.value)return e;if("keyUsage"===e.name){var b3=error=options=0;e.digitalSignature&&(error|=128,options=7);e.nonRepudiation&&(error|=64,options=
6);e.keyEncipherment&&(error|=32,options=5);e.dataEncipherment&&(error|=16,options=4);e.keyAgreement&&(error|=8,options=3);e.keyCertSign&&(error|=4,options=2);e.cRLSign&&(error|=2,options=1);e.encipherOnly&&(error|=1,options=0);e.decipherOnly&&(b3|=128,options=7);options=String.fromCharCode(options);0!==b3?options+=String.fromCharCode(error)+String.fromCharCode(b3):0!==error&&(options+=String.fromCharCode(error));e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.BITSTRING,!1,options)}else if("basicConstraints"===
e.name)e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[]),e.cA&&e.value.value.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.BOOLEAN,!1,String.fromCharCode(255))),"pathLenConstraint"in e&&e.value.value.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,asn1.integerToDer(e.pathLenConstraint).getBytes()));else if("extKeyUsage"===e.name)for(b3 in e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[]),error=e.value.value,e)!0===e[b3]&&(b3 in oids?error.push(asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.OID,!1,asn1.oidToDer(oids[b3]).getBytes())):-1!==b3.indexOf(".")&&error.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(b3).getBytes())));else if("nsCertType"===e.name)error=options=0,e.client&&(error|=128,options=7),e.server&&(error|=64,options=6),e.email&&(error|=32,options=5),e.objsign&&(error|=16,options=4),e.reserved&&(error|=8,options=3),e.sslCA&&(error|=4,options=2),e.emailCA&&(error|=2,options=1),e.objCA&&(error|=1,options=0),options=String.fromCharCode(options),
0!==error&&(options+=String.fromCharCode(error)),e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.BITSTRING,!1,options);else if("subjectAltName"===e.name||"issuerAltName"===e.name){e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[]);for(var n=0;n<e.altNames.length;++n){b3=e.altNames[n];options=b3.value;if(7===b3.type&&b3.ip){if(options=forge.util.bytesFromIP(b3.ip),null===options)throw error=Error('Extension "ip" value is not a valid IPv4 or IPv6 address.'),error.extension=e,error;
}else 8===b3.type&&(options=b3.oid?asn1.oidToDer(asn1.oidToDer(b3.oid)):asn1.oidToDer(options));e.value.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,b3.type,!1,options))}}else if("nsComment"===e.name&&options.cert){if(!/^[\x00-\x7F]*$/.test(e.comment)||1>e.comment.length||128<e.comment.length)throw Error('Invalid "nsComment" content.');e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.IA5STRING,!1,e.comment)}else if("subjectKeyIdentifier"===e.name&&options.cert)error=options.cert.generateSubjectKeyIdentifier(),
e.subjectKeyIdentifier=error.toHex(),e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,!1,error.getBytes());else if("authorityKeyIdentifier"===e.name&&options.cert)e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[]),error=e.value.value,e.keyIdentifier&&(b3=!0===e.keyIdentifier?options.cert.generateSubjectKeyIdentifier().getBytes():e.keyIdentifier,error.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!1,b3))),e.authorityCertIssuer&&(b3=[asn1.create(asn1.Class.CONTEXT_SPECIFIC,
4,!0,[_dnToAsn1(!0===e.authorityCertIssuer?options.cert.issuer:e.authorityCertIssuer)])],error.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,1,!0,b3))),e.serialNumber&&(options=forge.util.hexToBytes(!0===e.serialNumber?options.cert.serialNumber:e.serialNumber),error.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,2,!1,options)));else if("cRLDistributionPoints"===e.name){e.value=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[]);error=e.value.value;var subSeq=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,
!0,[]),fullNameGeneralNames=asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[]);for(n=0;n<e.altNames.length;++n){b3=e.altNames[n];options=b3.value;if(7===b3.type&&b3.ip){if(options=forge.util.bytesFromIP(b3.ip),null===options)throw error=Error('Extension "ip" value is not a valid IPv4 or IPv6 address.'),error.extension=e,error;}else 8===b3.type&&(options=b3.oid?asn1.oidToDer(asn1.oidToDer(b3.oid)):asn1.oidToDer(options));fullNameGeneralNames.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,b3.type,
!1,options))}subSeq.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[fullNameGeneralNames]));error.push(subSeq)}if("undefined"===typeof e.value)throw error=Error("Extension value not specified."),error.extension=e,error;return e}function _signatureParametersToAsn1(oid,params){switch(oid){case oids["RSASSA-PSS"]:return oid=[],void 0!==params.hash.algorithmOid&&oid.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.OID,!1,asn1.oidToDer(params.hash.algorithmOid).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.NULL,!1,"")])])),void 0!==params.mgf.algorithmOid&&oid.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,1,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(params.mgf.algorithmOid).getBytes()),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()),
asn1.create(asn1.Class.UNIVERSAL,asn1.Type.NULL,!1,"")])])])),void 0!==params.saltLength&&oid.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,2,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,asn1.integerToDer(params.saltLength).getBytes())])),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,oid);default:return asn1.create(asn1.Class.UNIVERSAL,asn1.Type.NULL,!1,"")}}function _CRIAttributesToAsn1(csr){var rval=asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[]);if(0===csr.attributes.length)return rval;
csr=csr.attributes;for(var i=0;i<csr.length;++i){var attr=csr[i],value=attr.value,valueTagClass=asn1.Type.UTF8;"valueTagClass"in attr&&(valueTagClass=attr.valueTagClass);valueTagClass===asn1.Type.UTF8&&(value=forge.util.encodeUtf8(value));var valueConstructed=!1;"valueConstructed"in attr&&(valueConstructed=attr.valueConstructed);attr=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(attr.type).getBytes()),asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.SET,!0,[asn1.create(asn1.Class.UNIVERSAL,valueTagClass,valueConstructed,value)])]);rval.value.push(attr)}return rval}function _dateToAsn1(date){return date>=jan_1_1950&&date<jan_1_2050?asn1.create(asn1.Class.UNIVERSAL,asn1.Type.UTCTIME,!1,asn1.dateToUtcTime(date)):asn1.create(asn1.Class.UNIVERSAL,asn1.Type.GENERALIZEDTIME,!1,asn1.dateToGeneralizedTime(date))}var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$aes");require("module$node_modules$node_forge$lib$asn1");
require("module$node_modules$node_forge$lib$des");require("module$node_modules$node_forge$lib$md");require("module$node_modules$node_forge$lib$mgf");require("module$node_modules$node_forge$lib$oids");require("module$node_modules$node_forge$lib$pem");require("module$node_modules$node_forge$lib$pss");require("module$node_modules$node_forge$lib$rsa");require("module$node_modules$node_forge$lib$util");var asn1=forge.asn1,pki=module.exports=forge.pki=forge.pki||{},oids=pki.oids,_shortNames={};_shortNames.CN=
oids.commonName;_shortNames.commonName="CN";_shortNames.C=oids.countryName;_shortNames.countryName="C";_shortNames.L=oids.localityName;_shortNames.localityName="L";_shortNames.ST=oids.stateOrProvinceName;_shortNames.stateOrProvinceName="ST";_shortNames.O=oids.organizationName;_shortNames.organizationName="O";_shortNames.OU=oids.organizationalUnitName;_shortNames.organizationalUnitName="OU";_shortNames.E=oids.emailAddress;_shortNames.emailAddress="E";global=forge.pki.rsa.publicKeyValidator;var x509CertificateValidator=
{name:"Certificate",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,value:[{name:"Certificate.TBSCertificate",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,captureAsn1:"tbsCertificate",value:[{name:"Certificate.TBSCertificate.version",tagClass:asn1.Class.CONTEXT_SPECIFIC,type:0,constructed:!0,optional:!0,value:[{name:"Certificate.TBSCertificate.version.integer",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.INTEGER,constructed:!1,capture:"certVersion"}]},
{name:"Certificate.TBSCertificate.serialNumber",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.INTEGER,constructed:!1,capture:"certSerialNumber"},{name:"Certificate.TBSCertificate.signature",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,value:[{name:"Certificate.TBSCertificate.signature.algorithm",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.OID,constructed:!1,capture:"certinfoSignatureOid"},{name:"Certificate.TBSCertificate.signature.parameters",tagClass:asn1.Class.UNIVERSAL,
optional:!0,captureAsn1:"certinfoSignatureParams"}]},{name:"Certificate.TBSCertificate.issuer",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,captureAsn1:"certIssuer"},{name:"Certificate.TBSCertificate.validity",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,value:[{name:"Certificate.TBSCertificate.validity.notBefore (utc)",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.UTCTIME,constructed:!1,optional:!0,capture:"certValidity1UTCTime"},{name:"Certificate.TBSCertificate.validity.notBefore (generalized)",
tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.GENERALIZEDTIME,constructed:!1,optional:!0,capture:"certValidity2GeneralizedTime"},{name:"Certificate.TBSCertificate.validity.notAfter (utc)",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.UTCTIME,constructed:!1,optional:!0,capture:"certValidity3UTCTime"},{name:"Certificate.TBSCertificate.validity.notAfter (generalized)",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.GENERALIZEDTIME,constructed:!1,optional:!0,capture:"certValidity4GeneralizedTime"}]},{name:"Certificate.TBSCertificate.subject",
tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,captureAsn1:"certSubject"},global,{name:"Certificate.TBSCertificate.issuerUniqueID",tagClass:asn1.Class.CONTEXT_SPECIFIC,type:1,constructed:!0,optional:!0,value:[{name:"Certificate.TBSCertificate.issuerUniqueID.id",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.BITSTRING,constructed:!1,captureBitStringValue:"certIssuerUniqueId"}]},{name:"Certificate.TBSCertificate.subjectUniqueID",tagClass:asn1.Class.CONTEXT_SPECIFIC,type:2,constructed:!0,
optional:!0,value:[{name:"Certificate.TBSCertificate.subjectUniqueID.id",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.BITSTRING,constructed:!1,captureBitStringValue:"certSubjectUniqueId"}]},{name:"Certificate.TBSCertificate.extensions",tagClass:asn1.Class.CONTEXT_SPECIFIC,type:3,constructed:!0,captureAsn1:"certExtensions",optional:!0}]},{name:"Certificate.signatureAlgorithm",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,value:[{name:"Certificate.signatureAlgorithm.algorithm",
tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.OID,constructed:!1,capture:"certSignatureOid"},{name:"Certificate.TBSCertificate.signature.parameters",tagClass:asn1.Class.UNIVERSAL,optional:!0,captureAsn1:"certSignatureParams"}]},{name:"Certificate.signatureValue",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.BITSTRING,constructed:!1,captureBitStringValue:"certSignature"}]},rsassaPssParameterValidator={name:"rsapss",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,value:[{name:"rsapss.hashAlgorithm",
tagClass:asn1.Class.CONTEXT_SPECIFIC,type:0,constructed:!0,value:[{name:"rsapss.hashAlgorithm.AlgorithmIdentifier",tagClass:asn1.Class.UNIVERSAL,type:asn1.Class.SEQUENCE,constructed:!0,optional:!0,value:[{name:"rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.OID,constructed:!1,capture:"hashOid"}]}]},{name:"rsapss.maskGenAlgorithm",tagClass:asn1.Class.CONTEXT_SPECIFIC,type:1,constructed:!0,value:[{name:"rsapss.maskGenAlgorithm.AlgorithmIdentifier",tagClass:asn1.Class.UNIVERSAL,
type:asn1.Class.SEQUENCE,constructed:!0,optional:!0,value:[{name:"rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.OID,constructed:!1,capture:"maskGenOid"},{name:"rsapss.maskGenAlgorithm.AlgorithmIdentifier.params",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,value:[{name:"rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.OID,constructed:!1,capture:"maskGenHashOid"}]}]}]},
{name:"rsapss.saltLength",tagClass:asn1.Class.CONTEXT_SPECIFIC,type:2,optional:!0,value:[{name:"rsapss.saltLength.saltLength",tagClass:asn1.Class.UNIVERSAL,type:asn1.Class.INTEGER,constructed:!1,capture:"saltLength"}]},{name:"rsapss.trailerField",tagClass:asn1.Class.CONTEXT_SPECIFIC,type:3,optional:!0,value:[{name:"rsapss.trailer.trailer",tagClass:asn1.Class.UNIVERSAL,type:asn1.Class.INTEGER,constructed:!1,capture:"trailer"}]}]},certificationRequestValidator={name:"CertificationRequest",tagClass:asn1.Class.UNIVERSAL,
type:asn1.Type.SEQUENCE,constructed:!0,captureAsn1:"csr",value:[{name:"CertificationRequestInfo",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,captureAsn1:"certificationRequestInfo",value:[{name:"CertificationRequestInfo.integer",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.INTEGER,constructed:!1,capture:"certificationRequestInfoVersion"},{name:"CertificationRequestInfo.subject",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,captureAsn1:"certificationRequestInfoSubject"},
global,{name:"CertificationRequestInfo.attributes",tagClass:asn1.Class.CONTEXT_SPECIFIC,type:0,constructed:!0,optional:!0,capture:"certificationRequestInfoAttributes",value:[{name:"CertificationRequestInfo.attributes",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,value:[{name:"CertificationRequestInfo.attributes.type",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.OID,constructed:!1},{name:"CertificationRequestInfo.attributes.value",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SET,
constructed:!0}]}]}]},{name:"CertificationRequest.signatureAlgorithm",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.SEQUENCE,constructed:!0,value:[{name:"CertificationRequest.signatureAlgorithm.algorithm",tagClass:asn1.Class.UNIVERSAL,type:asn1.Type.OID,constructed:!1,capture:"csrSignatureOid"},{name:"CertificationRequest.signatureAlgorithm.parameters",tagClass:asn1.Class.UNIVERSAL,optional:!0,captureAsn1:"csrSignatureParams"}]},{name:"CertificationRequest.signature",tagClass:asn1.Class.UNIVERSAL,
type:asn1.Type.BITSTRING,constructed:!1,captureBitStringValue:"csrSignature"}]};pki.RDNAttributesAsArray=function(rdn,md){for(var rval=[],set,attr,obj,si=0;si<rdn.value.length;++si){set=rdn.value[si];for(var i=0;i<set.value.length;++i)obj={},attr=set.value[i],obj.type=asn1.derToOid(attr.value[0].value),obj.value=attr.value[1].value,obj.valueTagClass=attr.value[1].type,obj.type in oids&&(obj.name=oids[obj.type],obj.name in _shortNames&&(obj.shortName=_shortNames[obj.name])),md&&(md.update(obj.type),
md.update(obj.value)),rval.push(obj)}return rval};pki.CRIAttributesAsArray=function(attributes){for(var rval=[],si=0;si<attributes.length;++si){var seq=attributes[si],type=asn1.derToOid(seq.value[0].value);seq=seq.value[1].value;for(var vi=0;vi<seq.length;++vi){var obj={};obj.type=type;obj.value=seq[vi].value;obj.valueTagClass=seq[vi].type;obj.type in oids&&(obj.name=oids[obj.type],obj.name in _shortNames&&(obj.shortName=_shortNames[obj.name]));if(obj.type===oids.extensionRequest){obj.extensions=
[];for(var ei=0;ei<obj.value.length;++ei)obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]))}rval.push(obj)}}return rval};var _readSignatureParameters=function(oid,obj,fillDefaults){var params={};if(oid!==oids["RSASSA-PSS"])return params;fillDefaults&&(params={hash:{algorithmOid:oids.sha1},mgf:{algorithmOid:oids.mgf1,hash:{algorithmOid:oids.sha1}},saltLength:20});fillDefaults={};oid=[];if(!asn1.validate(obj,rsassaPssParameterValidator,fillDefaults,oid))throw obj=Error("Cannot read RSASSA-PSS parameter block."),
obj.errors=oid,obj;void 0!==fillDefaults.hashOid&&(params.hash=params.hash||{},params.hash.algorithmOid=asn1.derToOid(fillDefaults.hashOid));void 0!==fillDefaults.maskGenOid&&(params.mgf=params.mgf||{},params.mgf.algorithmOid=asn1.derToOid(fillDefaults.maskGenOid),params.mgf.hash=params.mgf.hash||{},params.mgf.hash.algorithmOid=asn1.derToOid(fillDefaults.maskGenHashOid));void 0!==fillDefaults.saltLength&&(params.saltLength=fillDefaults.saltLength.charCodeAt(0));return params};pki.certificateFromPem=
function(pem,computeHash,strict){pem=forge.pem.decode(pem)[0];if("CERTIFICATE"!==pem.type&&"X509 CERTIFICATE"!==pem.type&&"TRUSTED CERTIFICATE"!==pem.type)throw computeHash=Error('Could not convert certificate from PEM; PEM header type is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".'),computeHash.headerType=pem.type,computeHash;if(pem.procType&&"ENCRYPTED"===pem.procType.type)throw Error("Could not convert certificate from PEM; PEM is encrypted.");strict=asn1.fromDer(pem.body,
strict);return pki.certificateFromAsn1(strict,computeHash)};pki.certificateToPem=function(cert,maxline){cert={type:"CERTIFICATE",body:asn1.toDer(pki.certificateToAsn1(cert)).getBytes()};return forge.pem.encode(cert,{maxline:maxline})};pki.publicKeyFromPem=function(pem){pem=forge.pem.decode(pem)[0];if("PUBLIC KEY"!==pem.type&&"RSA PUBLIC KEY"!==pem.type){var error=Error('Could not convert public key from PEM; PEM header type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');error.headerType=pem.type;throw error;
}if(pem.procType&&"ENCRYPTED"===pem.procType.type)throw Error("Could not convert public key from PEM; PEM is encrypted.");pem=asn1.fromDer(pem.body);return pki.publicKeyFromAsn1(pem)};pki.publicKeyToPem=function(key,maxline){key={type:"PUBLIC KEY",body:asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()};return forge.pem.encode(key,{maxline:maxline})};pki.publicKeyToRSAPublicKeyPem=function(key,maxline){key={type:"RSA PUBLIC KEY",body:asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()};return forge.pem.encode(key,
{maxline:maxline})};pki.getPublicKeyFingerprint=function(key,options){options=options||{};var md=options.md||forge.md.sha1.create();switch(options.type||"RSAPublicKey"){case "RSAPublicKey":key=asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();break;case "SubjectPublicKeyInfo":key=asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();break;default:throw Error('Unknown fingerprint type "'+options.type+'".');}md.start();md.update(key);md=md.digest();if("hex"===options.encoding)return md=md.toHex(),options.delimiter?
md.match(/.{2}/g).join(options.delimiter):md;if("binary"===options.encoding)return md.getBytes();if(options.encoding)throw Error('Unknown encoding "'+options.encoding+'".');return md};pki.certificationRequestFromPem=function(pem,computeHash,strict){pem=forge.pem.decode(pem)[0];if("CERTIFICATE REQUEST"!==pem.type)throw computeHash=Error('Could not convert certification request from PEM; PEM header type is not "CERTIFICATE REQUEST".'),computeHash.headerType=pem.type,computeHash;if(pem.procType&&"ENCRYPTED"===
pem.procType.type)throw Error("Could not convert certification request from PEM; PEM is encrypted.");strict=asn1.fromDer(pem.body,strict);return pki.certificationRequestFromAsn1(strict,computeHash)};pki.certificationRequestToPem=function(csr,maxline){csr={type:"CERTIFICATE REQUEST",body:asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()};return forge.pem.encode(csr,{maxline:maxline})};pki.createCertificate=function(){var cert={version:2,serialNumber:"00",signatureOid:null,signature:null,siginfo:{}};
cert.siginfo.algorithmOid=null;cert.validity={};cert.validity.notBefore=new Date;cert.validity.notAfter=new Date;cert.issuer={};cert.issuer.getField=function(sn){return _getAttribute(cert.issuer,sn)};cert.issuer.addField=function(attr){_fillMissingFields([attr]);cert.issuer.attributes.push(attr)};cert.issuer.attributes=[];cert.issuer.hash=null;cert.subject={};cert.subject.getField=function(sn){return _getAttribute(cert.subject,sn)};cert.subject.addField=function(attr){_fillMissingFields([attr]);cert.subject.attributes.push(attr)};
cert.subject.attributes=[];cert.subject.hash=null;cert.extensions=[];cert.publicKey=null;cert.md=null;cert.setSubject=function(attrs,uniqueId){_fillMissingFields(attrs);cert.subject.attributes=attrs;delete cert.subject.uniqueId;uniqueId&&(cert.subject.uniqueId=uniqueId);cert.subject.hash=null};cert.setIssuer=function(attrs,uniqueId){_fillMissingFields(attrs);cert.issuer.attributes=attrs;delete cert.issuer.uniqueId;uniqueId&&(cert.issuer.uniqueId=uniqueId);cert.issuer.hash=null};cert.setExtensions=
function(exts){for(var i=0;i<exts.length;++i)_fillMissingExtensionFields(exts[i],{cert:cert});cert.extensions=exts};cert.getExtension=function(options){"string"===typeof options&&(options={name:options});for(var rval=null,ext,i=0;null===rval&&i<cert.extensions.length;++i)ext=cert.extensions[i],options.id&&ext.id===options.id?rval=ext:options.name&&ext.name===options.name&&(rval=ext);return rval};cert.sign=function(key,md){cert.md=md||forge.md.sha1.create();md=oids[cert.md.algorithm+"WithRSAEncryption"];
if(!md)throw key=Error("Could not compute certificate digest. Unknown message digest algorithm OID."),key.algorithm=cert.md.algorithm,key;cert.signatureOid=cert.siginfo.algorithmOid=md;cert.tbsCertificate=pki.getTBSCertificate(cert);md=asn1.toDer(cert.tbsCertificate);cert.md.update(md.getBytes());cert.signature=key.sign(cert.md)};cert.verify=function(child){var rval=!1;if(!cert.issued(child)){rval=cert.subject;var error=Error("The parent certificate did not issue the given child certificate; the child certificate's issuer does not match the parent's subject.");
error.expectedIssuer=child.issuer.attributes;error.actualIssuer=rval.attributes;throw error;}error=child.md;if(null===error){if(child.signatureOid in oids)switch(oids[child.signatureOid]){case "sha1WithRSAEncryption":error=forge.md.sha1.create();break;case "md5WithRSAEncryption":error=forge.md.md5.create();break;case "sha256WithRSAEncryption":error=forge.md.sha256.create();break;case "sha384WithRSAEncryption":error=forge.md.sha384.create();break;case "sha512WithRSAEncryption":error=forge.md.sha512.create();
break;case "RSASSA-PSS":error=forge.md.sha256.create()}if(null===error)throw error=Error("Could not compute certificate digest. Unknown signature OID."),error.signatureOid=child.signatureOid,error;var tbsCertificate=child.tbsCertificate||pki.getTBSCertificate(child);tbsCertificate=asn1.toDer(tbsCertificate);error.update(tbsCertificate.getBytes())}if(null!==error){switch(child.signatureOid){case oids.sha1WithRSAEncryption:var scheme=void 0;break;case oids["RSASSA-PSS"]:rval=oids[child.signatureParameters.mgf.hash.algorithmOid];
if(void 0===rval||void 0===forge.md[rval])throw error=Error("Unsupported MGF hash function."),error.oid=child.signatureParameters.mgf.hash.algorithmOid,error.name=rval,error;scheme=oids[child.signatureParameters.mgf.algorithmOid];if(void 0===scheme||void 0===forge.mgf[scheme])throw error=Error("Unsupported MGF function."),error.oid=child.signatureParameters.mgf.algorithmOid,error.name=scheme,error;scheme=forge.mgf[scheme].create(forge.md[rval].create());rval=oids[child.signatureParameters.hash.algorithmOid];
if(void 0===rval||void 0===forge.md[rval])throw{message:"Unsupported RSASSA-PSS hash function.",oid:child.signatureParameters.hash.algorithmOid,name:rval};scheme=forge.pss.create(forge.md[rval].create(),scheme,child.signatureParameters.saltLength)}rval=cert.publicKey.verify(error.digest().getBytes(),child.signature,scheme)}return rval};cert.isIssuer=function(parent){var rval=!1,i=cert.issuer;parent=parent.subject;if(i.hash&&parent.hash)rval=i.hash===parent.hash;else if(i.attributes.length===parent.attributes.length){rval=
!0;for(var iattr,sattr,n=0;rval&&n<i.attributes.length;++n)if(iattr=i.attributes[n],sattr=parent.attributes[n],iattr.type!==sattr.type||iattr.value!==sattr.value)rval=!1}return rval};cert.issued=function(child){return child.isIssuer(cert)};cert.generateSubjectKeyIdentifier=function(){return pki.getPublicKeyFingerprint(cert.publicKey,{type:"RSAPublicKey"})};cert.verifySubjectKeyIdentifier=function(){for(var oid=oids.subjectKeyIdentifier,i=0;i<cert.extensions.length;++i){var ext=cert.extensions[i];
if(ext.id===oid)return oid=cert.generateSubjectKeyIdentifier().getBytes(),forge.util.hexToBytes(ext.subjectKeyIdentifier)===oid}return!1};return cert};pki.certificateFromAsn1=function(obj,computeHash){var capture={},errors=[];if(!asn1.validate(obj,x509CertificateValidator,capture,errors))throw capture=Error("Cannot read X.509 certificate. ASN.1 object is not an X509v3 Certificate."),capture.errors=errors,capture;errors=asn1.derToOid(capture.publicKeyOid);if(errors!==pki.oids.rsaEncryption)throw Error("Cannot read public key. OID is not RSA.");
var cert=pki.createCertificate();cert.version=capture.certVersion?capture.certVersion.charCodeAt(0):0;errors=forge.util.createBuffer(capture.certSerialNumber);cert.serialNumber=errors.toHex();cert.signatureOid=forge.asn1.derToOid(capture.certSignatureOid);cert.signatureParameters=_readSignatureParameters(cert.signatureOid,capture.certSignatureParams,!0);cert.siginfo.algorithmOid=forge.asn1.derToOid(capture.certinfoSignatureOid);cert.siginfo.parameters=_readSignatureParameters(cert.siginfo.algorithmOid,
capture.certinfoSignatureParams,!1);cert.signature=capture.certSignature;errors=[];void 0!==capture.certValidity1UTCTime&&errors.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));void 0!==capture.certValidity2GeneralizedTime&&errors.push(asn1.generalizedTimeToDate(capture.certValidity2GeneralizedTime));void 0!==capture.certValidity3UTCTime&&errors.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));void 0!==capture.certValidity4GeneralizedTime&&errors.push(asn1.generalizedTimeToDate(capture.certValidity4GeneralizedTime));
if(2<errors.length)throw Error("Cannot read notBefore/notAfter validity times; more than two times were provided in the certificate.");if(2>errors.length)throw Error("Cannot read notBefore/notAfter validity times; they were not provided as either UTCTime or GeneralizedTime.");cert.validity.notBefore=errors[0];cert.validity.notAfter=errors[1];cert.tbsCertificate=capture.tbsCertificate;if(computeHash){cert.md=null;if(cert.signatureOid in oids)switch(errors=oids[cert.signatureOid],errors){case "sha1WithRSAEncryption":cert.md=
forge.md.sha1.create();break;case "md5WithRSAEncryption":cert.md=forge.md.md5.create();break;case "sha256WithRSAEncryption":cert.md=forge.md.sha256.create();break;case "sha384WithRSAEncryption":cert.md=forge.md.sha384.create();break;case "sha512WithRSAEncryption":cert.md=forge.md.sha512.create();break;case "RSASSA-PSS":cert.md=forge.md.sha256.create()}if(null===cert.md)throw capture=Error("Could not compute certificate digest. Unknown signature OID."),capture.signatureOid=cert.signatureOid,capture;
computeHash=asn1.toDer(cert.tbsCertificate);cert.md.update(computeHash.getBytes())}computeHash=forge.md.sha1.create();cert.issuer.getField=function(sn){return _getAttribute(cert.issuer,sn)};cert.issuer.addField=function(attr){_fillMissingFields([attr]);cert.issuer.attributes.push(attr)};cert.issuer.attributes=pki.RDNAttributesAsArray(capture.certIssuer,computeHash);capture.certIssuerUniqueId&&(cert.issuer.uniqueId=capture.certIssuerUniqueId);cert.issuer.hash=computeHash.digest().toHex();computeHash=
forge.md.sha1.create();cert.subject.getField=function(sn){return _getAttribute(cert.subject,sn)};cert.subject.addField=function(attr){_fillMissingFields([attr]);cert.subject.attributes.push(attr)};cert.subject.attributes=pki.RDNAttributesAsArray(capture.certSubject,computeHash);capture.certSubjectUniqueId&&(cert.subject.uniqueId=capture.certSubjectUniqueId);cert.subject.hash=computeHash.digest().toHex();cert.extensions=capture.certExtensions?pki.certificateExtensionsFromAsn1(capture.certExtensions):
[];cert.publicKey=pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);return cert};pki.certificateExtensionsFromAsn1=function(exts){for(var rval=[],i=0;i<exts.value.length;++i)for(var extseq=exts.value[i],ei=0;ei<extseq.value.length;++ei)rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));return rval};pki.certificateExtensionFromAsn1=function(ext){var e={};e.id=asn1.derToOid(ext.value[0].value);e.critical=!1;ext.value[1].type===asn1.Type.BOOLEAN?(e.critical=0!==ext.value[1].value.charCodeAt(0),
e.value=ext.value[2].value):e.value=ext.value[1].value;if(e.id in oids)if(e.name=oids[e.id],"keyUsage"===e.name){ext=asn1.fromDer(e.value);var b2=0,b3=0;1<ext.value.length&&(b2=ext.value.charCodeAt(1),b3=2<ext.value.length?ext.value.charCodeAt(2):0);e.digitalSignature=128===(b2&128);e.nonRepudiation=64===(b2&64);e.keyEncipherment=32===(b2&32);e.dataEncipherment=16===(b2&16);e.keyAgreement=8===(b2&8);e.keyCertSign=4===(b2&4);e.cRLSign=2===(b2&2);e.encipherOnly=1===(b2&1);e.decipherOnly=128===(b3&128)}else if("basicConstraints"===
e.name)ext=asn1.fromDer(e.value),e.cA=0<ext.value.length&&ext.value[0].type===asn1.Type.BOOLEAN?0!==ext.value[0].value.charCodeAt(0):!1,b2=null,0<ext.value.length&&ext.value[0].type===asn1.Type.INTEGER?b2=ext.value[0].value:1<ext.value.length&&(b2=ext.value[1].value),null!==b2&&(e.pathLenConstraint=asn1.derToInteger(b2));else if("extKeyUsage"===e.name)for(ext=asn1.fromDer(e.value),b2=0;b2<ext.value.length;++b2)b3=asn1.derToOid(ext.value[b2].value),b3 in oids?e[oids[b3]]=!0:e[b3]=!0;else if("nsCertType"===
e.name)ext=asn1.fromDer(e.value),b2=0,1<ext.value.length&&(b2=ext.value.charCodeAt(1)),e.client=128===(b2&128),e.server=64===(b2&64),e.email=32===(b2&32),e.objsign=16===(b2&16),e.reserved=8===(b2&8),e.sslCA=4===(b2&4),e.emailCA=2===(b2&2),e.objCA=1===(b2&1);else if("subjectAltName"===e.name||"issuerAltName"===e.name)for(e.altNames=[],ext=asn1.fromDer(e.value),b3=0;b3<ext.value.length;++b3){b2=ext.value[b3];var altName={type:b2.type,value:b2.value};e.altNames.push(altName);switch(b2.type){case 7:altName.ip=
forge.util.bytesToIP(b2.value);break;case 8:altName.oid=asn1.derToOid(b2.value)}}else"subjectKeyIdentifier"===e.name&&(ext=asn1.fromDer(e.value),e.subjectKeyIdentifier=forge.util.bytesToHex(ext.value));return e};pki.certificationRequestFromAsn1=function(obj,computeHash){var capture={},errors=[];if(!asn1.validate(obj,certificationRequestValidator,capture,errors))throw capture=Error("Cannot read PKCS#10 certificate request. ASN.1 object is not a PKCS#10 CertificationRequest."),capture.errors=errors,
capture;errors=asn1.derToOid(capture.publicKeyOid);if(errors!==pki.oids.rsaEncryption)throw Error("Cannot read public key. OID is not RSA.");var csr=pki.createCertificationRequest();csr.version=capture.csrVersion?capture.csrVersion.charCodeAt(0):0;csr.signatureOid=forge.asn1.derToOid(capture.csrSignatureOid);csr.signatureParameters=_readSignatureParameters(csr.signatureOid,capture.csrSignatureParams,!0);csr.siginfo.algorithmOid=forge.asn1.derToOid(capture.csrSignatureOid);csr.siginfo.parameters=_readSignatureParameters(csr.siginfo.algorithmOid,
capture.csrSignatureParams,!1);csr.signature=capture.csrSignature;csr.certificationRequestInfo=capture.certificationRequestInfo;if(computeHash){csr.md=null;if(csr.signatureOid in oids)switch(errors=oids[csr.signatureOid],errors){case "sha1WithRSAEncryption":csr.md=forge.md.sha1.create();break;case "md5WithRSAEncryption":csr.md=forge.md.md5.create();break;case "sha256WithRSAEncryption":csr.md=forge.md.sha256.create();break;case "sha384WithRSAEncryption":csr.md=forge.md.sha384.create();break;case "sha512WithRSAEncryption":csr.md=
forge.md.sha512.create();break;case "RSASSA-PSS":csr.md=forge.md.sha256.create()}if(null===csr.md)throw capture=Error("Could not compute certification request digest. Unknown signature OID."),capture.signatureOid=csr.signatureOid,capture;computeHash=asn1.toDer(csr.certificationRequestInfo);csr.md.update(computeHash.getBytes())}computeHash=forge.md.sha1.create();csr.subject.getField=function(sn){return _getAttribute(csr.subject,sn)};csr.subject.addField=function(attr){_fillMissingFields([attr]);csr.subject.attributes.push(attr)};
csr.subject.attributes=pki.RDNAttributesAsArray(capture.certificationRequestInfoSubject,computeHash);csr.subject.hash=computeHash.digest().toHex();csr.publicKey=pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);csr.getAttribute=function(sn){return _getAttribute(csr,sn)};csr.addAttribute=function(attr){_fillMissingFields([attr]);csr.attributes.push(attr)};csr.attributes=pki.CRIAttributesAsArray(capture.certificationRequestInfoAttributes||[]);return csr};pki.createCertificationRequest=function(){var csr=
{version:0,signatureOid:null,signature:null,siginfo:{}};csr.siginfo.algorithmOid=null;csr.subject={};csr.subject.getField=function(sn){return _getAttribute(csr.subject,sn)};csr.subject.addField=function(attr){_fillMissingFields([attr]);csr.subject.attributes.push(attr)};csr.subject.attributes=[];csr.subject.hash=null;csr.publicKey=null;csr.attributes=[];csr.getAttribute=function(sn){return _getAttribute(csr,sn)};csr.addAttribute=function(attr){_fillMissingFields([attr]);csr.attributes.push(attr)};
csr.md=null;csr.setSubject=function(attrs){_fillMissingFields(attrs);csr.subject.attributes=attrs;csr.subject.hash=null};csr.setAttributes=function(attrs){_fillMissingFields(attrs);csr.attributes=attrs};csr.sign=function(key,md){csr.md=md||forge.md.sha1.create();md=oids[csr.md.algorithm+"WithRSAEncryption"];if(!md)throw key=Error("Could not compute certification request digest. Unknown message digest algorithm OID."),key.algorithm=csr.md.algorithm,key;csr.signatureOid=csr.siginfo.algorithmOid=md;
csr.certificationRequestInfo=pki.getCertificationRequestInfo(csr);md=asn1.toDer(csr.certificationRequestInfo);csr.md.update(md.getBytes());csr.signature=key.sign(csr.md)};csr.verify=function(){var rval=!1,md=csr.md;if(null===md){if(csr.signatureOid in oids)switch(oids[csr.signatureOid]){case "sha1WithRSAEncryption":md=forge.md.sha1.create();break;case "md5WithRSAEncryption":md=forge.md.md5.create();break;case "sha256WithRSAEncryption":md=forge.md.sha256.create();break;case "sha384WithRSAEncryption":md=
forge.md.sha384.create();break;case "sha512WithRSAEncryption":md=forge.md.sha512.create();break;case "RSASSA-PSS":md=forge.md.sha256.create()}if(null===md)throw md=Error("Could not compute certification request digest. Unknown signature OID."),md.signatureOid=csr.signatureOid,md;var cri=csr.certificationRequestInfo||pki.getCertificationRequestInfo(csr);cri=asn1.toDer(cri);md.update(cri.getBytes())}if(null!==md){switch(csr.signatureOid){case oids["RSASSA-PSS"]:rval=oids[csr.signatureParameters.mgf.hash.algorithmOid];
if(void 0===rval||void 0===forge.md[rval])throw md=Error("Unsupported MGF hash function."),md.oid=csr.signatureParameters.mgf.hash.algorithmOid,md.name=rval,md;var scheme=oids[csr.signatureParameters.mgf.algorithmOid];if(void 0===scheme||void 0===forge.mgf[scheme])throw md=Error("Unsupported MGF function."),md.oid=csr.signatureParameters.mgf.algorithmOid,md.name=scheme,md;scheme=forge.mgf[scheme].create(forge.md[rval].create());rval=oids[csr.signatureParameters.hash.algorithmOid];if(void 0===rval||
void 0===forge.md[rval])throw md=Error("Unsupported RSASSA-PSS hash function."),md.oid=csr.signatureParameters.hash.algorithmOid,md.name=rval,md;scheme=forge.pss.create(forge.md[rval].create(),scheme,csr.signatureParameters.saltLength)}rval=csr.publicKey.verify(md.digest().getBytes(),csr.signature,scheme)}return rval};return csr};var jan_1_1950=new Date("1950-01-01T00:00:00Z"),jan_1_2050=new Date("2050-01-01T00:00:00Z");pki.getTBSCertificate=function(cert){var notBefore=_dateToAsn1(cert.validity.notBefore),
notAfter=_dateToAsn1(cert.validity.notAfter);notBefore=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.CONTEXT_SPECIFIC,0,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,asn1.integerToDer(cert.version).getBytes())]),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,forge.util.hexToBytes(cert.serialNumber)),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()),
_signatureParametersToAsn1(cert.siginfo.algorithmOid,cert.siginfo.parameters)]),_dnToAsn1(cert.issuer),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[notBefore,notAfter]),_dnToAsn1(cert.subject),pki.publicKeyToAsn1(cert.publicKey)]);cert.issuer.uniqueId&&notBefore.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,1,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.BITSTRING,!1,String.fromCharCode(0)+cert.issuer.uniqueId)]));cert.subject.uniqueId&&notBefore.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC,
2,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.BITSTRING,!1,String.fromCharCode(0)+cert.subject.uniqueId)]));0<cert.extensions.length&&notBefore.value.push(pki.certificateExtensionsToAsn1(cert.extensions));return notBefore};pki.getCertificationRequestInfo=function(csr){return asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.INTEGER,!1,asn1.integerToDer(csr.version).getBytes()),_dnToAsn1(csr.subject),pki.publicKeyToAsn1(csr.publicKey),_CRIAttributesToAsn1(csr)])};
pki.distinguishedNameToAsn1=function(dn){return _dnToAsn1(dn)};pki.certificateToAsn1=function(cert){var tbsCertificate=cert.tbsCertificate||pki.getTBSCertificate(cert);return asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[tbsCertificate,asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(cert.signatureOid).getBytes()),_signatureParametersToAsn1(cert.signatureOid,cert.signatureParameters)]),asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.BITSTRING,!1,String.fromCharCode(0)+cert.signature)])};pki.certificateExtensionsToAsn1=function(exts){var rval=asn1.create(asn1.Class.CONTEXT_SPECIFIC,3,!0,[]),seq=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[]);rval.value.push(seq);for(var i=0;i<exts.length;++i)seq.value.push(pki.certificateExtensionToAsn1(exts[i]));return rval};pki.certificateExtensionToAsn1=function(ext){var extseq=asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[]);extseq.value.push(asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.OID,!1,asn1.oidToDer(ext.id).getBytes()));ext.critical&&extseq.value.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.BOOLEAN,!1,String.fromCharCode(255)));var value=ext.value;"string"!==typeof ext.value&&(value=asn1.toDer(value).getBytes());extseq.value.push(asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OCTETSTRING,!1,value));return extseq};pki.certificationRequestToAsn1=function(csr){var cri=csr.certificationRequestInfo||pki.getCertificationRequestInfo(csr);return asn1.create(asn1.Class.UNIVERSAL,
asn1.Type.SEQUENCE,!0,[cri,asn1.create(asn1.Class.UNIVERSAL,asn1.Type.SEQUENCE,!0,[asn1.create(asn1.Class.UNIVERSAL,asn1.Type.OID,!1,asn1.oidToDer(csr.signatureOid).getBytes()),_signatureParametersToAsn1(csr.signatureOid,csr.signatureParameters)]),asn1.create(asn1.Class.UNIVERSAL,asn1.Type.BITSTRING,!1,String.fromCharCode(0)+csr.signature)])};pki.createCaStore=function(certs){function getBySubject(subject){ensureSubjectHasHash(subject);return caStore.certs[subject.hash]||null}function ensureSubjectHasHash(subject){if(!subject.hash){var md=
forge.md.sha1.create();subject.attributes=pki.RDNAttributesAsArray(_dnToAsn1(subject),md);subject.hash=md.digest().toHex()}}var caStore={certs:{},getIssuer:function(cert){return getBySubject(cert.issuer)},addCertificate:function(cert){"string"===typeof cert&&(cert=forge.pki.certificateFromPem(cert));ensureSubjectHasHash(cert.subject);if(!caStore.hasCertificate(cert))if(cert.subject.hash in caStore.certs){var tmp=caStore.certs[cert.subject.hash];forge.util.isArray(tmp)||(tmp=[tmp]);tmp.push(cert);
caStore.certs[cert.subject.hash]=tmp}else caStore.certs[cert.subject.hash]=cert},hasCertificate:function(cert){"string"===typeof cert&&(cert=forge.pki.certificateFromPem(cert));var match=getBySubject(cert.subject);if(!match)return!1;forge.util.isArray(match)||(match=[match]);cert=asn1.toDer(pki.certificateToAsn1(cert)).getBytes();for(var i=0;i<match.length;++i){var der2=asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();if(cert===der2)return!0}return!1},listAllCertificates:function(){var certList=
[],hash;for(hash in caStore.certs)if(caStore.certs.hasOwnProperty(hash)){var value=caStore.certs[hash];if(forge.util.isArray(value))for(var i=0;i<value.length;++i)certList.push(value[i]);else certList.push(value)}return certList},removeCertificate:function(cert){"string"===typeof cert&&(cert=forge.pki.certificateFromPem(cert));ensureSubjectHasHash(cert.subject);if(!caStore.hasCertificate(cert))return null;var match=getBySubject(cert.subject);if(!forge.util.isArray(match)){var result=caStore.certs[cert.subject.hash];
delete caStore.certs[cert.subject.hash];return result}for(var der1=asn1.toDer(pki.certificateToAsn1(cert)).getBytes(),i=0;i<match.length;++i){var der2=asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();der1===der2&&(result=match[i],match.splice(i,1))}0===match.length&&delete caStore.certs[cert.subject.hash];return result}};if(certs)for(var i$jscomp$0=0;i$jscomp$0<certs.length;++i$jscomp$0)caStore.addCertificate(certs[i$jscomp$0]);return caStore};pki.certificateError={bad_certificate:"forge.pki.BadCertificate",
unsupported_certificate:"forge.pki.UnsupportedCertificate",certificate_revoked:"forge.pki.CertificateRevoked",certificate_expired:"forge.pki.CertificateExpired",certificate_unknown:"forge.pki.CertificateUnknown",unknown_ca:"forge.pki.UnknownCertificateAuthority"};pki.verifyCertificateChain=function(caStore,chain,options){"function"===typeof options&&(options={verify:options});options=options||{};chain=chain.slice(0);var certs=chain.slice(0),validityCheckDate=options.validityCheckDate;"undefined"===
typeof validityCheckDate&&(validityCheckDate=new Date);var first=!0,error=null,depth=0;do{var cert=chain.shift(),parent=null,selfSigned=!1;validityCheckDate&&(validityCheckDate<cert.validity.notBefore||validityCheckDate>cert.validity.notAfter)&&(error={message:"Certificate is not valid yet or has expired.",error:pki.certificateError.certificate_expired,notBefore:cert.validity.notBefore,notAfter:cert.validity.notAfter,now:validityCheckDate});if(null===error){parent=chain[0]||caStore.getIssuer(cert);
null===parent&&cert.isIssuer(cert)&&(selfSigned=!0,parent=cert);if(parent){var parents=parent;forge.util.isArray(parents)||(parents=[parents]);for(var verified=!1;!verified&&0<parents.length;){parent=parents.shift();try{verified=parent.verify(cert)}catch(ex){}}verified||(error={message:"Certificate signature is invalid.",error:pki.certificateError.bad_certificate})}null!==error||parent&&!selfSigned||caStore.hasCertificate(cert)||(error={message:"Certificate is not trusted.",error:pki.certificateError.unknown_ca})}null===
error&&parent&&!cert.isIssuer(parent)&&(error={message:"Certificate issuer is invalid.",error:pki.certificateError.bad_certificate});if(null===error)for(parents={keyUsage:!0,basicConstraints:!0},verified=0;null===error&&verified<cert.extensions.length;++verified){var ext=cert.extensions[verified];!ext.critical||ext.name in parents||(error={message:"Certificate has an unsupported critical extension.",error:pki.certificateError.unsupported_certificate})}null!==error||first&&(0!==chain.length||parent&&
!selfSigned)||(first=cert.getExtension("basicConstraints"),cert=cert.getExtension("keyUsage"),null!==cert&&(cert.keyCertSign&&null!==first||(error={message:"Certificate keyUsage or basicConstraints conflict or indicate that the certificate is not a CA. If the certificate is the only one in the chain or isn't the first then the certificate must be a valid CA.",error:pki.certificateError.bad_certificate})),null!==error||null===first||first.cA||(error={message:"Certificate basicConstraints indicates the certificate is not a CA.",
error:pki.certificateError.bad_certificate}),null===error&&null!==cert&&"pathLenConstraint"in first&&depth-1>first.pathLenConstraint&&(error={message:"Certificate basicConstraints pathLenConstraint violated.",error:pki.certificateError.bad_certificate}));cert=null===error?!0:error.error;first=options.verify?options.verify(cert,depth,certs):cert;if(!0===first)error=null;else{!0===cert&&(error={message:"The application rejected the certificate.",error:pki.certificateError.bad_certificate});if(first||
0===first)"object"!==typeof first||forge.util.isArray(first)?"string"===typeof first&&(error.error=first):(first.message&&(error.message=first.message),first.error&&(error.error=first.error));throw error;}first=!1;++depth}while(0<chain.length);return!0}}
//# sourceMappingURL=module$node_modules$node_forge$lib$x509.js.map
