shadow$provide.module$node_modules$node_forge$lib$pbkdf2=function(global,require,module,exports){var Buffer=require("shadow$empty").Buffer,forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$hmac");require("module$node_modules$node_forge$lib$md");require("module$node_modules$node_forge$lib$util");global=forge.pkcs5=forge.pkcs5||{};var crypto;forge.util.isNodejs&&!forge.options.usePureJavaScript&&(crypto=require("shadow$empty"));module.exports=forge.pbkdf2=
global.pbkdf2=function(p,s,c,dkLen,md,callback){function outer(){if(i>len)return callback(null,dk);prf.start(null,null);prf.update(s);prf.update(forge.util.int32ToBytes(i));xor=u_c1=prf.digest().getBytes();j=2;inner()}function inner(){if(j<=c)return prf.start(null,null),prf.update(u_c1),u_c=prf.digest().getBytes(),xor=forge.util.xorBytes(xor,u_c,hLen),u_c1=u_c,++j,forge.util.setImmediate(inner);dk+=i<len?xor:xor.substr(0,r);++i;outer()}"function"===typeof md&&(callback=md,md=null);if(forge.util.isNodejs&&
!forge.options.usePureJavaScript&&crypto.pbkdf2&&(null===md||"object"!==typeof md)&&(4<crypto.pbkdf2Sync.length||!md||"sha1"===md))return"string"!==typeof md&&(md="sha1"),p=Buffer.from(p,"binary"),s=Buffer.from(s,"binary"),callback?4===crypto.pbkdf2Sync.length?crypto.pbkdf2(p,s,c,dkLen,function(err,key){if(err)return callback(err);callback(null,key.toString("binary"))}):crypto.pbkdf2(p,s,c,dkLen,md,function(err,key){if(err)return callback(err);callback(null,key.toString("binary"))}):4===crypto.pbkdf2Sync.length?
crypto.pbkdf2Sync(p,s,c,dkLen).toString("binary"):crypto.pbkdf2Sync(p,s,c,dkLen,md).toString("binary");if("undefined"===typeof md||null===md)md="sha1";if("string"===typeof md){if(!(md in forge.md.algorithms))throw Error("Unknown hash algorithm: "+md);md=forge.md[md].create()}var hLen=md.digestLength;if(dkLen>4294967295*hLen){p=Error("Derived key is too long.");if(callback)return callback(p);throw p;}var len=Math.ceil(dkLen/hLen),r=dkLen-(len-1)*hLen,prf=forge.hmac.create();prf.start(md,p);var dk=
"",u_c1;if(!callback){for(var i=1;i<=len;++i){prf.start(null,null);prf.update(s);prf.update(forge.util.int32ToBytes(i));var xor=u_c1=prf.digest().getBytes();for(var j=2;j<=c;++j){prf.start(null,null);prf.update(u_c1);var u_c=prf.digest().getBytes();xor=forge.util.xorBytes(xor,u_c,hLen);u_c1=u_c}dk+=i<len?xor:xor.substr(0,r)}return dk}i=1;outer()}}
//# sourceMappingURL=module$node_modules$node_forge$lib$pbkdf2.js.map
