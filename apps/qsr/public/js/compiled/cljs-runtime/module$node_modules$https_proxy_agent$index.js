shadow$provide.module$node_modules$https_proxy_agent$index=function(global,require,module,exports){function HttpsProxyAgent(opts){if(!(this instanceof HttpsProxyAgent))return new HttpsProxyAgent(opts);"string"==typeof opts&&(opts=url.parse(opts));if(!opts)throw Error("an HTTP(S) proxy server `host` and `port` must be specified!");debug("creating new HttpsProxyAgent instance: %o",opts);Agent.call(this,opts);opts=Object.assign({},opts);this.secureProxy=opts.protocol?/^https:?$/i.test(opts.protocol):
!1;opts.host=opts.hostname||opts.host;opts.port=+opts.port||(this.secureProxy?443:80);!this.secureProxy||"ALPNProtocols"in opts||(opts.ALPNProtocols=["http 1.1"]);opts.host&&opts.path&&(delete opts.path,delete opts.pathname);this.proxy=opts;this.defaultPort=443}function isDefaultPort(port,secure){return!!(!secure&&80===port||secure&&443===port)}var Buffer=require("module$node_modules$buffer$index").Buffer,net=require("shadow$empty"),tls=require("shadow$empty"),url=require("module$node_modules$url$url"),
Agent=require("module$node_modules$agent_base$index");global=require("module$node_modules$util$util").inherits;var debug=require("module$node_modules$debug$src$browser")("https-proxy-agent");module.exports=HttpsProxyAgent;global(HttpsProxyAgent,Agent);HttpsProxyAgent.prototype.callback=function(req,opts,fn){function read(){var b=socket$jscomp$0.read();if(b)ondata(b);else socket$jscomp$0.once("readable",read)}function cleanup(){socket$jscomp$0.removeListener("data",ondata);socket$jscomp$0.removeListener("end",
onend);socket$jscomp$0.removeListener("error",onerror);socket$jscomp$0.removeListener("close",onclose);socket$jscomp$0.removeListener("readable",read)}function onclose(err){debug("onclose had error %o",err)}function onend(){debug("onend")}function onerror(err){cleanup();fn(err)}function ondata(b){buffers.push(b);buffersLength+=b.length;b=Buffer.concat(buffers,buffersLength);var str=b.toString("ascii");if(~str.indexOf("\r\n\r\n")){str=str.substring(0,str.indexOf("\r\n"));var statusCode=+str.split(" ")[1];
debug("got proxy server response: %o",str);200==statusCode?(b=socket$jscomp$0,buffers=null,opts.secureEndpoint&&(debug("upgrading proxy-connected socket to TLS connection: %o",opts.host),opts.socket=socket$jscomp$0,opts.servername=opts.servername||opts.host,opts.host=null,opts.hostname=null,opts.port=null,b=tls.connect(opts)),cleanup(),fn(null,b)):(cleanup(),buffers=b,req.once("socket",onsocket),fn(null,socket$jscomp$0))}else if(debug("have not received end of HTTP headers yet..."),socket$jscomp$0.read)read();
else socket$jscomp$0.once("data",ondata)}function onsocket(socket){if("function"==typeof socket.ondata)socket.ondata(buffers,0,buffers.length);else if(0<socket.listeners("data").length)socket.emit("data",buffers);else throw Error("should not happen...");buffers=null}var proxy=this.proxy;var socket$jscomp$0=this.secureProxy?tls.connect(proxy):net.connect(proxy);var buffers=[],buffersLength=0;socket$jscomp$0.on("error",onerror);socket$jscomp$0.on("close",onclose);socket$jscomp$0.on("end",onend);if(socket$jscomp$0.read)read();
else socket$jscomp$0.once("data",ondata);var msg="CONNECT "+(opts.host+":"+opts.port)+" HTTP/1.1\r\n",headers=Object.assign({},proxy.headers);proxy.auth&&(headers["Proxy-Authorization"]="Basic "+Buffer.from(proxy.auth).toString("base64"));proxy=opts.host;isDefaultPort(opts.port,opts.secureEndpoint)||(proxy+=":"+opts.port);headers.Host=proxy;headers.Connection="close";Object.keys(headers).forEach(function(name){msg+=name+": "+headers[name]+"\r\n"});socket$jscomp$0.write(msg+"\r\n")}}
//# sourceMappingURL=module$node_modules$https_proxy_agent$index.js.map
