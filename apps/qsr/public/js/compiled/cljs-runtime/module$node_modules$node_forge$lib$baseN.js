shadow$provide.module$node_modules$node_forge$lib$baseN=function(global,require,module,exports){var Buffer=require("shadow$empty").Buffer;global={};module.exports=global;var _reverseAlphabets={};global.encode=function(input,alphabet,maxline){if("string"!==typeof alphabet)throw new TypeError('"alphabet" must be a string.');if(void 0!==maxline&&"number"!==typeof maxline)throw new TypeError('"maxline" must be a number.');var output="";if(input instanceof Uint8Array){var i,base=alphabet.length,first=
alphabet.charAt(0),digits=[0];for(i=0;i<input.length;++i){for(var j=0,carry=input[i];j<digits.length;++j)carry+=digits[j]<<8,digits[j]=carry%base,carry=carry/base|0;for(;0<carry;)digits.push(carry%base),carry=carry/base|0}for(i=0;0===input[i]&&i<input.length-1;++i)output+=first;for(i=digits.length-1;0<=i;--i)output+=alphabet[digits[i]]}else{first=alphabet.length;i=alphabet.charAt(0);base=[0];for(output=0;output<input.length();++output){digits=0;for(j=input.at(output);digits<base.length;++digits)j+=
base[digits]<<8,base[digits]=j%first,j=j/first|0;for(;0<j;)base.push(j%first),j=j/first|0}first="";for(output=0;0===input.at(output)&&output<input.length()-1;++output)first+=i;for(output=base.length-1;0<=output;--output)first+=alphabet[base[output]];output=first}maxline&&(output=output.match(new RegExp(".{1,"+maxline+"}","g")).join("\r\n"));return output};global.decode=function(input,alphabet){if("string"!==typeof input)throw new TypeError('"input" must be a string.');if("string"!==typeof alphabet)throw new TypeError('"alphabet" must be a string.');
var table=_reverseAlphabets[alphabet];if(!table){table=_reverseAlphabets[alphabet]=[];for(var i=0;i<alphabet.length;++i)table[alphabet.charCodeAt(i)]=i}input=input.replace(/\s/g,"");var base=alphabet.length;alphabet=alphabet.charAt(0);var bytes=[0];for(i=0;i<input.length;i++){var value=table[input.charCodeAt(i)];if(void 0===value)return;for(var j=0;j<bytes.length;++j)value+=bytes[j]*base,bytes[j]=value&255,value>>=8;for(;0<value;)bytes.push(value&255),value>>=8}for(table=0;input[table]===alphabet&&
table<input.length-1;++table)bytes.push(0);return"undefined"!==typeof Buffer?Buffer.from(bytes.reverse()):new Uint8Array(bytes.reverse())}}
//# sourceMappingURL=module$node_modules$node_forge$lib$baseN.js.map
