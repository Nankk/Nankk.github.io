shadow$provide.module$node_modules$google_auth_library$build$src$auth$jwtclient=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var gtoken_1=require("module$node_modules$gtoken$build$src$index"),messages=require("module$node_modules$google_auth_library$build$src$messages"),jwtaccess_1=require("module$node_modules$google_auth_library$build$src$auth$jwtaccess"),oauth2client_1=require("module$node_modules$google_auth_library$build$src$auth$oauth2client"),
JWT=function(optionsOrEmail,keyFile,key,scopes,subject,keyId){keyFile=optionsOrEmail&&"object"===typeof optionsOrEmail?optionsOrEmail:{email:optionsOrEmail,keyFile:keyFile,key:key,keyId:keyId,scopes:scopes,subject:subject};optionsOrEmail=oauth2client_1.OAuth2Client.call(this,{eagerRefreshThresholdMillis:keyFile.eagerRefreshThresholdMillis})||this;optionsOrEmail.email=keyFile.email;optionsOrEmail.keyFile=keyFile.keyFile;optionsOrEmail.key=keyFile.key;optionsOrEmail.keyId=keyFile.keyId;optionsOrEmail.scopes=
keyFile.scopes;optionsOrEmail.subject=keyFile.subject;optionsOrEmail.additionalClaims=keyFile.additionalClaims;optionsOrEmail.credentials={refresh_token:"jwt-placeholder",expiry_date:1};return optionsOrEmail};$jscomp.inherits(JWT,oauth2client_1.OAuth2Client);JWT.prototype.createScoped=function(scopes){return new JWT({email:this.email,keyFile:this.keyFile,key:this.key,keyId:this.keyId,scopes:scopes,subject:this.subject,additionalClaims:this.additionalClaims})};JWT.prototype.getRequestMetadataAsync=
function(url){var $jscomp$async$this=this,headers,$jscomp$destructuring$var4,tokens;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress){if($jscomp$async$this.apiKey||$jscomp$async$this.hasScopes()||!url)return $jscomp$generator$context.return(oauth2client_1.OAuth2Client.prototype.getRequestMetadataAsync.call($jscomp$async$this,url));if($jscomp$async$this.additionalClaims&&$jscomp$async$this.additionalClaims.target_audience)return $jscomp$generator$context.yield($jscomp$async$this.refreshToken(),
6);$jscomp$async$this.access||($jscomp$async$this.access=new jwtaccess_1.JWTAccess($jscomp$async$this.email,$jscomp$async$this.key,$jscomp$async$this.keyId));return $jscomp$generator$context.yield($jscomp$async$this.access.getRequestHeaders(url,$jscomp$async$this.additionalClaims),5)}if(6!=$jscomp$generator$context.nextAddress)return headers=$jscomp$generator$context.yieldResult,$jscomp$generator$context.return({headers:headers});$jscomp$destructuring$var4=$jscomp$generator$context.yieldResult;tokens=
$jscomp$destructuring$var4.tokens;return $jscomp$generator$context.return({headers:{Authorization:"Bearer "+tokens.id_token}})})};JWT.prototype.createScopedRequired=function(){messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);return!this.hasScopes()};JWT.prototype.hasScopes=function(){return this.scopes?this.scopes instanceof Array?0<this.scopes.length:0<String(this.scopes).length:!1};JWT.prototype.authorize=function(callback){if(callback)this.authorizeAsync().then(function(r){return callback(null,
r)},callback);else return this.authorizeAsync()};JWT.prototype.authorizeAsync=function(){var $jscomp$async$this=this,result;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress)return $jscomp$generator$context.yield($jscomp$async$this.refreshToken(),2);result=$jscomp$generator$context.yieldResult;if(!result)throw Error("No result returned");$jscomp$async$this.credentials=result.tokens;$jscomp$async$this.credentials.refresh_token=
"jwt-placeholder";$jscomp$async$this.key=$jscomp$async$this.gtoken.key;$jscomp$async$this.email=$jscomp$async$this.gtoken.iss;return $jscomp$generator$context.return(result.tokens)})};JWT.prototype.refreshTokenNoCache=function(refreshToken){var $jscomp$async$this=this,gtoken,token,tokens;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress)return gtoken=$jscomp$async$this.createGToken(),$jscomp$generator$context.yield(gtoken.getToken(),
2);token=$jscomp$generator$context.yieldResult;tokens={access_token:token.access_token,token_type:"Bearer",expiry_date:gtoken.expiresAt,id_token:gtoken.idToken};$jscomp$async$this.emit("tokens",tokens);return $jscomp$generator$context.return({res:null,tokens:tokens})})};JWT.prototype.createGToken=function(){this.gtoken||(this.gtoken=new gtoken_1.GoogleToken({iss:this.email,sub:this.subject,scope:this.scopes,keyFile:this.keyFile,key:this.key,additionalClaims:this.additionalClaims}));return this.gtoken};
JWT.prototype.fromJSON=function(json){if(!json)throw Error("Must pass in a JSON object containing the service account auth settings.");if(!json.client_email)throw Error("The incoming JSON object does not contain a client_email field");if(!json.private_key)throw Error("The incoming JSON object does not contain a private_key field");this.email=json.client_email;this.key=json.private_key;this.keyId=json.private_key_id;this.projectId=json.project_id};JWT.prototype.fromStream=function(inputStream,callback){if(callback)this.fromStreamAsync(inputStream).then(function(r){return callback()},
callback);else return this.fromStreamAsync(inputStream)};JWT.prototype.fromStreamAsync=function(inputStream){var $jscomp$this=this;return new Promise(function(resolve,reject){if(!inputStream)throw Error("Must pass in a stream containing the service account auth settings.");var s="";inputStream.setEncoding("utf8").on("error",reject).on("data",function(chunk){return s+=chunk}).on("end",function(){try{var data=JSON.parse(s);$jscomp$this.fromJSON(data);resolve()}catch(e){reject(e)}})})};JWT.prototype.fromAPIKey=
function(apiKey){if("string"!==typeof apiKey)throw Error("Must provide an API Key string.");this.apiKey=apiKey};JWT.prototype.getCredentials=function(){var $jscomp$async$this=this,gtoken,creds;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress){if($jscomp$async$this.key)return $jscomp$generator$context.return({private_key:$jscomp$async$this.key,client_email:$jscomp$async$this.email});if(!$jscomp$async$this.keyFile)return $jscomp$generator$context.jumpTo(2);
gtoken=$jscomp$async$this.createGToken();return $jscomp$generator$context.yield(gtoken.getCredentials($jscomp$async$this.keyFile),4)}if(2!=$jscomp$generator$context.nextAddress)return creds=$jscomp$generator$context.yieldResult,$jscomp$generator$context.return({private_key:creds.privateKey,client_email:creds.clientEmail});throw Error("A key or a keyFile must be provided to getCredentials.");})};exports.JWT=JWT}
//# sourceMappingURL=module$node_modules$google_auth_library$build$src$auth$jwtclient.js.map
