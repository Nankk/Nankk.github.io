{
"version":3,
"file":"module$node_modules$google_auth_library$build$src$auth$envDetect.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA8D7HC,QAAeA,mBAAkB,EAAG,CAAA,MAAA,QAAA,oCAAA,CAAA,QAAA,CAAA,yBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,yBAAA,YAAA,CAE5B,MADA,0BAAA,sBAAA,CAAA,CAAA,CACA,CAAA,yBAAA,MAAA,CAAMC,WAAAC,SAAA,CAAqB,yBAArB,CAAN,CAAA,CAAA,CAF4B,IAAA,CAAA,EAAA,yBAAA,YAAA,CAG5B,MAAA,0BAAA,OAAA,CAAO,CAAA,CAAP,CAEGC;yBAAAA,gBAAAA,EACH,OAAA,0BAAA,OAAA,CAAO,CAAA,CAAP,CAN4B,CAAA,CAAA,CASpCC,QAAeA,gBAAe,EAAG,CAAA,MAAA,QAAA,oCAAA,CAAA,QAAA,CAAA,yBAAA,CAAA,CAC7B,MAAA,0BAAA,OAAA,CAAOH,WAAAI,YAAA,EAAP,CAD6B,CAAA,CAAA,CAtEjC,IAAIC,QAAUT,OAAA,CAAQ,qCAAR,CACd,aAgBAU,OAAAC,eAAA,CAAsBT,OAAtB,CAA+B,YAA/B,CAA6C,CAAEU,MAAO,CAAA,CAAT,CAA7C,CACA,KAAMR,YAAcJ,OAAA,CAAQ,kDAAR,CAApB,CACIa,MACH,UAAS,CAACA,MAAD,CAAS,CACfA,MAAA,WAAA;AAAuB,YACvBA,OAAA,kBAAA,CAA8B,mBAC9BA,OAAA,gBAAA,CAA4B,iBAC5BA,OAAA,eAAA,CAA2B,gBAC3BA,OAAA,KAAA,CAAiB,MALF,CAAlB,CAAD,CAMGA,MANH,CAMYX,OAAAW,OANZ,GAM+BX,OAAAW,OAN/B,CAMgD,EANhD,EAOA,KAAIC,GAIJZ,QAAAa,MAAA,CAHAA,QAAc,EAAG,CACbD,GAAA,CAAME,IAAAA,EADO,CA0BjBd,QAAAe,OAAA,CAtBAA,QAAqB,EAAG,CAAA,MAAA,QAAA,oCAAA,CAAA,QAAA,CAAA,yBAAA,CAAA,CAAA,OAAA,yBAAA,YAAA,EAAA,KAAA,CAAA,CACpB,GAAKH,GAAL,CAAA,CAAA,yBAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CACI,GAsBML,OAAAK,IAAAI,YAtBN,EAsBiCT,OAAAK,IAAAK,gBAtBjC,CAAmB,CACfL,GAAA;AAAMD,MAAAO,WADS,0BAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CAGd,GAsBCX,OAAAK,IAAAO,cAtBD,EAsB8BZ,OAAAK,IAAAQ,gBAtB9B,CAAuB,CACxBR,GAAA,CAAMD,MAAAU,gBADkB,0BAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CAGnB,MAAA,0BAAA,MAAA,CAAMhB,eAAA,EAAN,CAAA,CAAA,CARO,MAAA,CAAA,CAQX,GAAI,CAAA,yBAAA,YAAJ,CAQA,CACDO,GAAA,CAAMD,MAAAW,KADL,0BAAA,OAAA,CAAA,CAAA,CAAA,MAAA,CAPG,MAAA,0BAAA,MAAA,CAAMrB,kBAAA,EAAN,CAAA,CAAA,CATQ,MAAA,CAAA,CAURW,GAAA,CADA,yBAAA,YAAJ,CACUD,MAAAY,kBADV,CAIUZ,MAAAa,eAbE;KAAA,CAAA,CAoBpB,MAAA,0BAAA,OAAA,CAAOZ,GAAP,CApBoB,CAAA,CAAA,CAAA,CAjCqG;",
"sources":["node_modules/google-auth-library/build/src/auth/envDetect.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$google_auth_library$build$src$auth$envDetect\"] = function(global,require,module,exports) {\nvar process = require('process');\n\"use strict\";\n/**\n * Copyright 2018 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gcpMetadata = require(\"gcp-metadata\");\nvar GCPEnv;\n(function (GCPEnv) {\n    GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n    GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n    GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n    GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n    GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\nlet env;\nfunction clear() {\n    env = undefined;\n}\nexports.clear = clear;\nasync function getEnv() {\n    if (!env) {\n        if (isAppEngine()) {\n            env = GCPEnv.APP_ENGINE;\n        }\n        else if (isCloudFunction()) {\n            env = GCPEnv.CLOUD_FUNCTIONS;\n        }\n        else if (await isComputeEngine()) {\n            if (await isKubernetesEngine()) {\n                env = GCPEnv.KUBERNETES_ENGINE;\n            }\n            else {\n                env = GCPEnv.COMPUTE_ENGINE;\n            }\n        }\n        else {\n            env = GCPEnv.NONE;\n        }\n    }\n    return env;\n}\nexports.getEnv = getEnv;\nfunction isAppEngine() {\n    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\nfunction isCloudFunction() {\n    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\nasync function isKubernetesEngine() {\n    try {\n        await gcpMetadata.instance('attributes/cluster-name');\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\nasync function isComputeEngine() {\n    return gcpMetadata.isAvailable();\n}\n//# sourceMappingURL=envDetect.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","isKubernetesEngine","gcpMetadata","instance","e","isComputeEngine","isAvailable","process","Object","defineProperty","value","GCPEnv","env","clear","undefined","getEnv","GAE_SERVICE","GAE_MODULE_NAME","APP_ENGINE","FUNCTION_NAME","FUNCTION_TARGET","CLOUD_FUNCTIONS","NONE","KUBERNETES_ENGINE","COMPUTE_ENGINE"]
}
