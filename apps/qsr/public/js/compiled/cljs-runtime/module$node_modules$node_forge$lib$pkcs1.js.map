{
"version":3,
"file":"module$node_modules$node_forge$lib$pkcs1.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/node-forge/lib/pkcs1.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$pkcs1\"] = function(global,require,module,exports) {\n/**\n * Partial implementation of PKCS#1 v2.2: RSA-OEAP\n *\n * Modified but based on the following MIT and BSD licensed code:\n *\n * https://github.com/kjur/jsjws/blob/master/rsa.js:\n *\n * The 'jsjws'(JSON Web Signature JavaScript Library) License\n *\n * Copyright (c) 2012 Kenji Urushima\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:\n *\n * RSAES-OAEP.js\n * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $\n * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)\n * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.\n * Contact: ellis@nukinetics.com\n * Distributed under the BSD License.\n *\n * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125\n *\n * @author Evan Jones (http://evanjones.ca/)\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./sha1');\n\n// shortcut for PKCS#1 API\nvar pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};\n\n/**\n * Encode the given RSAES-OAEP message (M) using key, with optional label (L)\n * and seed.\n *\n * This method does not perform RSA encryption, it only encodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param message the message to encode.\n * @param options the options to use:\n *          label an optional label to use.\n *          seed the seed to use.\n *          md the message digest object to use, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the encoded message bytes.\n */\npkcs1.encode_rsa_oaep = function(key, message, options) {\n  // parse arguments\n  var label;\n  var seed;\n  var md;\n  var mgf1Md;\n  // legacy args (label, seed, md)\n  if(typeof options === 'string') {\n    label = options;\n    seed = arguments[3] || undefined;\n    md = arguments[4] || undefined;\n  } else if(options) {\n    label = options.label || undefined;\n    seed = options.seed || undefined;\n    md = options.md || undefined;\n    if(options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // default OAEP to SHA-1 message digest\n  if(!md) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if(!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  // compute length in bytes and check output\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n  var maxLength = keyLength - 2 * md.digestLength - 2;\n  if(message.length > maxLength) {\n    var error = new Error('RSAES-OAEP input message length is too long.');\n    error.length = message.length;\n    error.maxLength = maxLength;\n    throw error;\n  }\n\n  if(!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest();\n\n  var PS = '';\n  var PS_length = maxLength - message.length;\n  for(var i = 0; i < PS_length; i++) {\n    PS += '\\x00';\n  }\n\n  var DB = lHash.getBytes() + PS + '\\x01' + message;\n\n  if(!seed) {\n    seed = forge.random.getBytes(md.digestLength);\n  } else if(seed.length !== md.digestLength) {\n    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +\n      'match the digest length.');\n    error.seedLength = seed.length;\n    error.digestLength = md.digestLength;\n    throw error;\n  }\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);\n\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);\n\n  // return encoded message\n  return '\\x00' + maskedSeed + maskedDB;\n};\n\n/**\n * Decode the given RSAES-OAEP encoded message (EM) using key, with optional\n * label (L).\n *\n * This method does not perform RSA decryption, it only decodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param em the encoded message to decode.\n * @param options the options to use:\n *          label an optional label to use.\n *          md the message digest object to use for OAEP, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the decoded message bytes.\n */\npkcs1.decode_rsa_oaep = function(key, em, options) {\n  // parse args\n  var label;\n  var md;\n  var mgf1Md;\n  // legacy args\n  if(typeof options === 'string') {\n    label = options;\n    md = arguments[3] || undefined;\n  } else if(options) {\n    label = options.label || undefined;\n    md = options.md || undefined;\n    if(options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // compute length in bytes\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n\n  if(em.length !== keyLength) {\n    var error = new Error('RSAES-OAEP encoded message length is invalid.');\n    error.length = em.length;\n    error.expectedLength = keyLength;\n    throw error;\n  }\n\n  // default OAEP to SHA-1 message digest\n  if(md === undefined) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if(!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  if(keyLength < 2 * md.digestLength + 2) {\n    throw new Error('RSAES-OAEP key is too short for the hash function.');\n  }\n\n  if(!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest().getBytes();\n\n  // split the message into its parts\n  var y = em.charAt(0);\n  var maskedSeed = em.substring(1, md.digestLength + 1);\n  var maskedDB = em.substring(1 + md.digestLength);\n\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);\n\n  var lHashPrime = db.substring(0, md.digestLength);\n\n  // constant time check that all values match what is expected\n  var error = (y !== '\\x00');\n\n  // constant time check lHash vs lHashPrime\n  for(var i = 0; i < md.digestLength; ++i) {\n    error |= (lHash.charAt(i) !== lHashPrime.charAt(i));\n  }\n\n  // \"constant time\" find the 0x1 byte separating the padding (zeros) from the\n  // message\n  // TODO: It must be possible to do this in a better/smarter way?\n  var in_ps = 1;\n  var index = md.digestLength;\n  for(var j = md.digestLength; j < db.length; j++) {\n    var code = db.charCodeAt(j);\n\n    var is_0 = (code & 0x1) ^ 0x1;\n\n    // non-zero if not 0 or 1 in the ps section\n    var error_mask = in_ps ? 0xfffe : 0x0000;\n    error |= (code & error_mask);\n\n    // latch in_ps to zero after we find 0x1\n    in_ps = in_ps & is_0;\n    index += in_ps;\n  }\n\n  if(error || db.charCodeAt(index) !== 0x1) {\n    throw new Error('Invalid RSAES-OAEP padding.');\n  }\n\n  return db.substring(index + 1);\n};\n\nfunction rsa_mgf1(seed, maskLength, hash) {\n  // default to SHA-1 message digest\n  if(!hash) {\n    hash = forge.md.sha1.create();\n  }\n  var t = '';\n  var count = Math.ceil(maskLength / hash.digestLength);\n  for(var i = 0; i < count; ++i) {\n    var c = String.fromCharCode(\n      (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);\n    hash.start();\n    hash.update(seed + c);\n    t += hash.digest().getBytes();\n  }\n  return t.substring(0, maskLength);\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","rsa_mgf1","seed","maskLength","hash","forge","md","sha1","create","t","count","Math","ceil","digestLength","i","c","String","fromCharCode","start","update","digest","getBytes","substring","pkcs1","encode_rsa_oaep","pkcs1.encode_rsa_oaep","key","message","options","label","undefined","mgf1","mgf1Md","keyLength","n","bitLength","maxLength","length","error","Error","lHash","PS","PS_length","DB","random","seedLength","dbMask","maskedDB","util","xorBytes","seedMask","maskedSeed","decode_rsa_oaep","pkcs1.decode_rsa_oaep","em","expectedLength","y","charAt","db","lHashPrime","in_ps","j","index","code","charCodeAt","is_0","error_mask"]
}
