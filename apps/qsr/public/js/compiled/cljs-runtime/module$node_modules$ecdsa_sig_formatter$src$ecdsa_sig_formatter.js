shadow$provide.module$node_modules$ecdsa_sig_formatter$src$ecdsa_sig_formatter=function(global,require,module,exports){function signatureAsBuffer(signature){if(Buffer.isBuffer(signature))return signature;if("string"===typeof signature)return Buffer.from(signature,"base64");throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");}function countPadding(buf,start,stop){for(var padding=0;start+padding<stop&&0===buf[start+padding];)++padding;128<=buf[start+padding]&&--padding;return padding}
var Buffer=require("module$node_modules$safe_buffer$index").Buffer,getParamBytesForAlg=require("module$node_modules$ecdsa_sig_formatter$src$param_bytes_for_alg");module.exports={derToJose:function(signature,alg){signature=signatureAsBuffer(signature);var paramBytes=getParamBytesForAlg(alg),maxEncodedParamLength=paramBytes+1,inputLength=signature.length;alg=0;if(48!==signature[alg++])throw Error('Could not find expected "seq"');var seqLength=signature[alg++];129===seqLength&&(seqLength=signature[alg++]);
if(inputLength-alg<seqLength)throw Error('"seq" specified length of "'+seqLength+'", only "'+(inputLength-alg)+'" remaining');if(2!==signature[alg++])throw Error('Could not find expected "int" for "r"');var rLength=signature[alg++];if(inputLength-alg-2<rLength)throw Error('"r" specified length of "'+rLength+'", only "'+(inputLength-alg-2)+'" available');if(maxEncodedParamLength<rLength)throw Error('"r" specified length of "'+rLength+'", max of "'+maxEncodedParamLength+'" is acceptable');var rOffset=
alg;alg+=rLength;if(2!==signature[alg++])throw Error('Could not find expected "int" for "s"');seqLength=signature[alg++];if(inputLength-alg!==seqLength)throw Error('"s" specified length of "'+seqLength+'", expected "'+(inputLength-alg)+'"');if(maxEncodedParamLength<seqLength)throw Error('"s" specified length of "'+seqLength+'", max of "'+maxEncodedParamLength+'" is acceptable');maxEncodedParamLength=alg;alg+=seqLength;if(alg!==inputLength)throw Error('Expected to consume entire buffer, but "'+(inputLength-
alg)+'" bytes remain');var rPadding=paramBytes-rLength;inputLength=paramBytes-seqLength;var dst=Buffer.allocUnsafe(rPadding+rLength+inputLength+seqLength);for(alg=0;alg<rPadding;++alg)dst[alg]=0;signature.copy(dst,alg,rOffset+Math.max(-rPadding,0),rOffset+rLength);for(paramBytes=alg=paramBytes;alg<paramBytes+inputLength;++alg)dst[alg]=0;signature.copy(dst,alg,maxEncodedParamLength+Math.max(-inputLength,0),maxEncodedParamLength+seqLength);dst=dst.toString("base64");return dst=dst.replace(/=/g,"").replace(/\+/g,
"-").replace(/\//g,"_")},joseToDer:function(signature,alg){signature=signatureAsBuffer(signature);var paramBytes=getParamBytesForAlg(alg),signatureBytes=signature.length;if(signatureBytes!==2*paramBytes)throw new TypeError('"'+alg+'" signatures must be "'+2*paramBytes+'" bytes, saw "'+signatureBytes+'"');alg=countPadding(signature,0,paramBytes);signatureBytes=countPadding(signature,paramBytes,signature.length);var rLength=paramBytes-alg,sLength=paramBytes-signatureBytes,rsBytes=2+rLength+1+1+sLength,
shortLength=128>rsBytes,dst=Buffer.allocUnsafe((shortLength?2:3)+rsBytes),offset=0;dst[offset++]=48;shortLength?dst[offset++]=rsBytes:(dst[offset++]=129,dst[offset++]=rsBytes&255);dst[offset++]=2;dst[offset++]=rLength;0>alg?(dst[offset++]=0,offset+=signature.copy(dst,offset,0,paramBytes)):offset+=signature.copy(dst,offset,alg,paramBytes);dst[offset++]=2;dst[offset++]=sLength;0>signatureBytes?(dst[offset++]=0,signature.copy(dst,offset,paramBytes)):signature.copy(dst,offset,paramBytes+signatureBytes);
return dst}}}
//# sourceMappingURL=module$node_modules$ecdsa_sig_formatter$src$ecdsa_sig_formatter.js.map
