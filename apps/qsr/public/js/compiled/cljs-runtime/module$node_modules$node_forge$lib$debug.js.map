{
"version":3,
"file":"module$node_modules$node_forge$lib$debug.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQrG,IAAIC,MAAQH,OAAA,CAAQ,0CAAR,CAGZC,OAAAC,QAAA,CAAiBC,KAAAC,MAAjB,CAA+BD,KAAAC,MAA/B,EAA8C,EAY9CD,MAAAC,MAAAC,QAAA,CAAsB,EAUtBF,MAAAC,MAAAE,IAAA,CAAkBC,QAAQ,CAACC,GAAD,CAAMC,IAAN,CAAY,CACpC,IAAIC,IACe,YAAnB,GAAG,MAAOF,IAAV,CACEE,IADF,CACSP,KAAAC,MAAAC,QADT,CAEUG,GAFV,GAEiBL,MAAAC,MAAAC,QAFjB,GAIIK,IAJJ,CAGsB,WAApB,GAAG,MAAOD,KAAV,CACSN,KAAAC,MAAAC,QAAA,CAAoBG,GAApB,CADT,CAGSL,KAAAC,MAAAC,QAAA,CAAoBG,GAApB,CAAA,CAAyBC,IAAzB,CANX,CASA,OAAOC,KAX6B,CAqBtCP,MAAAC,MAAAO,IAAA,CAAkBC,QAAQ,CAACJ,GAAD,CAAMC,IAAN,CAAYI,IAAZ,CAAkB,CACrCL,GAAL,GAAYL,MAAAC,MAAAC,QAAZ;CACEF,KAAAC,MAAAC,QAAA,CAAoBG,GAApB,CADF,CAC6B,EAD7B,CAGAL,MAAAC,MAAAC,QAAA,CAAoBG,GAApB,CAAA,CAAyBC,IAAzB,CAAA,CAAiCI,IAJS,CAc5CV,MAAAC,MAAAU,MAAA,CAAoBC,QAAQ,CAACP,GAAD,CAAMC,IAAN,CAAY,CACnB,WAAnB,GAAG,MAAOD,IAAV,CACEL,KAAAC,MAAAC,QADF,CACwB,EADxB,CAEUG,GAFV,GAEiBL,MAAAC,MAAAC,QAFjB,GAGsB,WAApB,GAAG,MAAOI,KAAV,CACE,OAAON,KAAAC,MAAAC,QAAA,CAAoBG,GAApB,CADT,CAGE,OAAOL,KAAAC,MAAAC,QAAA,CAAoBG,GAApB,CAAA,CAAyBC,IAAzB,CANX,CADsC,CApE6D;",
"sources":["node_modules/node-forge/lib/debug.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$debug\"] = function(global,require,module,exports) {\n/**\n * Debugging support for web applications.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\n\n/* DEBUG API */\nmodule.exports = forge.debug = forge.debug || {};\n\n// Private storage for debugging.\n// Useful to expose data that is otherwise unviewable behind closures.\n// NOTE: remember that this can hold references to data and cause leaks!\n// format is \"forge._debug.<modulename>.<dataname> = data\"\n// Example:\n// (function() {\n//   var cat = 'forge.test.Test'; // debugging category\n//   var sState = {...}; // local state\n//   forge.debug.set(cat, 'sState', sState);\n// })();\nforge.debug.storage = {};\n\n/**\n * Gets debug data. Omit name for all cat data  Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to get (optional).\n * @return object with requested debug data or undefined.\n */\nforge.debug.get = function(cat, name) {\n  var rval;\n  if(typeof(cat) === 'undefined') {\n    rval = forge.debug.storage;\n  } else if(cat in forge.debug.storage) {\n    if(typeof(name) === 'undefined') {\n      rval = forge.debug.storage[cat];\n    } else {\n      rval = forge.debug.storage[cat][name];\n    }\n  }\n  return rval;\n};\n\n/**\n * Sets debug data.\n *\n * @param cat name of debugging category.\n * @param name name of data to set.\n * @param data data to set.\n */\nforge.debug.set = function(cat, name, data) {\n  if(!(cat in forge.debug.storage)) {\n    forge.debug.storage[cat] = {};\n  }\n  forge.debug.storage[cat][name] = data;\n};\n\n/**\n * Clears debug data. Omit name for all cat data. Omit name and cat for\n * all data.\n *\n * @param cat name of debugging category.\n * @param name name of data to clear or omit to clear entire category.\n */\nforge.debug.clear = function(cat, name) {\n  if(typeof(cat) === 'undefined') {\n    forge.debug.storage = {};\n  } else if(cat in forge.debug.storage) {\n    if(typeof(name) === 'undefined') {\n      delete forge.debug.storage[cat];\n    } else {\n      delete forge.debug.storage[cat][name];\n    }\n  }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","forge","debug","storage","get","forge.debug.get","cat","name","rval","set","forge.debug.set","data","clear","forge.debug.clear"]
}
