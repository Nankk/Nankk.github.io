shadow$provide.module$node_modules$node_forge$lib$prng=function(global,require,module,exports){global=require("shadow$empty");var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$util");var _crypto=null;!forge.util.isNodejs||forge.options.usePureJavaScript||global.versions["node-webkit"]||(_crypto=require("shadow$empty"));(module.exports=forge.prng=forge.prng||{}).create=function(plugin){function _reseed(callback){if(32<=ctx.pools[0].messageLength)return _seed(),
callback();ctx.seedFile(32-ctx.pools[0].messageLength<<5,function(err,bytes){if(err)return callback(err);ctx.collect(bytes);_seed();callback()})}function _seed(){ctx.reseeds=4294967295===ctx.reseeds?0:ctx.reseeds+1;var md=ctx.plugin.md.create();md.update(ctx.keyBytes);for(var _2powK=1,k=0;32>k;++k)0===ctx.reseeds%_2powK&&(md.update(ctx.pools[k].digest().getBytes()),ctx.pools[k].start()),_2powK<<=1;ctx.keyBytes=md.digest().getBytes();md.start();md.update(ctx.keyBytes);md=md.digest().getBytes();ctx.key=
ctx.plugin.formatKey(ctx.keyBytes);ctx.seed=ctx.plugin.formatSeed(md);ctx.generated=0}function defaultSeedFile(needed){var getRandomValues=null,globalScope=forge.util.globalScope,_crypto=globalScope.crypto||globalScope.msCrypto;_crypto&&_crypto.getRandomValues&&(getRandomValues=function(arr){return _crypto.getRandomValues(arr)});globalScope=forge.util.createBuffer();if(getRandomValues)for(;globalScope.length()<needed;){var count=Math.max(1,Math.min(needed-globalScope.length(),65536)/4),entropy=new Uint32Array(Math.floor(count));
try{for(getRandomValues(entropy),count=0;count<entropy.length;++count)globalScope.putInt32(entropy[count])}catch(e){if(!("undefined"!==typeof QuotaExceededError&&e instanceof QuotaExceededError))throw e;}}if(globalScope.length()<needed)for(getRandomValues=Math.floor(65536*Math.random());globalScope.length()<needed;)for(count=16807*(getRandomValues&65535),getRandomValues=16807*(getRandomValues>>16),count+=(getRandomValues&32767)<<16,count+=getRandomValues>>15,count=(count&2147483647)+(count>>31),getRandomValues=
count&4294967295,count=0;3>count;++count)entropy=getRandomValues>>>(count<<3),entropy^=Math.floor(256*Math.random()),globalScope.putByte(String.fromCharCode(entropy&255));return globalScope.getBytes(needed)}var ctx={plugin:plugin,key:null,seed:null,time:null,reseeds:0,generated:0,keyBytes:""};plugin=plugin.md;for(var pools=Array(32),i$jscomp$0=0;32>i$jscomp$0;++i$jscomp$0)pools[i$jscomp$0]=plugin.create();ctx.pools=pools;ctx.pool=0;ctx.generate=function(count,callback){function generate(err){if(err)return callback(err);
if(b.length()>=count)return callback(null,b.getBytes(count));1048575<ctx.generated&&(ctx.key=null);if(null===ctx.key)return forge.util.nextTick(function(){_reseed(generate)});err=cipher(ctx.key,ctx.seed);ctx.generated+=err.length;b.putBytes(err);ctx.key=formatKey(cipher(ctx.key,increment(ctx.seed)));ctx.seed=formatSeed(cipher(ctx.key,ctx.seed));forge.util.setImmediate(generate)}if(!callback)return ctx.generateSync(count);var cipher=ctx.plugin.cipher,increment=ctx.plugin.increment,formatKey=ctx.plugin.formatKey,
formatSeed=ctx.plugin.formatSeed,b=forge.util.createBuffer();ctx.key=null;generate()};ctx.generateSync=function(count){var cipher=ctx.plugin.cipher,increment=ctx.plugin.increment,formatKey=ctx.plugin.formatKey,formatSeed=ctx.plugin.formatSeed;ctx.key=null;for(var b=forge.util.createBuffer();b.length()<count;){1048575<ctx.generated&&(ctx.key=null);null===ctx.key&&(32<=ctx.pools[0].messageLength||ctx.collect(ctx.seedFileSync(32-ctx.pools[0].messageLength<<5)),_seed());var bytes=cipher(ctx.key,ctx.seed);
ctx.generated+=bytes.length;b.putBytes(bytes);ctx.key=formatKey(cipher(ctx.key,increment(ctx.seed)));ctx.seed=formatSeed(cipher(ctx.key,ctx.seed))}return b.getBytes(count)};_crypto?(ctx.seedFile=function(needed,callback){_crypto.randomBytes(needed,function(err,bytes){if(err)return callback(err);callback(null,bytes.toString())})},ctx.seedFileSync=function(needed){return _crypto.randomBytes(needed).toString()}):(ctx.seedFile=function(needed,callback){try{callback(null,defaultSeedFile(needed))}catch(e){callback(e)}},
ctx.seedFileSync=defaultSeedFile);ctx.collect=function(bytes){for(var count=bytes.length,i=0;i<count;++i)ctx.pools[ctx.pool].update(bytes.substr(i,1)),ctx.pool=31===ctx.pool?0:ctx.pool+1};ctx.collectInt=function(i,n){for(var bytes="",x=0;x<n;x+=8)bytes+=String.fromCharCode(i>>x&255);ctx.collect(bytes)};ctx.registerWorker=function(worker){worker===self?ctx.seedFile=function(needed,callback){function listener(e){e=e.data;e.forge&&e.forge.prng&&(self.removeEventListener("message",listener),callback(e.forge.prng.err,
e.forge.prng.bytes))}self.addEventListener("message",listener);self.postMessage({forge:{prng:{needed:needed}}})}:worker.addEventListener("message",function(e){e=e.data;e.forge&&e.forge.prng&&ctx.seedFile(e.forge.prng.needed,function(err,bytes){worker.postMessage({forge:{prng:{err:err,bytes:bytes}}})})})};return ctx}}
//# sourceMappingURL=module$node_modules$node_forge$lib$prng.js.map
