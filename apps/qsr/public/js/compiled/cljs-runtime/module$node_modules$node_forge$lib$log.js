shadow$provide.module$node_modules$node_forge$lib$log=function(global,require,module,exports){var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$util");module.exports=forge.log=forge.log||{};forge.log.levels="none error warning info debug verbose max".split(" ");var sLevelInfo={},sLoggers=[];global=null;forge.log.LEVEL_LOCKED=2;forge.log.NO_LEVEL_CHECK=4;forge.log.INTERPOLATE=8;for(require=0;require<forge.log.levels.length;++require)module=forge.log.levels[require],
sLevelInfo[module]={index:require,name:module.toUpperCase()};forge.log.logMessage=function(message){for(var messageLevelIndex=sLevelInfo[message.level].index,i=0;i<sLoggers.length;++i){var logger=sLoggers[i];logger.flags&forge.log.NO_LEVEL_CHECK?logger.f(message):messageLevelIndex<=sLevelInfo[logger.level].index&&logger.f(logger,message)}};forge.log.prepareStandard=function(message){"standard"in message||(message.standard=sLevelInfo[message.level].name+" ["+message.category+"] "+message.message)};
forge.log.prepareFull=function(message){if(!("full"in message)){var args=[message.message];args=args.concat([]);message.full=forge.util.format.apply(this,args)}};forge.log.prepareStandardFull=function(message){"standardFull"in message||(forge.log.prepareStandard(message),message.standardFull=message.standard)};module=["error","warning","info","debug","verbose"];for(require=0;require<module.length;++require)(function(level){forge.log[level]=function(category,message){var args=Array.prototype.slice.call(arguments).slice(2);
forge.log.logMessage({timestamp:new Date,level:level,category:category,message:message,arguments:args})}})(module[require]);forge.log.makeLogger=function(logFunction){logFunction={flags:0,f:logFunction};forge.log.setLevel(logFunction,"none");return logFunction};forge.log.setLevel=function(logger,level){var rval=!1;if(logger&&!(logger.flags&forge.log.LEVEL_LOCKED))for(var i=0;i<forge.log.levels.length;++i)if(level==forge.log.levels[i]){logger.level=level;rval=!0;break}return rval};forge.log.lock=function(logger,
lock){logger.flags="undefined"===typeof lock||lock?logger.flags|forge.log.LEVEL_LOCKED:logger.flags&~forge.log.LEVEL_LOCKED};forge.log.addLogger=function(logger){sLoggers.push(logger)};if("undefined"!==typeof console&&"log"in console){if(console.error&&console.warn&&console.info&&console.debug){var levelHandlers={error:console.error,warning:console.warn,info:console.info,debug:console.debug,verbose:console.debug};global=function(logger,message){forge.log.prepareStandard(message);logger=levelHandlers[message.level];
var args=[message.standard];args=args.concat(message.arguments.slice());logger.apply(console,args)}}else global=function(logger,message){forge.log.prepareStandardFull(message);console.log(message.standardFull)};global=forge.log.makeLogger(global);forge.log.setLevel(global,"debug");forge.log.addLogger(global)}else console={log:function(){}};null!==global&&(require=forge.util.getQueryVariables(),"console.level"in require&&forge.log.setLevel(global,require["console.level"].slice(-1)[0]),"console.lock"in
require&&"true"==require["console.lock"].slice(-1)[0]&&forge.log.lock(global));forge.log.consoleLogger=global}
//# sourceMappingURL=module$node_modules$node_forge$lib$log.js.map
