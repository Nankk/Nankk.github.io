{
"version":3,
"file":"module$node_modules$google_auth_library$build$src$auth$googleauth.js",
"lineCount":38,
"mappings":"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",
"sources":["node_modules/google-auth-library/build/src/auth/googleauth.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$google_auth_library$build$src$auth$googleauth\"] = function(global,require,module,exports) {\nvar process = require('process');\n\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst messages = require(\"../messages\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    getDefaultProjectId(callback) {\n        messages.warn(messages.DEFAULT_PROJECT_ID_DEPRECATED);\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return Promise.resolve(this._cachedProjectId);\n        }\n        // In implicit case, supports three environments. In order of precedence,\n        // the implicit environments are:\n        // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n        // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n        // - Cloud SDK: `gcloud config config-helper --format json`\n        // - GCE project ID from metadata server)\n        if (!this._getDefaultProjectIdPromise) {\n            this._getDefaultProjectIdPromise = new Promise(async (resolve, reject) => {\n                try {\n                    const projectId = this.getProductionProjectId() ||\n                        (await this.getFileProjectId()) ||\n                        (await this.getDefaultServiceProjectId()) ||\n                        (await this.getGCEProjectId());\n                    this._cachedProjectId = projectId;\n                    if (!projectId) {\n                        throw new Error('Unable to detect a Project Id in the current environment. \\n' +\n                            'To learn more about authentication and Google APIs, visit: \\n' +\n                            'https://cloud.google.com/docs/authentication/getting-started');\n                    }\n                    resolve(projectId);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        }\n        return this._getDefaultProjectIdPromise;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, just return it.\n        if (this.cachedCredential) {\n            return {\n                credential: this.cachedCredential,\n                projectId: await this.getProjectIdAsync(),\n            };\n        }\n        let credential;\n        let projectId;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Look in the well-known credential file location.\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Determine if we're running on GCE.\n        let isGCE;\n        try {\n            isGCE = await this._checkIsGCE();\n        }\n        catch (e) {\n            e.message = `Unexpected error determining execution environment: ${e.message}`;\n            throw e;\n        }\n        if (!isGCE) {\n            // We failed to find the default credentials. Bail out with an error.\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n        }\n        // For GCE, just return a default ComputeClient. It will take care of\n        // the rest.\n        options.scopes = this.scopes;\n        this.cachedCredential = new computeclient_1.Compute(options);\n        projectId = await this.getProjectId();\n        return { projectId, credential: this.cachedCredential };\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE = await gcpMetadata.isAvailable();\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n            process.env['google_application_credentials'];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        }\n        catch (e) {\n            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env['APPDATA'];\n        }\n        else {\n            // Linux or Mac\n            const home = process.env['HOME'];\n            if (home) {\n                location = path.join(home, '.config');\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        this.warnOnProblematicCredentials(client);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error('The file path is invalid.');\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Credentials from the Cloud SDK that are associated with Cloud SDK's project\n     * are problematic because they may not have APIs enabled and have limited\n     * quota. If this is the case, warn about it.\n     */\n    warnOnProblematicCredentials(client) {\n        if (client.email === exports.CLOUD_SDK_CLIENT_ID) {\n            messages.warn(messages.PROBLEMATIC_CREDENTIALS_WARNING);\n        }\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options) {\n        let client;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\n        }\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n        }\n        client.fromJSON(json);\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    _cacheClientFromJSON(json, options) {\n        let client;\n        // create either a UserRefreshClient or JWT client.\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n        }\n        client.fromJSON(json);\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return this.cachedCredential;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    const r = this._cacheClientFromJSON(data, options);\n                    return resolve(r);\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    async getDefaultServiceProjectId() {\n        return new Promise(resolve => {\n            child_process_1.exec('gcloud config config-helper --format json', (err, stdout, stderr) => {\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core\n                            .project;\n                        resolve(projectId);\n                        return;\n                    }\n                    catch (e) {\n                        // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return (process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\n            process.env['gcloud_project'] ||\n            process.env['google_cloud_project']);\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project('project-id');\n            return r;\n        }\n        catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        await this.getClient();\n        if (this.jsonContent) {\n            const credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n            };\n            return credential;\n        }\n        const isGCE = await this._checkIsGCE();\n        if (!isGCE) {\n            throw new Error('Unknown error.');\n        }\n        // For GCE, return the service account details from the metadata server\n        // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n        // The GCF metadata server doesn't respect querystring params if this / is\n        // not included.\n        const data = await gcpMetadata.instance({\n            property: 'service-accounts/',\n            params: { recursive: 'true' },\n        });\n        if (!data || !data.default || !data.default.email) {\n            throw new Error('Failure from metadata server.');\n        }\n        return { client_email: data.default.email };\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n    async getClient(options) {\n        if (options) {\n            throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n        }\n        if (!this.cachedCredential) {\n            if (this.jsonContent) {\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n            }\n            else if (this.keyFilename) {\n                const filePath = path.resolve(this.keyFilename);\n                const stream = fs.createReadStream(filePath);\n                await this.fromStreamAsync(stream, this.clientOptions);\n            }\n            else {\n                await this.getApplicationDefaultAsync(this.clientOptions);\n            }\n        }\n        return this.cachedCredential;\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // tslint:disable-next-line no-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    async sign(data) {\n        const client = await this.getClient();\n        const crypto = crypto_1.createCrypto();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const projectId = await this.getProjectId();\n        if (!projectId) {\n            throw new Error('Cannot sign data without a project ID.');\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error('Cannot sign data without `client_email`.');\n        }\n        const id = `projects/${projectId}/serviceAccounts/${creds.client_email}`;\n        const res = await this.request({\n            method: 'POST',\n            url: `https://iam.googleapis.com/v1/${id}:signBlob`,\n            data: { bytesToSign: crypto.encodeBase64StringUtf8(data) },\n        });\n        return res.data.signature;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceMappingURL=googleauth.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","process","Object","defineProperty","value","child_process_1","fs","gcpMetadata","os","path","crypto_1","messages","transporters_1","computeclient_1","envDetect_1","jwtclient_1","refreshclient_1","CLOUD_SDK_CLIENT_ID","GoogleAuth","constructor","opts","checkIsGCE","undefined","cachedCredential","jsonContent","_cachedProjectId","projectId","keyFilename","keyFile","scopes","credentials","clientOptions","getDefaultProjectId","callback","warn","DEFAULT_PROJECT_ID_DEPRECATED","getProjectIdAsync","then","r","getProjectId","Promise","resolve","_getDefaultProjectIdPromise","reject","e","Error","getApplicationDefault","optionsOrCallback","options","getApplicationDefaultAsync","credential","isGCE","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","message","Compute","isAvailable","credentialsPath","env","length","_getApplicationCredentialsFromFilePath","location","home","client","_isWindows","join","existsSync","warnOnProblematicCredentials","filePath","readStream","realpathSync","lstatSync","isFile","err","createReadStream","fromStream","email","PROBLEMATIC_CREDENTIALS_WARNING","fromJSON","json","type","UserRefreshClient","_cacheClientFromJSON","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","fromAPIKey","apiKey","sys","platform","substring","toLowerCase","getDefaultServiceProjectId","exec","stdout","stderr","configuration","properties","core","project","getProductionProjectId","getFileProjectId","creds","getClient","getGCEProjectId","getCredentials","getCredentialsAsync","client_email","private_key","instance","property","params","recursive","default","stream","getAccessToken","token","getRequestHeaders","url","authorizeRequest","headers","uri","assign","request","getEnv","sign","crypto","id","res","createCrypto","key","method","bytesToSign","encodeBase64StringUtf8","signature","DefaultTransporter"]
}
