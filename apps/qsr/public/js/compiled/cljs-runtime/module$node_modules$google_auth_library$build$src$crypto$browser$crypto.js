shadow$provide.module$node_modules$google_auth_library$build$src$crypto$browser$crypto=function(global,require,module,exports){global=require("module$node_modules$process$browser");"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var base64js=require("module$node_modules$base64_js$index");"undefined"===typeof global&&"undefined"===typeof TextEncoder&&require("module$node_modules$fast_text_encoding$text_min");var BrowserCrypto=function(){if("undefined"===typeof window||void 0===
window.crypto||void 0===window.crypto.subtle)throw Error("SubtleCrypto not found. Make sure it's an https:// website.");};BrowserCrypto.prototype.sha256DigestBase64=function(str){var inputBuffer,outputBuffer;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress)return inputBuffer=(new TextEncoder).encode(str),$jscomp$generator$context.yield(window.crypto.subtle.digest("SHA-256",inputBuffer),2);outputBuffer=$jscomp$generator$context.yieldResult;
return $jscomp$generator$context.return(base64js.fromByteArray(new Uint8Array(outputBuffer)))})};BrowserCrypto.prototype.randomBytesBase64=function(count){count=new Uint8Array(count);window.crypto.getRandomValues(count);return base64js.fromByteArray(count)};BrowserCrypto.padBase64=function(base64){for(;0!==base64.length%4;)base64+="\x3d";return base64};BrowserCrypto.prototype.verify=function(pubkey,data,signature){var algo,dataArray,signatureArray,cryptoKey,result;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==
$jscomp$generator$context.nextAddress)return algo={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},dataArray=(new TextEncoder).encode(data),signatureArray=base64js.toByteArray(BrowserCrypto.padBase64(signature)),$jscomp$generator$context.yield(window.crypto.subtle.importKey("jwk",pubkey,algo,!0,["verify"]),2);if(3!=$jscomp$generator$context.nextAddress)return cryptoKey=$jscomp$generator$context.yieldResult,$jscomp$generator$context.yield(window.crypto.subtle.verify(algo,cryptoKey,signatureArray,dataArray),
3);result=$jscomp$generator$context.yieldResult;return $jscomp$generator$context.return(result)})};BrowserCrypto.prototype.sign=function(privateKey,data){var algo,dataArray,cryptoKey,result;return $jscomp.asyncExecutePromiseGeneratorProgram(function($jscomp$generator$context){if(1==$jscomp$generator$context.nextAddress)return algo={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},dataArray=(new TextEncoder).encode(data),$jscomp$generator$context.yield(window.crypto.subtle.importKey("jwk",privateKey,
algo,!0,["sign"]),2);if(3!=$jscomp$generator$context.nextAddress)return cryptoKey=$jscomp$generator$context.yieldResult,$jscomp$generator$context.yield(window.crypto.subtle.sign(algo,cryptoKey,dataArray),3);result=$jscomp$generator$context.yieldResult;return $jscomp$generator$context.return(base64js.fromByteArray(new Uint8Array(result)))})};BrowserCrypto.prototype.decodeBase64StringUtf8=function(base64){base64=base64js.toByteArray(BrowserCrypto.padBase64(base64));return(new TextDecoder).decode(base64)};
BrowserCrypto.prototype.encodeBase64StringUtf8=function(text){text=(new TextEncoder).encode(text);return base64js.fromByteArray(text)};exports.BrowserCrypto=BrowserCrypto}
//# sourceMappingURL=module$node_modules$google_auth_library$build$src$crypto$browser$crypto.js.map
