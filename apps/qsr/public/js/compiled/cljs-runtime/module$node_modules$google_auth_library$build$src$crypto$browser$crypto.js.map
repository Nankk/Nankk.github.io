{
"version":3,
"file":"module$node_modules$google_auth_library$build$src$crypto$browser$crypto.js",
"lineCount":7,
"mappings":"AAAAA,cAAA,wEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAChIC,MAAAA,CAAUH,OAAA,CAAQ,qCAAR,CACd,aAgBAI,OAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CAGA,KAAMC,SAAWP,OAAA,CAAQ,qCAAR,CAIM,YAAvB,GAAI,MAAOG,OAAX,EAA6D,WAA7D,GAAsC,MAAOK,YAA7C,EACIR,OAAA,CAAQ,iDAAR,CAEJ,KAAMS,cACFC,QAAW,EAAG,CACV,GAAsB,WAAtB,GAAI,MAAOC,OAAX,EACsBC,IAAAA,EADtB;AACID,MAAAE,OADJ,EAE6BD,IAAAA,EAF7B,GAEID,MAAAE,OAAAC,OAFJ,CAGI,KAAUC,MAAJ,CAAU,6DAAV,CAAN,CAJM,CAOR,cAAA,UAAA,mBAAAC,CAAAA,QAAkB,CAACC,GAAD,CAAM,CAK1B,IAAMC,WAAN,CAEMC,YAPoB,OAAA,QAAA,oCAAA,CAAA,QAAA,CAAA,yBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,yBAAA,YAAA,CAOL,MAFfD,YAEe,CAFDE,CAAA,IAAIZ,WAAJY,QAAA,CAAyBH,GAAzB,CAEC,CAAA,yBAAA,MAAA,CAAMN,MAAAE,OAAAC,OAAAO,OAAA,CAA4B,SAA5B,CAAuCH,WAAvC,CAAN,CAAA,CAAA,CAAfC,aAAN,CAAqB,yBAAA,YACrB;MAAA,0BAAA,OAAA,CAAOZ,QAAAe,cAAA,CAAuB,IAAIC,UAAJ,CAAeJ,YAAf,CAAvB,CAAP,CAR0B,CAAA,CAAA,CAU9B,cAAA,UAAA,kBAAAK,CAAAA,QAAiB,CAACC,KAAD,CAAQ,CACfC,KAAAA,CAAQ,IAAIH,UAAJ,CAAeE,KAAf,CACdd,OAAAE,OAAAc,gBAAA,CAA8BD,KAA9B,CACA,OAAOnB,SAAAe,cAAA,CAAuBI,KAAvB,CAHc,CAKlB,cAAA,UAAPE,CAAAA,QAAgB,CAACC,MAAD,CAAS,CAErB,IAAA,CAA6B,CAA7B,GAAOA,MAAAC,OAAP,CAAuB,CAAvB,CAAA,CACID,MAAA,EAAU,MAEd,OAAOA,OALc,CAOnB,cAAA,UAAA,OAAAE,CAAAA,QAAM,CAACC,MAAD,CAASC,IAAT,CAAeC,SAAf,CAA0B,CAClC,IAAMC,IAAN,CAIMC,SAJN,CAKMC,cALN,CAMMC,SANN,CASMC,MAV4B,OAAA,QAAA,oCAAA,CAAA,QAAA,CAAA,yBAAA,CAAA,CAAA,GAAA,CAAA;AAAA,yBAAA,YAAA,CAOhB,MANZJ,KAMY,CANL,CACTK,KAAM,mBADG,CAETC,KAAM,CAAED,KAAM,SAAR,CAFG,CAMK,CAFZJ,SAEY,CAFAhB,CAAA,IAAIZ,WAAJY,QAAA,CAAyBa,IAAzB,CAEA,CADZI,cACY,CADK9B,QAAAmC,YAAA,CAAqBjC,aAAAmB,UAAA,CAAwBM,SAAxB,CAArB,CACL,CAAA,yBAAA,MAAA,CAAMvB,MAAAE,OAAAC,OAAA6B,UAAA,CAA+B,KAA/B,CAAsCX,MAAtC,CAA8CG,IAA9C,CAAoD,CAAA,CAApD,CAA0D,CAAC,QAAD,CAA1D,CAAN,CAAA,CAAA,CAPgB,IAAA,CAAA,EAAA,yBAAA,YAAA,CAUnB,MAHTG,UAGS,CAHG,yBAAA,YAGH,CAAA,yBAAA,MAAA,CAAM3B,MAAAE,OAAAC,OAAAiB,OAAA,CAA4BI,IAA5B,CAAkCG,SAAlC,CAA6CD,cAA7C,CAA6DD,SAA7D,CAAN;AAAA,CAAA,CAATG,OAAN,CAAe,yBAAA,YACf,OAAA,0BAAA,OAAA,CAAOA,MAAP,CAXkC,CAAA,CAAA,CAahC,cAAA,UAAA,KAAAK,CAAAA,QAAI,CAACC,UAAD,CAAaZ,IAAb,CAAmB,CACzB,IAAME,IAAN,CAIMC,SAJN,CAKME,SALN,CAQMC,MATmB,OAAA,QAAA,oCAAA,CAAA,QAAA,CAAA,yBAAA,CAAA,CAAA,GAAA,CAAA,EAAA,yBAAA,YAAA,CAMP,MALZJ,KAKY,CALL,CACTK,KAAM,mBADG,CAETC,KAAM,CAAED,KAAM,SAAR,CAFG,CAKK,CADZJ,SACY,CADAhB,CAAA,IAAIZ,WAAJY,QAAA,CAAyBa,IAAzB,CACA,CAAA,yBAAA,MAAA,CAAMtB,MAAAE,OAAAC,OAAA6B,UAAA,CAA+B,KAA/B,CAAsCE,UAAtC;AAAkDV,IAAlD,CAAwD,CAAA,CAAxD,CAA8D,CAAC,MAAD,CAA9D,CAAN,CAAA,CAAA,CANO,IAAA,CAAA,EAAA,yBAAA,YAAA,CASV,MAHTG,UAGS,CAHG,yBAAA,YAGH,CAAA,yBAAA,MAAA,CAAM3B,MAAAE,OAAAC,OAAA8B,KAAA,CAA0BT,IAA1B,CAAgCG,SAAhC,CAA2CF,SAA3C,CAAN,CAAA,CAAA,CAATG,OAAN,CAAe,yBAAA,YACf,OAAA,0BAAA,OAAA,CAAOhC,QAAAe,cAAA,CAAuB,IAAIC,UAAJ,CAAegB,MAAf,CAAvB,CAAP,CAVyB,CAAA,CAAA,CAY7B,cAAA,UAAA,uBAAAO,CAAAA,QAAsB,CAACjB,MAAD,CAAS,CACrBkB,MAAAA,CAAaxC,QAAAmC,YAAA,CAAqBjC,aAAAmB,UAAA,CAAwBC,MAAxB,CAArB,CAEnB,OADemB,CAAA,IAAIC,WAAJD,QAAAT,CAAyBQ,MAAzBR,CAFY,CAK/B;aAAA,UAAA,uBAAAW,CAAAA,QAAsB,CAACC,IAAD,CAAO,CACnBJ,IAAAA,CAAa3B,CAAA,IAAIZ,WAAJY,QAAA,CAAyB+B,IAAzB,CAEnB,OADe5C,SAAAe,cAAAiB,CAAuBQ,IAAvBR,CAFU,CAMjCrC,QAAAO,cAAA,CAAwBA,aA9F4G;",
"sources":["node_modules/google-auth-library/build/src/crypto/browser/crypto.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$google_auth_library$build$src$crypto$browser$crypto\"] = function(global,require,module,exports) {\nvar process = require('process');\n\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = require(\"base64-js\");\n// Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n    require('fast-text-encoding');\n}\nclass BrowserCrypto {\n    constructor() {\n        if (typeof window === 'undefined' ||\n            window.crypto === undefined ||\n            window.crypto.subtle === undefined) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while (base64.length % 4 !== 0) {\n            base64 += '=';\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceMappingURL=crypto.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","process","Object","defineProperty","value","base64js","TextEncoder","BrowserCrypto","constructor","window","undefined","crypto","subtle","Error","sha256DigestBase64","str","inputBuffer","outputBuffer","encode","digest","fromByteArray","Uint8Array","randomBytesBase64","count","array","getRandomValues","padBase64","base64","length","verify","pubkey","data","signature","algo","dataArray","signatureArray","cryptoKey","result","name","hash","toByteArray","importKey","sign","privateKey","decodeBase64StringUtf8","uint8array","decode","TextDecoder","encodeBase64StringUtf8","text"]
}
