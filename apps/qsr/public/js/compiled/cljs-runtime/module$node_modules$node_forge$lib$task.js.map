{
"version":3,
"file":"module$node_modules$node_forge$lib$task.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/node-forge/lib/task.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$task\"] = function(global,require,module,exports) {\n/**\n * Support for concurrent task management and synchronization in web\n * applications.\n *\n * @author Dave Longley\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2009-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./debug');\nrequire('./log');\nrequire('./util');\n\n// logging category\nvar cat = 'forge.task';\n\n// verbose level\n// 0: off, 1: a little, 2: a whole lot\n// Verbose debug logging is surrounded by a level check to avoid the\n// performance issues with even calling the logging code regardless if it\n// is actually logged.  For performance reasons this should not be set to 2\n// for production use.\n// ex: if(sVL >= 2) forge.log.verbose(....)\nvar sVL = 0;\n\n// track tasks for debugging\nvar sTasks = {};\nvar sNextTaskId = 0;\n// debug access\nforge.debug.set(cat, 'tasks', sTasks);\n\n// a map of task type to task queue\nvar sTaskQueues = {};\n// debug access\nforge.debug.set(cat, 'queues', sTaskQueues);\n\n// name for unnamed tasks\nvar sNoTaskName = '?';\n\n// maximum number of doNext() recursions before a context swap occurs\n// FIXME: might need to tweak this based on the browser\nvar sMaxRecursions = 30;\n\n// time slice for doing tasks before a context swap occurs\n// FIXME: might need to tweak this based on the browser\nvar sTimeSlice = 20;\n\n/**\n * Task states.\n *\n * READY: ready to start processing\n * RUNNING: task or a subtask is running\n * BLOCKED: task is waiting to acquire N permits to continue\n * SLEEPING: task is sleeping for a period of time\n * DONE: task is done\n * ERROR: task has an error\n */\nvar READY = 'ready';\nvar RUNNING = 'running';\nvar BLOCKED = 'blocked';\nvar SLEEPING = 'sleeping';\nvar DONE = 'done';\nvar ERROR = 'error';\n\n/**\n * Task actions.  Used to control state transitions.\n *\n * STOP: stop processing\n * START: start processing tasks\n * BLOCK: block task from continuing until 1 or more permits are released\n * UNBLOCK: release one or more permits\n * SLEEP: sleep for a period of time\n * WAKEUP: wakeup early from SLEEPING state\n * CANCEL: cancel further tasks\n * FAIL: a failure occured\n */\nvar STOP = 'stop';\nvar START = 'start';\nvar BLOCK = 'block';\nvar UNBLOCK = 'unblock';\nvar SLEEP = 'sleep';\nvar WAKEUP = 'wakeup';\nvar CANCEL = 'cancel';\nvar FAIL = 'fail';\n\n/**\n * State transition table.\n *\n * nextState = sStateTable[currentState][action]\n */\nvar sStateTable = {};\n\nsStateTable[READY] = {};\nsStateTable[READY][STOP] = READY;\nsStateTable[READY][START] = RUNNING;\nsStateTable[READY][CANCEL] = DONE;\nsStateTable[READY][FAIL] = ERROR;\n\nsStateTable[RUNNING] = {};\nsStateTable[RUNNING][STOP] = READY;\nsStateTable[RUNNING][START] = RUNNING;\nsStateTable[RUNNING][BLOCK] = BLOCKED;\nsStateTable[RUNNING][UNBLOCK] = RUNNING;\nsStateTable[RUNNING][SLEEP] = SLEEPING;\nsStateTable[RUNNING][WAKEUP] = RUNNING;\nsStateTable[RUNNING][CANCEL] = DONE;\nsStateTable[RUNNING][FAIL] = ERROR;\n\nsStateTable[BLOCKED] = {};\nsStateTable[BLOCKED][STOP] = BLOCKED;\nsStateTable[BLOCKED][START] = BLOCKED;\nsStateTable[BLOCKED][BLOCK] = BLOCKED;\nsStateTable[BLOCKED][UNBLOCK] = BLOCKED;\nsStateTable[BLOCKED][SLEEP] = BLOCKED;\nsStateTable[BLOCKED][WAKEUP] = BLOCKED;\nsStateTable[BLOCKED][CANCEL] = DONE;\nsStateTable[BLOCKED][FAIL] = ERROR;\n\nsStateTable[SLEEPING] = {};\nsStateTable[SLEEPING][STOP] = SLEEPING;\nsStateTable[SLEEPING][START] = SLEEPING;\nsStateTable[SLEEPING][BLOCK] = SLEEPING;\nsStateTable[SLEEPING][UNBLOCK] = SLEEPING;\nsStateTable[SLEEPING][SLEEP] = SLEEPING;\nsStateTable[SLEEPING][WAKEUP] = SLEEPING;\nsStateTable[SLEEPING][CANCEL] = DONE;\nsStateTable[SLEEPING][FAIL] = ERROR;\n\nsStateTable[DONE] = {};\nsStateTable[DONE][STOP] = DONE;\nsStateTable[DONE][START] = DONE;\nsStateTable[DONE][BLOCK] = DONE;\nsStateTable[DONE][UNBLOCK] = DONE;\nsStateTable[DONE][SLEEP] = DONE;\nsStateTable[DONE][WAKEUP] = DONE;\nsStateTable[DONE][CANCEL] = DONE;\nsStateTable[DONE][FAIL] = ERROR;\n\nsStateTable[ERROR] = {};\nsStateTable[ERROR][STOP] = ERROR;\nsStateTable[ERROR][START] = ERROR;\nsStateTable[ERROR][BLOCK] = ERROR;\nsStateTable[ERROR][UNBLOCK] = ERROR;\nsStateTable[ERROR][SLEEP] = ERROR;\nsStateTable[ERROR][WAKEUP] = ERROR;\nsStateTable[ERROR][CANCEL] = ERROR;\nsStateTable[ERROR][FAIL] = ERROR;\n\n/**\n * Creates a new task.\n *\n * @param options options for this task\n *   run: the run function for the task (required)\n *   name: the run function for the task (optional)\n *   parent: parent of this task (optional)\n *\n * @return the empty task.\n */\nvar Task = function(options) {\n  // task id\n  this.id = -1;\n\n  // task name\n  this.name = options.name || sNoTaskName;\n\n  // task has no parent\n  this.parent = options.parent || null;\n\n  // save run function\n  this.run = options.run;\n\n  // create a queue of subtasks to run\n  this.subtasks = [];\n\n  // error flag\n  this.error = false;\n\n  // state of the task\n  this.state = READY;\n\n  // number of times the task has been blocked (also the number\n  // of permits needed to be released to continue running)\n  this.blocks = 0;\n\n  // timeout id when sleeping\n  this.timeoutId = null;\n\n  // no swap time yet\n  this.swapTime = null;\n\n  // no user data\n  this.userData = null;\n\n  // initialize task\n  // FIXME: deal with overflow\n  this.id = sNextTaskId++;\n  sTasks[this.id] = this;\n  if(sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] init', this.id, this.name, this);\n  }\n};\n\n/**\n * Logs debug information on this task and the system state.\n */\nTask.prototype.debug = function(msg) {\n  msg = msg || '';\n  forge.log.debug(cat, msg,\n    '[%s][%s] task:', this.id, this.name, this,\n    'subtasks:', this.subtasks.length,\n    'queue:', sTaskQueues);\n};\n\n/**\n * Adds a subtask to run after task.doNext() or task.fail() is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun a function to run that takes the current task as\n *          its first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\nTask.prototype.next = function(name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if(typeof(name) === 'function') {\n    subrun = name;\n\n    // inherit parent's name\n    name = this.name;\n  }\n  // create subtask, set parent to this task, propagate callbacks\n  var subtask = new Task({\n    run: subrun,\n    name: name,\n    parent: this\n  });\n  // start subtasks running\n  subtask.state = RUNNING;\n  subtask.type = this.type;\n  subtask.successCallback = this.successCallback || null;\n  subtask.failureCallback = this.failureCallback || null;\n\n  // queue a new subtask\n  this.subtasks.push(subtask);\n\n  return this;\n};\n\n/**\n * Adds subtasks to run in parallel after task.doNext() or task.fail()\n * is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun functions to run that take the current task as\n *          their first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\nTask.prototype.parallel = function(name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if(forge.util.isArray(name)) {\n    subrun = name;\n\n    // inherit parent's name\n    name = this.name;\n  }\n  // Wrap parallel tasks in a regular task so they are started at the\n  // proper time.\n  return this.next(name, function(task) {\n    // block waiting for subtasks\n    var ptask = task;\n    ptask.block(subrun.length);\n\n    // we pass the iterator from the loop below as a parameter\n    // to a function because it is otherwise included in the\n    // closure and changes as the loop changes -- causing i\n    // to always be set to its highest value\n    var startParallelTask = function(pname, pi) {\n      forge.task.start({\n        type: pname,\n        run: function(task) {\n           subrun[pi](task);\n        },\n        success: function(task) {\n           ptask.unblock();\n        },\n        failure: function(task) {\n           ptask.unblock();\n        }\n      });\n    };\n\n    for(var i = 0; i < subrun.length; i++) {\n      // Type must be unique so task starts in parallel:\n      //    name + private string + task id + sub-task index\n      // start tasks in parallel and unblock when the finish\n      var pname = name + '__parallel-' + task.id + '-' + i;\n      var pi = i;\n      startParallelTask(pname, pi);\n    }\n  });\n};\n\n/**\n * Stops a running task.\n */\nTask.prototype.stop = function() {\n  this.state = sStateTable[this.state][STOP];\n};\n\n/**\n * Starts running a task.\n */\nTask.prototype.start = function() {\n  this.error = false;\n  this.state = sStateTable[this.state][START];\n\n  // try to restart\n  if(this.state === RUNNING) {\n    this.start = new Date();\n    this.run(this);\n    runNext(this, 0);\n  }\n};\n\n/**\n * Blocks a task until it one or more permits have been released. The\n * task will not resume until the requested number of permits have\n * been released with call(s) to unblock().\n *\n * @param n number of permits to wait for(default: 1).\n */\nTask.prototype.block = function(n) {\n  n = typeof(n) === 'undefined' ? 1 : n;\n  this.blocks += n;\n  if(this.blocks > 0) {\n    this.state = sStateTable[this.state][BLOCK];\n  }\n};\n\n/**\n * Releases a permit to unblock a task. If a task was blocked by\n * requesting N permits via block(), then it will only continue\n * running once enough permits have been released via unblock() calls.\n *\n * If multiple processes need to synchronize with a single task then\n * use a condition variable (see forge.task.createCondition). It is\n * an error to unblock a task more times than it has been blocked.\n *\n * @param n number of permits to release (default: 1).\n *\n * @return the current block count (task is unblocked when count is 0)\n */\nTask.prototype.unblock = function(n) {\n  n = typeof(n) === 'undefined' ? 1 : n;\n  this.blocks -= n;\n  if(this.blocks === 0 && this.state !== DONE) {\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n  return this.blocks;\n};\n\n/**\n * Sleep for a period of time before resuming tasks.\n *\n * @param n number of milliseconds to sleep (default: 0).\n */\nTask.prototype.sleep = function(n) {\n  n = typeof(n) === 'undefined' ? 0 : n;\n  this.state = sStateTable[this.state][SLEEP];\n  var self = this;\n  this.timeoutId = setTimeout(function() {\n    self.timeoutId = null;\n    self.state = RUNNING;\n    runNext(self, 0);\n  }, n);\n};\n\n/**\n * Waits on a condition variable until notified. The next task will\n * not be scheduled until notification. A condition variable can be\n * created with forge.task.createCondition().\n *\n * Once cond.notify() is called, the task will continue.\n *\n * @param cond the condition variable to wait on.\n */\nTask.prototype.wait = function(cond) {\n  cond.wait(this);\n};\n\n/**\n * If sleeping, wakeup and continue running tasks.\n */\nTask.prototype.wakeup = function() {\n  if(this.state === SLEEPING) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n};\n\n/**\n * Cancel all remaining subtasks of this task.\n */\nTask.prototype.cancel = function() {\n  this.state = sStateTable[this.state][CANCEL];\n  // remove permits needed\n  this.permitsNeeded = 0;\n  // cancel timeouts\n  if(this.timeoutId !== null) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n  }\n  // remove subtasks\n  this.subtasks = [];\n};\n\n/**\n * Finishes this task with failure and sets error flag. The entire\n * task will be aborted unless the next task that should execute\n * is passed as a parameter. This allows levels of subtasks to be\n * skipped. For instance, to abort only this tasks's subtasks, then\n * call fail(task.parent). To abort this task's subtasks and its\n * parent's subtasks, call fail(task.parent.parent). To abort\n * all tasks and simply call the task callback, call fail() or\n * fail(null).\n *\n * The task callback (success or failure) will always, eventually, be\n * called.\n *\n * @param next the task to continue at, or null to abort entirely.\n */\nTask.prototype.fail = function(next) {\n  // set error flag\n  this.error = true;\n\n  // finish task\n  finish(this, true);\n\n  if(next) {\n    // propagate task info\n    next.error = this.error;\n    next.swapTime = this.swapTime;\n    next.userData = this.userData;\n\n    // do next task as specified\n    runNext(next, 0);\n  } else {\n    if(this.parent !== null) {\n      // finish root task (ensures it is removed from task queue)\n      var parent = this.parent;\n      while(parent.parent !== null) {\n        // propagate task info\n        parent.error = this.error;\n        parent.swapTime = this.swapTime;\n        parent.userData = this.userData;\n        parent = parent.parent;\n      }\n      finish(parent, true);\n    }\n\n    // call failure callback if one exists\n    if(this.failureCallback) {\n      this.failureCallback(this);\n    }\n  }\n};\n\n/**\n * Asynchronously start a task.\n *\n * @param task the task to start.\n */\nvar start = function(task) {\n  task.error = false;\n  task.state = sStateTable[task.state][START];\n  setTimeout(function() {\n    if(task.state === RUNNING) {\n      task.swapTime = +new Date();\n      task.run(task);\n      runNext(task, 0);\n    }\n  }, 0);\n};\n\n/**\n * Run the next subtask or finish this task.\n *\n * @param task the task to process.\n * @param recurse the recursion count.\n */\nvar runNext = function(task, recurse) {\n  // get time since last context swap (ms), if enough time has passed set\n  // swap to true to indicate that doNext was performed asynchronously\n  // also, if recurse is too high do asynchronously\n  var swap =\n    (recurse > sMaxRecursions) ||\n    (+new Date() - task.swapTime) > sTimeSlice;\n\n  var doNext = function(recurse) {\n    recurse++;\n    if(task.state === RUNNING) {\n      if(swap) {\n        // update swap time\n        task.swapTime = +new Date();\n      }\n\n      if(task.subtasks.length > 0) {\n        // run next subtask\n        var subtask = task.subtasks.shift();\n        subtask.error = task.error;\n        subtask.swapTime = task.swapTime;\n        subtask.userData = task.userData;\n        subtask.run(subtask);\n        if(!subtask.error) {\n           runNext(subtask, recurse);\n        }\n      } else {\n        finish(task);\n\n        if(!task.error) {\n          // chain back up and run parent\n          if(task.parent !== null) {\n            // propagate task info\n            task.parent.error = task.error;\n            task.parent.swapTime = task.swapTime;\n            task.parent.userData = task.userData;\n\n            // no subtasks left, call run next subtask on parent\n            runNext(task.parent, recurse);\n          }\n        }\n      }\n    }\n  };\n\n  if(swap) {\n    // we're swapping, so run asynchronously\n    setTimeout(doNext, 0);\n  } else {\n    // not swapping, so run synchronously\n    doNext(recurse);\n  }\n};\n\n/**\n * Finishes a task and looks for the next task in the queue to start.\n *\n * @param task the task to finish.\n * @param suppressCallbacks true to suppress callbacks.\n */\nvar finish = function(task, suppressCallbacks) {\n  // subtask is now done\n  task.state = DONE;\n\n  delete sTasks[task.id];\n  if(sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] finish',\n      task.id, task.name, task);\n  }\n\n  // only do queue processing for root tasks\n  if(task.parent === null) {\n    // report error if queue is missing\n    if(!(task.type in sTaskQueues)) {\n      forge.log.error(cat,\n        '[%s][%s] task queue missing [%s]',\n        task.id, task.name, task.type);\n    } else if(sTaskQueues[task.type].length === 0) {\n      // report error if queue is empty\n      forge.log.error(cat,\n        '[%s][%s] task queue empty [%s]',\n        task.id, task.name, task.type);\n    } else if(sTaskQueues[task.type][0] !== task) {\n      // report error if this task isn't the first in the queue\n      forge.log.error(cat,\n        '[%s][%s] task not first in queue [%s]',\n        task.id, task.name, task.type);\n    } else {\n      // remove ourselves from the queue\n      sTaskQueues[task.type].shift();\n      // clean up queue if it is empty\n      if(sTaskQueues[task.type].length === 0) {\n        if(sVL >= 1) {\n          forge.log.verbose(cat, '[%s][%s] delete queue [%s]',\n            task.id, task.name, task.type);\n        }\n        /* Note: Only a task can delete a queue of its own type. This\n         is used as a way to synchronize tasks. If a queue for a certain\n         task type exists, then a task of that type is running.\n         */\n        delete sTaskQueues[task.type];\n      } else {\n        // dequeue the next task and start it\n        if(sVL >= 1) {\n          forge.log.verbose(cat,\n            '[%s][%s] queue start next [%s] remain:%s',\n            task.id, task.name, task.type,\n            sTaskQueues[task.type].length);\n        }\n        sTaskQueues[task.type][0].start();\n      }\n    }\n\n    if(!suppressCallbacks) {\n      // call final callback if one exists\n      if(task.error && task.failureCallback) {\n        task.failureCallback(task);\n      } else if(!task.error && task.successCallback) {\n        task.successCallback(task);\n      }\n    }\n  }\n};\n\n/* Tasks API */\nmodule.exports = forge.task = forge.task || {};\n\n/**\n * Starts a new task that will run the passed function asynchronously.\n *\n * In order to finish the task, either task.doNext() or task.fail()\n * *must* be called.\n *\n * The task must have a type (a string identifier) that can be used to\n * synchronize it with other tasks of the same type. That type can also\n * be used to cancel tasks that haven't started yet.\n *\n * To start a task, the following object must be provided as a parameter\n * (each function takes a task object as its first parameter):\n *\n * {\n *   type: the type of task.\n *   run: the function to run to execute the task.\n *   success: a callback to call when the task succeeds (optional).\n *   failure: a callback to call when the task fails (optional).\n * }\n *\n * @param options the object as described above.\n */\nforge.task.start = function(options) {\n  // create a new task\n  var task = new Task({\n    run: options.run,\n    name: options.name || sNoTaskName\n  });\n  task.type = options.type;\n  task.successCallback = options.success || null;\n  task.failureCallback = options.failure || null;\n\n  // append the task onto the appropriate queue\n  if(!(task.type in sTaskQueues)) {\n    if(sVL >= 1) {\n      forge.log.verbose(cat, '[%s][%s] create queue [%s]',\n        task.id, task.name, task.type);\n    }\n    // create the queue with the new task\n    sTaskQueues[task.type] = [task];\n    start(task);\n  } else {\n    // push the task onto the queue, it will be run after a task\n    // with the same type completes\n    sTaskQueues[options.type].push(task);\n  }\n};\n\n/**\n * Cancels all tasks of the given type that haven't started yet.\n *\n * @param type the type of task to cancel.\n */\nforge.task.cancel = function(type) {\n  // find the task queue\n  if(type in sTaskQueues) {\n    // empty all but the current task from the queue\n    sTaskQueues[type] = [sTaskQueues[type][0]];\n  }\n};\n\n/**\n * Creates a condition variable to synchronize tasks. To make a task wait\n * on the condition variable, call task.wait(condition). To notify all\n * tasks that are waiting, call condition.notify().\n *\n * @return the condition variable.\n */\nforge.task.createCondition = function() {\n  var cond = {\n    // all tasks that are blocked\n    tasks: {}\n  };\n\n  /**\n   * Causes the given task to block until notify is called. If the task\n   * is already waiting on this condition then this is a no-op.\n   *\n   * @param task the task to cause to wait.\n   */\n  cond.wait = function(task) {\n    // only block once\n    if(!(task.id in cond.tasks)) {\n       task.block();\n       cond.tasks[task.id] = task;\n    }\n  };\n\n  /**\n   * Notifies all waiting tasks to wake up.\n   */\n  cond.notify = function() {\n    // since unblock() will run the next task from here, make sure to\n    // clear the condition's blocked task list before unblocking\n    var tmp = cond.tasks;\n    cond.tasks = {};\n    for(var id in tmp) {\n      tmp[id].unblock();\n    }\n  };\n\n  return cond;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","forge","sTasks","sNextTaskId","debug","set","cat","sTaskQueues","sStateTable","READY","RUNNING","DONE","ERROR","BLOCKED","SLEEPING","Task","options","id","name","sNoTaskName","parent","run","subtasks","error","state","blocks","userData","swapTime","timeoutId","prototype","Task.prototype.debug","msg","log","length","next","Task.prototype.next","subrun","subtask","type","successCallback","failureCallback","push","parallel","Task.prototype.parallel","util","isArray","task","block","startParallelTask","pname","pi","start","success","unblock","failure","i","stop","Task.prototype.stop","Task.prototype.start","Date","runNext","Task.prototype.block","n","Task.prototype.unblock","sleep","Task.prototype.sleep","self","setTimeout","wait","Task.prototype.wait","cond","wakeup","Task.prototype.wakeup","cancelTimeout","cancel","Task.prototype.cancel","permitsNeeded","fail","Task.prototype.fail","finish","recurse","swap","sMaxRecursions","sTimeSlice","doNext","shift","suppressCallbacks","forge.task.start","forge.task.cancel","createCondition","forge.task.createCondition","tasks","cond.wait","cond.notify","tmp"]
}
