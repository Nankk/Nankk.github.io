{
"version":3,
"file":"module$node_modules$node_forge$lib$hmac.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/node-forge/lib/hmac.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$hmac\"] = function(global,require,module,exports) {\n/**\n * Hash-based Message Authentication Code implementation. Requires a message\n * digest object that can be obtained, for example, from forge.md.sha1 or\n * forge.md.md5.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\n/* HMAC API */\nvar hmac = module.exports = forge.hmac = forge.hmac || {};\n\n/**\n * Creates an HMAC object that uses the given message digest object.\n *\n * @return an HMAC object.\n */\nhmac.create = function() {\n  // the hmac key to use\n  var _key = null;\n\n  // the message digest to use\n  var _md = null;\n\n  // the inner padding\n  var _ipadding = null;\n\n  // the outer padding\n  var _opadding = null;\n\n  // hmac context\n  var ctx = {};\n\n  /**\n   * Starts or restarts the HMAC with the given key and message digest.\n   *\n   * @param md the message digest to use, null to reuse the previous one,\n   *           a string to use builtin 'sha1', 'md5', 'sha256'.\n   * @param key the key to use as a string, array of bytes, byte buffer,\n   *           or null to reuse the previous key.\n   */\n  ctx.start = function(md, key) {\n    if(md !== null) {\n      if(typeof md === 'string') {\n        // create builtin message digest\n        md = md.toLowerCase();\n        if(md in forge.md.algorithms) {\n          _md = forge.md.algorithms[md].create();\n        } else {\n          throw new Error('Unknown hash algorithm \"' + md + '\"');\n        }\n      } else {\n        // store message digest\n        _md = md;\n      }\n    }\n\n    if(key === null) {\n      // reuse previous key\n      key = _key;\n    } else {\n      if(typeof key === 'string') {\n        // convert string into byte buffer\n        key = forge.util.createBuffer(key);\n      } else if(forge.util.isArray(key)) {\n        // convert byte array into byte buffer\n        var tmp = key;\n        key = forge.util.createBuffer();\n        for(var i = 0; i < tmp.length; ++i) {\n          key.putByte(tmp[i]);\n        }\n      }\n\n      // if key is longer than blocksize, hash it\n      var keylen = key.length();\n      if(keylen > _md.blockLength) {\n        _md.start();\n        _md.update(key.bytes());\n        key = _md.digest();\n      }\n\n      // mix key into inner and outer padding\n      // ipadding = [0x36 * blocksize] ^ key\n      // opadding = [0x5C * blocksize] ^ key\n      _ipadding = forge.util.createBuffer();\n      _opadding = forge.util.createBuffer();\n      keylen = key.length();\n      for(var i = 0; i < keylen; ++i) {\n        var tmp = key.at(i);\n        _ipadding.putByte(0x36 ^ tmp);\n        _opadding.putByte(0x5C ^ tmp);\n      }\n\n      // if key is shorter than blocksize, add additional padding\n      if(keylen < _md.blockLength) {\n        var tmp = _md.blockLength - keylen;\n        for(var i = 0; i < tmp; ++i) {\n          _ipadding.putByte(0x36);\n          _opadding.putByte(0x5C);\n        }\n      }\n      _key = key;\n      _ipadding = _ipadding.bytes();\n      _opadding = _opadding.bytes();\n    }\n\n    // digest is done like so: hash(opadding | hash(ipadding | message))\n\n    // prepare to do inner hash\n    // hash(ipadding | message)\n    _md.start();\n    _md.update(_ipadding);\n  };\n\n  /**\n   * Updates the HMAC with the given message bytes.\n   *\n   * @param bytes the bytes to update with.\n   */\n  ctx.update = function(bytes) {\n    _md.update(bytes);\n  };\n\n  /**\n   * Produces the Message Authentication Code (MAC).\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  ctx.getMac = function() {\n    // digest is done like so: hash(opadding | hash(ipadding | message))\n    // here we do the outer hashing\n    var inner = _md.digest().bytes();\n    _md.start();\n    _md.update(_opadding);\n    _md.update(inner);\n    return _md.digest();\n  };\n  // alias for getMac\n  ctx.digest = ctx.getMac;\n\n  return ctx;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","forge","create","hmac","hmac.create","_md","_ipadding","_opadding","ctx","ctx.start","md","key","toLowerCase","algorithms","Error","util","createBuffer","isArray","tmp","i","length","putByte","keylen","blockLength","start","update","bytes","digest","at","ctx.update","ctx.getMac","inner","getMac"]
}
