{
"version":3,
"file":"module$node_modules$node_forge$lib$pem.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/node-forge/lib/pem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$pem\"] = function(global,require,module,exports) {\n/**\n * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.\n *\n * See: RFC 1421.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n *\n * A Forge PEM object has the following fields:\n *\n * type: identifies the type of message (eg: \"RSA PRIVATE KEY\").\n *\n * procType: identifies the type of processing performed on the message,\n *   it has two subfields: version and type, eg: 4,ENCRYPTED.\n *\n * contentDomain: identifies the type of content in the message, typically\n *   only uses the value: \"RFC822\".\n *\n * dekInfo: identifies the message encryption algorithm and mode and includes\n *   any parameters for the algorithm, it has two subfields: algorithm and\n *   parameters, eg: DES-CBC,F8143EDE5960C597.\n *\n * headers: contains all other PEM encapsulated headers -- where order is\n *   significant (for pairing data like recipient ID + key info).\n *\n * body: the binary-encoded body.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n// shortcut for pem API\nvar pem = module.exports = forge.pem = forge.pem || {};\n\n/**\n * Encodes (serializes) the given PEM object.\n *\n * @param msg the PEM message object to encode.\n * @param options the options to use:\n *          maxline the maximum characters per line for the body, (default: 64).\n *\n * @return the PEM-formatted string.\n */\npem.encode = function(msg, options) {\n  options = options || {};\n  var rval = '-----BEGIN ' + msg.type + '-----\\r\\n';\n\n  // encode special headers\n  var header;\n  if(msg.procType) {\n    header = {\n      name: 'Proc-Type',\n      values: [String(msg.procType.version), msg.procType.type]\n    };\n    rval += foldHeader(header);\n  }\n  if(msg.contentDomain) {\n    header = {name: 'Content-Domain', values: [msg.contentDomain]};\n    rval += foldHeader(header);\n  }\n  if(msg.dekInfo) {\n    header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};\n    if(msg.dekInfo.parameters) {\n      header.values.push(msg.dekInfo.parameters);\n    }\n    rval += foldHeader(header);\n  }\n\n  if(msg.headers) {\n    // encode all other headers\n    for(var i = 0; i < msg.headers.length; ++i) {\n      rval += foldHeader(msg.headers[i]);\n    }\n  }\n\n  // terminate header\n  if(msg.procType) {\n    rval += '\\r\\n';\n  }\n\n  // add body\n  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\\r\\n';\n\n  rval += '-----END ' + msg.type + '-----\\r\\n';\n  return rval;\n};\n\n/**\n * Decodes (deserializes) all PEM messages found in the given string.\n *\n * @param str the PEM-formatted string to decode.\n *\n * @return the PEM message objects in an array.\n */\npem.decode = function(str) {\n  var rval = [];\n\n  // split string into PEM messages (be lenient w/EOF on BEGIN line)\n  var rMessage = /\\s*-----BEGIN ([A-Z0-9- ]+)-----\\r?\\n?([\\x21-\\x7e\\s]+?(?:\\r?\\n\\r?\\n))?([:A-Za-z0-9+\\/=\\s]+?)-----END \\1-----/g;\n  var rHeader = /([\\x21-\\x7e]+):\\s*([\\x21-\\x7e\\s^:]+)/;\n  var rCRLF = /\\r?\\n/;\n  var match;\n  while(true) {\n    match = rMessage.exec(str);\n    if(!match) {\n      break;\n    }\n\n    var msg = {\n      type: match[1],\n      procType: null,\n      contentDomain: null,\n      dekInfo: null,\n      headers: [],\n      body: forge.util.decode64(match[3])\n    };\n    rval.push(msg);\n\n    // no headers\n    if(!match[2]) {\n      continue;\n    }\n\n    // parse headers\n    var lines = match[2].split(rCRLF);\n    var li = 0;\n    while(match && li < lines.length) {\n      // get line, trim any rhs whitespace\n      var line = lines[li].replace(/\\s+$/, '');\n\n      // RFC2822 unfold any following folded lines\n      for(var nl = li + 1; nl < lines.length; ++nl) {\n        var next = lines[nl];\n        if(!/\\s/.test(next[0])) {\n          break;\n        }\n        line += next;\n        li = nl;\n      }\n\n      // parse header\n      match = line.match(rHeader);\n      if(match) {\n        var header = {name: match[1], values: []};\n        var values = match[2].split(',');\n        for(var vi = 0; vi < values.length; ++vi) {\n          header.values.push(ltrim(values[vi]));\n        }\n\n        // Proc-Type must be the first header\n        if(!msg.procType) {\n          if(header.name !== 'Proc-Type') {\n            throw new Error('Invalid PEM formatted message. The first ' +\n              'encapsulated header must be \"Proc-Type\".');\n          } else if(header.values.length !== 2) {\n            throw new Error('Invalid PEM formatted message. The \"Proc-Type\" ' +\n              'header must have two subfields.');\n          }\n          msg.procType = {version: values[0], type: values[1]};\n        } else if(!msg.contentDomain && header.name === 'Content-Domain') {\n          // special-case Content-Domain\n          msg.contentDomain = values[0] || '';\n        } else if(!msg.dekInfo && header.name === 'DEK-Info') {\n          // special-case DEK-Info\n          if(header.values.length === 0) {\n            throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' +\n              'header must have at least one subfield.');\n          }\n          msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};\n        } else {\n          msg.headers.push(header);\n        }\n      }\n\n      ++li;\n    }\n\n    if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {\n      throw new Error('Invalid PEM formatted message. The \"DEK-Info\" ' +\n        'header must be present if \"Proc-Type\" is \"ENCRYPTED\".');\n    }\n  }\n\n  if(rval.length === 0) {\n    throw new Error('Invalid PEM formatted message.');\n  }\n\n  return rval;\n};\n\nfunction foldHeader(header) {\n  var rval = header.name + ': ';\n\n  // ensure values with CRLF are folded\n  var values = [];\n  var insertSpace = function(match, $1) {\n    return ' ' + $1;\n  };\n  for(var i = 0; i < header.values.length; ++i) {\n    values.push(header.values[i].replace(/^(\\S+\\r\\n)/, insertSpace));\n  }\n  rval += values.join(',') + '\\r\\n';\n\n  // do folding\n  var length = 0;\n  var candidate = -1;\n  for(var i = 0; i < rval.length; ++i, ++length) {\n    if(length > 65 && candidate !== -1) {\n      var insert = rval[candidate];\n      if(insert === ',') {\n        ++candidate;\n        rval = rval.substr(0, candidate) + '\\r\\n ' + rval.substr(candidate);\n      } else {\n        rval = rval.substr(0, candidate) +\n          '\\r\\n' + insert + rval.substr(candidate + 1);\n      }\n      length = (i - candidate - 1);\n      candidate = -1;\n      ++i;\n    } else if(rval[i] === ' ' || rval[i] === '\\t' || rval[i] === ',') {\n      candidate = i;\n    }\n  }\n\n  return rval;\n}\n\nfunction ltrim(str) {\n  return str.replace(/^\\s+/, '');\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","foldHeader","header","rval","name","values","insertSpace","match","$1","i","length","push","replace","join","candidate","insert","substr","forge","pem","encode","pem.encode","msg","options","type","procType","String","version","contentDomain","dekInfo","algorithm","parameters","headers","util","encode64","body","maxline","decode","pem.decode","str","rMessage","rHeader","rCRLF","exec","decode64","lines","split","li","line","nl","next","test","vi","Error"]
}
