{
"version":3,
"file":"module$node_modules$node_forge$lib$kem.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/node-forge/lib/kem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$kem\"] = function(global,require,module,exports) {\n/**\n * Javascript implementation of RSA-KEM.\n *\n * @author Lautaro Cozzani Rodriguez\n * @author Dave Longley\n *\n * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./jsbn');\n\nmodule.exports = forge.kem = forge.kem || {};\n\nvar BigInteger = forge.jsbn.BigInteger;\n\n/**\n * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.\n */\nforge.kem.rsa = {};\n\n/**\n * Creates an RSA KEM API object for generating a secret asymmetric key.\n *\n * The symmetric key may be generated via a call to 'encrypt', which will\n * produce a ciphertext to be transmitted to the recipient and a key to be\n * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which\n * will produce the same secret key for the recipient to use to decrypt a\n * message that was encrypted with the secret key.\n *\n * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).\n * @param options the options to use.\n *          [prng] a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n */\nforge.kem.rsa.create = function(kdf, options) {\n  options = options || {};\n  var prng = options.prng || forge.random;\n\n  var kem = {};\n\n  /**\n   * Generates a secret key and its encapsulation.\n   *\n   * @param publicKey the RSA public key to encrypt with.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return an object with:\n   *   encapsulation: the ciphertext for generating the secret key, as a\n   *     binary-encoded string of bytes.\n   *   key: the secret key to use for encrypting a message.\n   */\n  kem.encrypt = function(publicKey, keyLength) {\n    // generate a random r where 1 < r < n\n    var byteLength = Math.ceil(publicKey.n.bitLength() / 8);\n    var r;\n    do {\n      r = new BigInteger(\n        forge.util.bytesToHex(prng.getBytesSync(byteLength)),\n        16).mod(publicKey.n);\n    } while(r.compareTo(BigInteger.ONE) <= 0);\n\n    // prepend r with zeros\n    r = forge.util.hexToBytes(r.toString(16));\n    var zeros = byteLength - r.length;\n    if(zeros > 0) {\n      r = forge.util.fillString(String.fromCharCode(0), zeros) + r;\n    }\n\n    // encrypt the random\n    var encapsulation = publicKey.encrypt(r, 'NONE');\n\n    // generate the secret key\n    var key = kdf.generate(r, keyLength);\n\n    return {encapsulation: encapsulation, key: key};\n  };\n\n  /**\n   * Decrypts an encapsulated secret key.\n   *\n   * @param privateKey the RSA private key to decrypt with.\n   * @param encapsulation the ciphertext for generating the secret key, as\n   *          a binary-encoded string of bytes.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return the secret key as a binary-encoded string of bytes.\n   */\n  kem.decrypt = function(privateKey, encapsulation, keyLength) {\n    // decrypt the encapsulation and generate the secret key\n    var r = privateKey.decrypt(encapsulation, 'NONE');\n    return kdf.generate(r, keyLength);\n  };\n\n  return kem;\n};\n\n// TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?\n\n/**\n * Creates a key derivation API object that implements KDF1 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF1 API object.\n */\nforge.kem.kdf1 = function(md, digestLength) {\n  _createKDF(this, md, 0, digestLength || md.digestLength);\n};\n\n/**\n * Creates a key derivation API object that implements KDF2 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF2 API object.\n */\nforge.kem.kdf2 = function(md, digestLength) {\n  _createKDF(this, md, 1, digestLength || md.digestLength);\n};\n\n/**\n * Creates a KDF1 or KDF2 API object.\n *\n * @param md the hash API to use.\n * @param counterStart the starting index for the counter.\n * @param digestLength the digest length to use.\n *\n * @return the KDF API object.\n */\nfunction _createKDF(kdf, md, counterStart, digestLength) {\n  /**\n   * Generate a key of the specified length.\n   *\n   * @param x the binary-encoded byte string to generate a key from.\n   * @param length the number of bytes to generate (the size of the key).\n   *\n   * @return the key as a binary-encoded string.\n   */\n  kdf.generate = function(x, length) {\n    var key = new forge.util.ByteBuffer();\n\n    // run counter from counterStart to ceil(length / Hash.len)\n    var k = Math.ceil(length / digestLength) + counterStart;\n\n    var c = new forge.util.ByteBuffer();\n    for(var i = counterStart; i < k; ++i) {\n      // I2OSP(i, 4): convert counter to an octet string of 4 octets\n      c.putInt32(i);\n\n      // digest 'x' and the counter and add the result to the key\n      md.start();\n      md.update(x + c.getBytes());\n      var hash = md.digest();\n      key.putBytes(hash.getBytes(digestLength));\n    }\n\n    // truncate to the correct key length\n    key.truncate(key.length() - length);\n    return key.getBytes();\n  };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","_createKDF","kdf","md","counterStart","digestLength","generate","kdf.generate","x","length","key","forge","util","ByteBuffer","k","Math","ceil","c","i","putInt32","start","update","getBytes","hash","digest","putBytes","truncate","kem","BigInteger","jsbn","rsa","create","forge.kem.rsa.create","options","prng","random","kem.encrypt","publicKey","keyLength","byteLength","n","bitLength","r","mod","bytesToHex","getBytesSync","compareTo","ONE","hexToBytes","toString","zeros","fillString","String","fromCharCode","encapsulation","encrypt","kem.decrypt","privateKey","decrypt","kdf1","forge.kem.kdf1","kdf2","forge.kem.kdf2"]
}
