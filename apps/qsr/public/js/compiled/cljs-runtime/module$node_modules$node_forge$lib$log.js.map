{
"version":3,
"file":"module$node_modules$node_forge$lib$log.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/node-forge/lib/log.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$log\"] = function(global,require,module,exports) {\n/**\n * Cross-browser support for logging in a web application.\n *\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2008-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\n/* LOG API */\nmodule.exports = forge.log = forge.log || {};\n\n/**\n * Application logging system.\n *\n * Each logger level available as it's own function of the form:\n *   forge.log.level(category, args...)\n * The category is an arbitrary string, and the args are the same as\n * Firebug's console.log API. By default the call will be output as:\n *   'LEVEL [category] <args[0]>, args[1], ...'\n * This enables proper % formatting via the first argument.\n * Each category is enabled by default but can be enabled or disabled with\n * the setCategoryEnabled() function.\n */\n// list of known levels\nforge.log.levels = [\n  'none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];\n// info on the levels indexed by name:\n//   index: level index\n//   name: uppercased display name\nvar sLevelInfo = {};\n// list of loggers\nvar sLoggers = [];\n/**\n * Standard console logger. If no console support is enabled this will\n * remain null. Check before using.\n */\nvar sConsoleLogger = null;\n\n// logger flags\n/**\n * Lock the level at the current value. Used in cases where user config may\n * set the level such that only critical messages are seen but more verbose\n * messages are needed for debugging or other purposes.\n */\nforge.log.LEVEL_LOCKED = (1 << 1);\n/**\n * Always call log function. By default, the logging system will check the\n * message level against logger.level before calling the log function. This\n * flag allows the function to do its own check.\n */\nforge.log.NO_LEVEL_CHECK = (1 << 2);\n/**\n * Perform message interpolation with the passed arguments. \"%\" style\n * fields in log messages will be replaced by arguments as needed. Some\n * loggers, such as Firebug, may do this automatically. The original log\n * message will be available as 'message' and the interpolated version will\n * be available as 'fullMessage'.\n */\nforge.log.INTERPOLATE = (1 << 3);\n\n// setup each log level\nfor(var i = 0; i < forge.log.levels.length; ++i) {\n  var level = forge.log.levels[i];\n  sLevelInfo[level] = {\n    index: i,\n    name: level.toUpperCase()\n  };\n}\n\n/**\n * Message logger. Will dispatch a message to registered loggers as needed.\n *\n * @param message message object\n */\nforge.log.logMessage = function(message) {\n  var messageLevelIndex = sLevelInfo[message.level].index;\n  for(var i = 0; i < sLoggers.length; ++i) {\n    var logger = sLoggers[i];\n    if(logger.flags & forge.log.NO_LEVEL_CHECK) {\n      logger.f(message);\n    } else {\n      // get logger level\n      var loggerLevelIndex = sLevelInfo[logger.level].index;\n      // check level\n      if(messageLevelIndex <= loggerLevelIndex) {\n        // message critical enough, call logger\n        logger.f(logger, message);\n      }\n    }\n  }\n};\n\n/**\n * Sets the 'standard' key on a message object to:\n * \"LEVEL [category] \" + message\n *\n * @param message a message log object\n */\nforge.log.prepareStandard = function(message) {\n  if(!('standard' in message)) {\n    message.standard =\n      sLevelInfo[message.level].name +\n      //' ' + +message.timestamp +\n      ' [' + message.category + '] ' +\n      message.message;\n  }\n};\n\n/**\n * Sets the 'full' key on a message object to the original message\n * interpolated via % formatting with the message arguments.\n *\n * @param message a message log object.\n */\nforge.log.prepareFull = function(message) {\n  if(!('full' in message)) {\n    // copy args and insert message at the front\n    var args = [message.message];\n    args = args.concat([] || message['arguments']);\n    // format the message\n    message.full = forge.util.format.apply(this, args);\n  }\n};\n\n/**\n * Applies both preparseStandard() and prepareFull() to a message object and\n * store result in 'standardFull'.\n *\n * @param message a message log object.\n */\nforge.log.prepareStandardFull = function(message) {\n  if(!('standardFull' in message)) {\n    // FIXME implement 'standardFull' logging\n    forge.log.prepareStandard(message);\n    message.standardFull = message.standard;\n  }\n};\n\n// create log level functions\nif(true) {\n  // levels for which we want functions\n  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];\n  for(var i = 0; i < levels.length; ++i) {\n    // wrap in a function to ensure proper level var is passed\n    (function(level) {\n      // create function for this level\n      forge.log[level] = function(category, message/*, args...*/) {\n        // convert arguments to real array, remove category and message\n        var args = Array.prototype.slice.call(arguments).slice(2);\n        // create message object\n        // Note: interpolation and standard formatting is done lazily\n        var msg = {\n          timestamp: new Date(),\n          level: level,\n          category: category,\n          message: message,\n          'arguments': args\n          /*standard*/\n          /*full*/\n          /*fullMessage*/\n        };\n        // process this message\n        forge.log.logMessage(msg);\n      };\n    })(levels[i]);\n  }\n}\n\n/**\n * Creates a new logger with specified custom logging function.\n *\n * The logging function has a signature of:\n *   function(logger, message)\n * logger: current logger\n * message: object:\n *   level: level id\n *   category: category\n *   message: string message\n *   arguments: Array of extra arguments\n *   fullMessage: interpolated message and arguments if INTERPOLATE flag set\n *\n * @param logFunction a logging function which takes a log message object\n *          as a parameter.\n *\n * @return a logger object.\n */\nforge.log.makeLogger = function(logFunction) {\n  var logger = {\n    flags: 0,\n    f: logFunction\n  };\n  forge.log.setLevel(logger, 'none');\n  return logger;\n};\n\n/**\n * Sets the current log level on a logger.\n *\n * @param logger the target logger.\n * @param level the new maximum log level as a string.\n *\n * @return true if set, false if not.\n */\nforge.log.setLevel = function(logger, level) {\n  var rval = false;\n  if(logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {\n    for(var i = 0; i < forge.log.levels.length; ++i) {\n      var aValidLevel = forge.log.levels[i];\n      if(level == aValidLevel) {\n        // set level\n        logger.level = level;\n        rval = true;\n        break;\n      }\n    }\n  }\n\n  return rval;\n};\n\n/**\n * Locks the log level at its current value.\n *\n * @param logger the target logger.\n * @param lock boolean lock value, default to true.\n */\nforge.log.lock = function(logger, lock) {\n  if(typeof lock === 'undefined' || lock) {\n    logger.flags |= forge.log.LEVEL_LOCKED;\n  } else {\n    logger.flags &= ~forge.log.LEVEL_LOCKED;\n  }\n};\n\n/**\n * Adds a logger.\n *\n * @param logger the logger object.\n */\nforge.log.addLogger = function(logger) {\n  sLoggers.push(logger);\n};\n\n// setup the console logger if possible, else create fake console.log\nif(typeof(console) !== 'undefined' && 'log' in console) {\n  var logger;\n  if(console.error && console.warn && console.info && console.debug) {\n    // looks like Firebug-style logging is available\n    // level handlers map\n    var levelHandlers = {\n      error: console.error,\n      warning: console.warn,\n      info: console.info,\n      debug: console.debug,\n      verbose: console.debug\n    };\n    var f = function(logger, message) {\n      forge.log.prepareStandard(message);\n      var handler = levelHandlers[message.level];\n      // prepend standard message and concat args\n      var args = [message.standard];\n      args = args.concat(message['arguments'].slice());\n      // apply to low-level console function\n      handler.apply(console, args);\n    };\n    logger = forge.log.makeLogger(f);\n  } else {\n    // only appear to have basic console.log\n    var f = function(logger, message) {\n      forge.log.prepareStandardFull(message);\n      console.log(message.standardFull);\n    };\n    logger = forge.log.makeLogger(f);\n  }\n  forge.log.setLevel(logger, 'debug');\n  forge.log.addLogger(logger);\n  sConsoleLogger = logger;\n} else {\n  // define fake console.log to avoid potential script errors on\n  // browsers that do not have console logging\n  console = {\n    log: function() {}\n  };\n}\n\n/*\n * Check for logging control query vars.\n *\n * console.level=<level-name>\n * Set's the console log level by name.  Useful to override defaults and\n * allow more verbose logging before a user config is loaded.\n *\n * console.lock=<true|false>\n * Lock the console log level at whatever level it is set at.  This is run\n * after console.level is processed.  Useful to force a level of verbosity\n * that could otherwise be limited by a user config.\n */\nif(sConsoleLogger !== null) {\n  var query = forge.util.getQueryVariables();\n  if('console.level' in query) {\n    // set with last value\n    forge.log.setLevel(\n      sConsoleLogger, query['console.level'].slice(-1)[0]);\n  }\n  if('console.lock' in query) {\n    // set with last value\n    var lock = query['console.lock'].slice(-1)[0];\n    if(lock == 'true') {\n      forge.log.lock(sConsoleLogger);\n    }\n  }\n}\n\n// provide public access to console logger\nforge.log.consoleLogger = sConsoleLogger;\n\n};"],
"names":["shadow$provide","global","require","module","exports","forge","log","levels","sLevelInfo","sLoggers","sConsoleLogger","LEVEL_LOCKED","NO_LEVEL_CHECK","INTERPOLATE","i","length","level","index","name","toUpperCase","logMessage","forge.log.logMessage","message","messageLevelIndex","logger","flags","f","prepareStandard","forge.log.prepareStandard","standard","category","prepareFull","forge.log.prepareFull","args","concat","full","util","format","apply","prepareStandardFull","forge.log.prepareStandardFull","standardFull","Array","prototype","slice","call","arguments","msg","timestamp","Date","makeLogger","forge.log.makeLogger","logFunction","setLevel","forge.log.setLevel","rval","aValidLevel","lock","forge.log.lock","addLogger","forge.log.addLogger","push","console","error","warn","info","debug","levelHandlers","warning","verbose","handler","query","getQueryVariables","consoleLogger"]
}
