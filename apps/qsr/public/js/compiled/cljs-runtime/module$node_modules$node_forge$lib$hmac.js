shadow$provide.module$node_modules$node_forge$lib$hmac=function(global,require,module,exports){var forge=require("module$node_modules$node_forge$lib$forge");require("module$node_modules$node_forge$lib$md");require("module$node_modules$node_forge$lib$util");(module.exports=forge.hmac=forge.hmac||{}).create=function(){var _md=null,_ipadding=null,_opadding=null,ctx={start:function(md,key){if(null!==md)if("string"===typeof md)if(md=md.toLowerCase(),md in forge.md.algorithms)_md=forge.md.algorithms[md].create();
else throw Error('Unknown hash algorithm "'+md+'"');else _md=md;if(null!==key){if("string"===typeof key)key=forge.util.createBuffer(key);else if(forge.util.isArray(key)){md=key;key=forge.util.createBuffer();for(var i=0;i<md.length;++i)key.putByte(md[i])}var keylen=key.length();keylen>_md.blockLength&&(_md.start(),_md.update(key.bytes()),key=_md.digest());_ipadding=forge.util.createBuffer();_opadding=forge.util.createBuffer();keylen=key.length();for(i=0;i<keylen;++i)md=key.at(i),_ipadding.putByte(54^
md),_opadding.putByte(92^md);if(keylen<_md.blockLength)for(md=_md.blockLength-keylen,i=0;i<md;++i)_ipadding.putByte(54),_opadding.putByte(92);_ipadding=_ipadding.bytes();_opadding=_opadding.bytes()}_md.start();_md.update(_ipadding)},update:function(bytes){_md.update(bytes)},getMac:function(){var inner=_md.digest().bytes();_md.start();_md.update(_opadding);_md.update(inner);return _md.digest()}};ctx.digest=ctx.getMac;return ctx}}
//# sourceMappingURL=module$node_modules$node_forge$lib$hmac.js.map
