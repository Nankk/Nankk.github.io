{
"version":3,
"file":"module$node_modules$node_forge$lib$pbe.js",
"lineCount":34,
"mappings":"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",
"sources":["node_modules/node-forge/lib/pbe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$pbe\"] = function(global,require,module,exports) {\n/**\n * Password-based encryption functions.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * An EncryptedPrivateKeyInfo:\n *\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n *   encryptedData        EncryptedData }\n *\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedData ::= OCTET STRING\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./asn1');\nrequire('./des');\nrequire('./md');\nrequire('./oids');\nrequire('./pbkdf2');\nrequire('./pem');\nrequire('./random');\nrequire('./rc2');\nrequire('./rsa');\nrequire('./util');\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Password-based encryption implementation. */\nvar pki = forge.pki = forge.pki || {};\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\nvar oids = pki.oids;\n\n// validator for an EncryptedPrivateKeyInfo structure\n// Note: Currently only works w/algorithm params\nvar encryptedPrivateKeyValidator = {\n  name: 'EncryptedPrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encryptionOid'\n    }, {\n      name: 'AlgorithmIdentifier.parameters',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'encryptionParams'\n    }]\n  }, {\n    // encryptedData\n    name: 'EncryptedPrivateKeyInfo.encryptedData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encryptedData'\n  }]\n};\n\n// validator for a PBES2Algorithms structure\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\nvar PBES2AlgorithmsValidator = {\n  name: 'PBES2Algorithms',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PBES2Algorithms.keyDerivationFunc',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.keyDerivationFunc.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'kdfOid'\n    }, {\n      name: 'PBES2Algorithms.params',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'PBES2Algorithms.params.salt',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'kdfSalt'\n      }, {\n        name: 'PBES2Algorithms.params.iterationCount',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: 'kdfIterationCount'\n      }, {\n        name: 'PBES2Algorithms.params.keyLength',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        optional: true,\n        capture: 'keyLength'\n      }, {\n        // prf\n        name: 'PBES2Algorithms.params.prf',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        optional: true,\n        value: [{\n          name: 'PBES2Algorithms.params.prf.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'prfOid'\n        }]\n      }]\n    }]\n  }, {\n    name: 'PBES2Algorithms.encryptionScheme',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.encryptionScheme.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encOid'\n    }, {\n      name: 'PBES2Algorithms.encryptionScheme.iv',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'encIv'\n    }]\n  }]\n};\n\nvar pkcs12PbeParamsValidator = {\n  name: 'pkcs-12PbeParams',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'pkcs-12PbeParams.salt',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'salt'\n  }, {\n    name: 'pkcs-12PbeParams.iterations',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'iterations'\n  }]\n};\n\n/**\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\n *\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\n *\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\n *\n * PBES2-params ::= SEQUENCE {\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\n * }\n *\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n *\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\n *\n * PBKDF2-params ::= SEQUENCE {\n *   salt CHOICE {\n *     specified OCTET STRING,\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n *   },\n *   iterationCount INTEGER (1..MAX),\n *   keyLength INTEGER (1..MAX) OPTIONAL,\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n * }\n *\n * @param obj the ASN.1 PrivateKeyInfo object.\n * @param password the password to encrypt with.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          prfAlgorithm the PRF message digest algorithm to use\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptPrivateKeyInfo = function(obj, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || 'aes128';\n  options.prfAlgorithm = options.prfAlgorithm || 'sha1';\n\n  // generate PBE params\n  var salt = forge.random.getBytesSync(options.saltSize);\n  var count = options.count;\n  var countBytes = asn1.integerToDer(count);\n  var dkLen;\n  var encryptionAlgorithm;\n  var encryptedData;\n  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {\n    // do PBES2\n    var ivLen, encOid, cipherFn;\n    switch(options.algorithm) {\n    case 'aes128':\n      dkLen = 16;\n      ivLen = 16;\n      encOid = oids['aes128-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes192':\n      dkLen = 24;\n      ivLen = 16;\n      encOid = oids['aes192-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes256':\n      dkLen = 32;\n      ivLen = 16;\n      encOid = oids['aes256-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'des':\n      dkLen = 8;\n      ivLen = 8;\n      encOid = oids['desCBC'];\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n    default:\n      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n      error.algorithm = options.algorithm;\n      throw error;\n    }\n\n    // get PRF message digest\n    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();\n    var md = prfAlgorithmToMessageDigest(prfAlgorithm);\n\n    // encrypt private key using pbe SHA-1 and AES/DES\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n    var iv = forge.random.getBytesSync(ivLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    // get PBKDF2-params\n    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // keyDerivationFunc\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),\n          // PBKDF2-params\n          params\n        ]),\n        // encryptionScheme\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(encOid).getBytes()),\n          // iv\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)\n        ])\n      ])\n    ]);\n  } else if(options.algorithm === '3des') {\n    // Do PKCS12 PBE\n    dkLen = 24;\n\n    var saltBytes = new forge.util.ByteBuffer(salt);\n    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n    var cipher = forge.des.createEncryptionCipher(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),\n      // pkcs-12PbeParams\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // salt\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n        // iteration count\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n          countBytes.getBytes())\n      ])\n    ]);\n  } else {\n    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // EncryptedPrivateKeyInfo\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // encryptionAlgorithm\n    encryptionAlgorithm,\n    // encryptedData\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)\n  ]);\n  return rval;\n};\n\n/**\n * Decrypts a ASN.1 PrivateKeyInfo object.\n *\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\n * @param password the password to decrypt with.\n *\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\n */\npki.decryptPrivateKeyInfo = function(obj, password) {\n  var rval = null;\n\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // get cipher\n  var oid = asn1.derToOid(capture.encryptionOid);\n  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);\n\n  // get encrypted data\n  var encrypted = forge.util.createBuffer(capture.encryptedData);\n\n  cipher.update(encrypted);\n  if(cipher.finish()) {\n    rval = asn1.fromDer(cipher.output);\n  }\n\n  return rval;\n};\n\n/**\n * Converts a EncryptedPrivateKeyInfo to PEM format.\n *\n * @param epki the EncryptedPrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted encrypted private key.\n */\npki.encryptedPrivateKeyToPem = function(epki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'ENCRYPTED PRIVATE KEY',\n    body: asn1.toDer(epki).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\n * is not performed.\n *\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptedPrivateKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {\n    var error = new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  return asn1.fromDer(msg.body);\n};\n\n/**\n * Encrypts an RSA private key. By default, the key will be wrapped in\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\n * This is the standard, preferred way to encrypt a private key.\n *\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\n * private key encryption), set the 'legacy' option to true. Note: Using this\n * option will cause the iteration count to be forced to 1.\n *\n * Note: The 'des' algorithm is supported, but it is not considered to be\n * secure because it only uses a single 56-bit key. If possible, it is highly\n * recommended that a different algorithm be used.\n *\n * @param rsaKey the RSA key to encrypt.\n * @param password the password to use.\n * @param options:\n *          algorithm: the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\n *          count: the iteration count to use.\n *          saltSize: the salt size to use.\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\n *            headers (DEK-Info) private key.\n *\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptRsaPrivateKey = function(rsaKey, password, options) {\n  // standard PKCS#8\n  options = options || {};\n  if(!options.legacy) {\n    // encrypt PrivateKeyInfo\n    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\n    rval = pki.encryptPrivateKeyInfo(rval, password, options);\n    return pki.encryptedPrivateKeyToPem(rval);\n  }\n\n  // legacy non-PKCS#8\n  var algorithm;\n  var iv;\n  var dkLen;\n  var cipherFn;\n  switch(options.algorithm) {\n  case 'aes128':\n    algorithm = 'AES-128-CBC';\n    dkLen = 16;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes192':\n    algorithm = 'AES-192-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes256':\n    algorithm = 'AES-256-CBC';\n    dkLen = 32;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case '3des':\n    algorithm = 'DES-EDE3-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  case 'des':\n    algorithm = 'DES-CBC';\n    dkLen = 8;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  default:\n    var error = new Error('Could not encrypt RSA private key; unsupported ' +\n      'encryption algorithm \"' + options.algorithm + '\".');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // encrypt private key using OpenSSL legacy key derivation\n  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\n  cipher.finish();\n\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    procType: {\n      version: '4',\n      type: 'ENCRYPTED'\n    },\n    dekInfo: {\n      algorithm: algorithm,\n      parameters: forge.util.bytesToHex(iv).toUpperCase()\n    },\n    body: cipher.output.getBytes()\n  };\n  return forge.pem.encode(msg);\n};\n\n/**\n * Decrypts an RSA private key.\n *\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\n * @param password the password to use.\n *\n * @return the RSA key on success, null on failure.\n */\npki.decryptRsaPrivateKey = function(pem, password) {\n  var rval = null;\n\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&\n    msg.type !== 'PRIVATE KEY' &&\n    msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM header type ' +\n      'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n    error.headerType = error;\n    throw error;\n  }\n\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    var dkLen;\n    var cipherFn;\n    switch(msg.dekInfo.algorithm) {\n    case 'DES-CBC':\n      dkLen = 8;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'DES-EDE3-CBC':\n      dkLen = 24;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'AES-128-CBC':\n      dkLen = 16;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-192-CBC':\n      dkLen = 24;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-256-CBC':\n      dkLen = 32;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'RC2-40-CBC':\n      dkLen = 5;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 40);\n      };\n      break;\n    case 'RC2-64-CBC':\n      dkLen = 8;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 64);\n      };\n      break;\n    case 'RC2-128-CBC':\n      dkLen = 16;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 128);\n      };\n      break;\n    default:\n      var error = new Error('Could not decrypt private key; unsupported ' +\n        'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n      error.algorithm = msg.dekInfo.algorithm;\n      throw error;\n    }\n\n    // use OpenSSL legacy key derivation\n    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(forge.util.createBuffer(msg.body));\n    if(cipher.finish()) {\n      rval = cipher.output.getBytes();\n    } else {\n      return rval;\n    }\n  } else {\n    rval = msg.body;\n  }\n\n  if(msg.type === 'ENCRYPTED PRIVATE KEY') {\n    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n  } else {\n    // decryption already performed above\n    rval = asn1.fromDer(rval);\n  }\n\n  if(rval !== null) {\n    rval = pki.privateKeyFromAsn1(rval);\n  }\n\n  return rval;\n};\n\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */\npki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {\n  var j, l;\n\n  if(typeof md === 'undefined' || md === null) {\n    if(!('sha1' in forge.md)) {\n      throw new Error('\"sha1\" hash algorithm unavailable.');\n    }\n    md = forge.md.sha1.create();\n  }\n\n  var u = md.digestLength;\n  var v = md.blockLength;\n  var result = new forge.util.ByteBuffer();\n\n  /* Convert password to Unicode byte buffer + trailing 0-byte. */\n  var passBuf = new forge.util.ByteBuffer();\n  if(password !== null && password !== undefined) {\n    for(l = 0; l < password.length; l++) {\n      passBuf.putInt16(password.charCodeAt(l));\n    }\n    passBuf.putInt16(0);\n  }\n\n  /* Length of salt and password in BYTES. */\n  var p = passBuf.length();\n  var s = salt.length();\n\n  /* 1. Construct a string, D (the \"diversifier\"), by concatenating\n        v copies of ID. */\n  var D = new forge.util.ByteBuffer();\n  D.fillWithByte(id, v);\n\n  /* 2. Concatenate copies of the salt together to create a string S of length\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\n        to create S).\n        Note that if the salt is the empty string, then so is S. */\n  var Slen = v * Math.ceil(s / v);\n  var S = new forge.util.ByteBuffer();\n  for(l = 0; l < Slen; l++) {\n    S.putByte(salt.at(l % s));\n  }\n\n  /* 3. Concatenate copies of the password together to create a string P of\n        length v * ceil(p / v) bytes (the final copy of the password may be\n        truncated to create P).\n        Note that if the password is the empty string, then so is P. */\n  var Plen = v * Math.ceil(p / v);\n  var P = new forge.util.ByteBuffer();\n  for(l = 0; l < Plen; l++) {\n    P.putByte(passBuf.at(l % p));\n  }\n\n  /* 4. Set I=S||P to be the concatenation of S and P. */\n  var I = S;\n  I.putBuffer(P);\n\n  /* 5. Set c=ceil(n / u). */\n  var c = Math.ceil(n / u);\n\n  /* 6. For i=1, 2, ..., c, do the following: */\n  for(var i = 1; i <= c; i++) {\n    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */\n    var buf = new forge.util.ByteBuffer();\n    buf.putBytes(D.bytes());\n    buf.putBytes(I.bytes());\n    for(var round = 0; round < iter; round++) {\n      md.start();\n      md.update(buf.getBytes());\n      buf = md.digest();\n    }\n\n    /* b) Concatenate copies of Ai to create a string B of length v bytes (the\n          final copy of Ai may be truncated to create B). */\n    var B = new forge.util.ByteBuffer();\n    for(l = 0; l < v; l++) {\n      B.putByte(buf.at(l % u));\n    }\n\n    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\n          Ij=(Ij+B+1) mod 2v for each j.  */\n    var k = Math.ceil(s / v) + Math.ceil(p / v);\n    var Inew = new forge.util.ByteBuffer();\n    for(j = 0; j < k; j++) {\n      var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n      var x = 0x1ff;\n      for(l = B.length() - 1; l >= 0; l--) {\n        x = x >> 8;\n        x += B.at(l) + chunk.at(l);\n        chunk.setAt(l, x & 0xff);\n      }\n      Inew.putBuffer(chunk);\n    }\n    I = Inew;\n\n    /* Add Ai to A. */\n    result.putBuffer(buf);\n  }\n\n  result.truncate(result.length() - n);\n  return result;\n};\n\n/**\n * Get new Forge cipher object instance.\n *\n * @param oid the OID (in string notation).\n * @param params the ASN.1 params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipher = function(oid, params, password) {\n  switch(oid) {\n  case pki.oids['pkcs5PBES2']:\n    return pki.pbe.getCipherForPBES2(oid, params, password);\n\n  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\n\n  default:\n    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'pkcs5PBES2',\n      'pbeWithSHAAnd3-KeyTripleDES-CBC',\n      'pbewithSHAAnd40BitRC2-CBC'\n    ];\n    throw error;\n  }\n};\n\n/**\n * Get new Forge cipher object instance according to PBES2 params block.\n *\n * The returned cipher instance is already started using the IV\n * from PBES2 parameter block.\n *\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\n * @param params the ASN.1 PBES2-params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipherForPBES2 = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // check oids\n  oid = asn1.derToOid(capture.kdfOid);\n  if(oid !== pki.oids['pkcs5PBKDF2']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported key derivation function OID.');\n    error.oid = oid;\n    error.supportedOids = ['pkcs5PBKDF2'];\n    throw error;\n  }\n  oid = asn1.derToOid(capture.encOid);\n  if(oid !== pki.oids['aes128-CBC'] &&\n    oid !== pki.oids['aes192-CBC'] &&\n    oid !== pki.oids['aes256-CBC'] &&\n    oid !== pki.oids['des-EDE3-CBC'] &&\n    oid !== pki.oids['desCBC']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported encryption scheme OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];\n    throw error;\n  }\n\n  // set PBE params\n  var salt = capture.kdfSalt;\n  var count = forge.util.createBuffer(capture.kdfIterationCount);\n  count = count.getInt(count.length() << 3);\n  var dkLen;\n  var cipherFn;\n  switch(pki.oids[oid]) {\n  case 'aes128-CBC':\n    dkLen = 16;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes192-CBC':\n    dkLen = 24;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes256-CBC':\n    dkLen = 32;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'des-EDE3-CBC':\n    dkLen = 24;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  case 'desCBC':\n    dkLen = 8;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n\n  // decrypt private key using pbe with chosen PRF and AES/DES\n  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n  var iv = capture.encIv;\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n\n  return cipher;\n};\n\n/**\n * Get new Forge cipher object instance for PKCS#12 PBE.\n *\n * The returned cipher instance is already started using the key & IV\n * derived from the provided password and PKCS#12 PBE salt.\n *\n * @param oid The PKCS#12 PBE OID (in string notation).\n * @param params The ASN.1 PKCS#12 PBE-params object.\n * @param password The password to decrypt with.\n *\n * @return the new cipher object instance.\n */\npki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var salt = forge.util.createBuffer(capture.salt);\n  var count = forge.util.createBuffer(capture.iterations);\n  count = count.getInt(count.length() << 3);\n\n  var dkLen, dIvLen, cipherFn;\n  switch(oid) {\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n      dkLen = 24;\n      dIvLen = 8;\n      cipherFn = forge.des.startDecrypting;\n      break;\n\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      dkLen = 5;\n      dIvLen = 8;\n      cipherFn = function(key, iv) {\n        var cipher = forge.rc2.createDecryptionCipher(key, 40);\n        cipher.start(iv, null);\n        return cipher;\n      };\n      break;\n\n    default:\n      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');\n      error.oid = oid;\n      throw error;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n  md.start();\n  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n\n  return cipherFn(key, iv);\n};\n\n/**\n * OpenSSL's legacy key derivation function.\n *\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\n *\n * @param password the password to derive the key from.\n * @param salt the salt to use, null for none.\n * @param dkLen the number of bytes needed for the derived key.\n * @param [options] the options to use:\n *          [md] an optional message digest object to use.\n */\npki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {\n  if(typeof md === 'undefined' || md === null) {\n    if(!('md5' in forge.md)) {\n      throw new Error('\"md5\" hash algorithm unavailable.');\n    }\n    md = forge.md.md5.create();\n  }\n  if(salt === null) {\n    salt = '';\n  }\n  var digests = [hash(md, password + salt)];\n  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {\n    digests.push(hash(md, digests[i - 1] + password + salt));\n  }\n  return digests.join('').substr(0, dkLen);\n};\n\nfunction hash(md, bytes) {\n  return md.start().update(bytes).digest().getBytes();\n}\n\nfunction prfOidToMessageDigest(prfOid) {\n  // get PRF algorithm, default to SHA-1\n  var prfAlgorithm;\n  if(!prfOid) {\n    prfAlgorithm = 'hmacWithSHA1';\n  } else {\n    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\n    if(!prfAlgorithm) {\n      var error = new Error('Unsupported PRF OID.');\n      error.oid = prfOid;\n      error.supported = [\n        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n        'hmacWithSHA512'];\n      throw error;\n    }\n  }\n  return prfAlgorithmToMessageDigest(prfAlgorithm);\n}\n\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\n  var factory = forge.md;\n  switch(prfAlgorithm) {\n  case 'hmacWithSHA224':\n    factory = forge.md.sha512;\n  case 'hmacWithSHA1':\n  case 'hmacWithSHA256':\n  case 'hmacWithSHA384':\n  case 'hmacWithSHA512':\n    prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n    break;\n  default:\n    var error = new Error('Unsupported PRF algorithm.');\n    error.algorithm = prfAlgorithm;\n    error.supported = [\n      'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n      'hmacWithSHA512'];\n    throw error;\n  }\n  if(!factory || !(prfAlgorithm in factory)) {\n    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);\n  }\n  return factory[prfAlgorithm].create();\n}\n\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // salt\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n    // iteration count\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      countBytes.getBytes())\n  ]);\n  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\n  if(prfAlgorithm !== 'hmacWithSHA1') {\n    params.value.push(\n      // key length\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        forge.util.hexToBytes(dkLen.toString(16))),\n      // AlgorithmIdentifier\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // algorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),\n        // parameters (null)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n      ]));\n  }\n  return params;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","hash","md","bytes","start","update","digest","getBytes","prfOidToMessageDigest","prfOid","prfAlgorithm","pki","oids","asn1","derToOid","error","Error","oid","supported","prfAlgorithmToMessageDigest","factory","forge","sha512","substr","toLowerCase","algorithm","create","BigInteger","jsbn","pbe","encryptedPrivateKeyValidator","name","tagClass","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","value","OID","capture","captureAsn1","OCTETSTRING","PBES2AlgorithmsValidator","INTEGER","optional","pkcs12PbeParamsValidator","encryptPrivateKeyInfo","pki.encryptPrivateKeyInfo","obj","password","options","saltSize","count","salt","random","getBytesSync","countBytes","integerToDer","dkLen","indexOf","ivLen","encOid","cipherFn","aes","createEncryptionCipher","des","toUpperCase","dk","pkcs5","pbkdf2","iv","cipher","toDer","finish","encryptedData","output","params","push","util","hexToBytes","toString","oidToDer","NULL","encryptionAlgorithm","saltBytes","ByteBuffer","generatePkcs12Key","rval","decryptPrivateKeyInfo","pki.decryptPrivateKeyInfo","errors","validate","encryptionOid","getCipher","encryptionParams","encrypted","createBuffer","fromDer","encryptedPrivateKeyToPem","pki.encryptedPrivateKeyToPem","epki","maxline","msg","body","pem","encode","encryptedPrivateKeyFromPem","pki.encryptedPrivateKeyFromPem","decode","headerType","procType","encryptRsaPrivateKey","pki.encryptRsaPrivateKey","rsaKey","legacy","wrapRsaPrivateKey","privateKeyToAsn1","opensslDeriveBytes","version","dekInfo","parameters","bytesToHex","decryptRsaPrivateKey","pki.decryptRsaPrivateKey","createDecryptionCipher","key","rc2","privateKeyFromAsn1","pki.pbe.generatePkcs12Key","id","iter","n","j","l","sha1","u","digestLength","v","blockLength","result","passBuf","undefined","length","putInt16","charCodeAt","p","s","D","fillWithByte","Slen","Math","ceil","S","putByte","at","Plen","P","I","putBuffer","c","i","buf","putBytes","round","B","k","Inew","chunk","x","setAt","truncate","pki.pbe.getCipher","getCipherForPBES2","getCipherForPKCS12PBE","supportedOids","pki.pbe.getCipherForPBES2","kdfOid","kdfSalt","kdfIterationCount","getInt","encIv","pki.pbe.getCipherForPKCS12PBE","iterations","dIvLen","startDecrypting","pki.pbe.opensslDeriveBytes","md5","digests","join"]
}
