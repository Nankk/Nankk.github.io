{
"version":3,
"file":"module$node_modules$google_auth_library$build$src$auth$jwtclient.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/google-auth-library/build/src/auth/jwtclient.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$google_auth_library$build$src$auth$jwtclient\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gtoken_1 = require(\"gtoken\");\nconst messages = require(\"../messages\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\n            ? optionsOrEmail\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super({ eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis });\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        return new JWT({\n            email: this.email,\n            keyFile: this.keyFile,\n            key: this.key,\n            keyId: this.keyId,\n            scopes,\n            subject: this.subject,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    async getRequestMetadataAsync(url) {\n        if (!this.apiKey && !this.hasScopes() && url) {\n            if (this.additionalClaims &&\n                this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return { headers: { Authorization: `Bearer ${tokens.id_token}` } };\n            }\n            else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n                }\n                const headers = await this.access.getRequestHeaders(url, this.additionalClaims);\n                return { headers };\n            }\n        }\n        else {\n            return super.getRequestMetadataAsync(url);\n        }\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createScoped before use.\n     * @deprecated\n     * @return false if createScoped does not need to be called.\n     */\n    createScopedRequired() {\n        messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);\n        return !this.hasScopes();\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        // For arrays, check the array length.\n        if (this.scopes instanceof Array) {\n            return this.scopes.length > 0;\n        }\n        // For others, convert to a string and check the length.\n        return String(this.scopes).length > 0;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error('No result returned');\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = 'jwt-placeholder';\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    async refreshTokenNoCache(refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken();\n        const tokens = {\n            access_token: token.access_token,\n            token_type: 'Bearer',\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken,\n        };\n        this.emit('tokens', tokens);\n        return { res: null, tokens };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(r => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    async getCredentials() {\n        if (this.key) {\n            return { private_key: this.key, client_email: this.email };\n        }\n        else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\n        }\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\n    }\n}\nexports.JWT = JWT;\n//# sourceMappingURL=jwtclient.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","gtoken_1","messages","jwtaccess_1","oauth2client_1","JWT","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","additionalClaims","credentials","refresh_token","expiry_date","OAuth2Client","createScoped","getRequestMetadataAsync","url","headers","tokens","apiKey","hasScopes","target_audience","refreshToken","access","JWTAccess","getRequestHeaders","Authorization","id_token","createScopedRequired","warn","JWT_CREATE_SCOPED_DEPRECATED","Array","length","String","authorize","callback","authorizeAsync","then","r","result","Error","gtoken","iss","refreshTokenNoCache","token","createGToken","getToken","access_token","token_type","expiresAt","idToken","emit","res","GoogleToken","sub","scope","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","fromStream","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","e","fromAPIKey","getCredentials","creds","privateKey","clientEmail"]
}
