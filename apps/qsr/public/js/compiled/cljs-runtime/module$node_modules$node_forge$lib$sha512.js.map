{
"version":3,
"file":"module$node_modules$node_forge$lib$sha512.js",
"lineCount":17,
"mappings":"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",
"sources":["node_modules/node-forge/lib/sha512.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$node_forge$lib$sha512\"] = function(global,require,module,exports) {\n/**\n * Secure Hash Algorithm with a 1024-bit block size implementation.\n *\n * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For\n * SHA-256 (block size 512 bits), see sha256.js.\n *\n * See FIPS 180-4 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2014-2015 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\nvar sha512 = module.exports = forge.sha512 = forge.sha512 || {};\n\n// SHA-512\nforge.md.sha512 = forge.md.algorithms.sha512 = sha512;\n\n// SHA-384\nvar sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};\nsha384.create = function() {\n  return sha512.create('SHA-384');\n};\nforge.md.sha384 = forge.md.algorithms.sha384 = sha384;\n\n// SHA-512/256\nforge.sha512.sha256 = forge.sha512.sha256 || {\n  create: function() {\n    return sha512.create('SHA-512/256');\n  }\n};\nforge.md['sha512/256'] = forge.md.algorithms['sha512/256'] =\n  forge.sha512.sha256;\n\n// SHA-512/224\nforge.sha512.sha224 = forge.sha512.sha224 || {\n  create: function() {\n    return sha512.create('SHA-512/224');\n  }\n};\nforge.md['sha512/224'] = forge.md.algorithms['sha512/224'] =\n  forge.sha512.sha224;\n\n/**\n * Creates a SHA-2 message digest object.\n *\n * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,\n *          SHA-512/256).\n *\n * @return a message digest object.\n */\nsha512.create = function(algorithm) {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  if(typeof algorithm === 'undefined') {\n    algorithm = 'SHA-512';\n  }\n\n  if(!(algorithm in _states)) {\n    throw new Error('Invalid SHA-512 algorithm: ' + algorithm);\n  }\n\n  // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)\n  var _state = _states[algorithm];\n  var _h = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for 64-bit word storage\n  var _w = new Array(80);\n  for(var wi = 0; wi < 80; ++wi) {\n    _w[wi] = new Array(2);\n  }\n\n  // determine digest length by algorithm name (default)\n  var digestLength = 64;\n  switch(algorithm) {\n    case 'SHA-384':\n      digestLength = 48;\n      break;\n    case 'SHA-512/256':\n      digestLength = 32;\n      break;\n    case 'SHA-512/224':\n      digestLength = 28;\n      break;\n  }\n\n  // message digest object\n  var md = {\n    // SHA-512 => sha512\n    algorithm: algorithm.replace('-', '').toLowerCase(),\n    blockLength: 128,\n    digestLength: digestLength,\n    // 56-bit length of message so far (does not including padding)\n    messageLength: 0,\n    // true message length\n    fullMessageLength: null,\n    // size of message length in bytes\n    messageLengthSize: 16\n  };\n\n  /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */\n  md.start = function() {\n    // up to 56-bit message length for convenience\n    md.messageLength = 0;\n\n    // full message length (set md.messageLength128 for backwards-compatibility)\n    md.fullMessageLength = md.messageLength128 = [];\n    var int32s = md.messageLengthSize / 4;\n    for(var i = 0; i < int32s; ++i) {\n      md.fullMessageLength.push(0);\n    }\n    _input = forge.util.createBuffer();\n    _h = new Array(_state.length);\n    for(var i = 0; i < _state.length; ++i) {\n      _h[i] = _state[i].slice(0);\n    }\n    return md;\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    var len = msg.length;\n    md.messageLength += len;\n    len = [(len / 0x100000000) >>> 0, len >>> 0];\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      md.fullMessageLength[i] += len[1];\n      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);\n      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n      len[0] = ((len[1] / 0x100000000) >>> 0);\n    }\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_h, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n\n    return md;\n  };\n\n  /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-512 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 896 mod 1024. In other words,\n    the data to be digested must be a multiple of 1024 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 16 bytes (128\n    bits), that means that the last segment of the data must have 112 bytes\n    (896 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 896 mod 1024 because\n    1024 - 128 = 896.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 896 mod 1024, then 1024 padding bits must be added. */\n\n    var finalBlock = forge.util.createBuffer();\n    finalBlock.putBytes(_input.bytes());\n\n    // compute remaining size to be digested (include message length size)\n    var remaining = (\n      md.fullMessageLength[md.fullMessageLength.length - 1] +\n      md.messageLengthSize);\n\n    // add padding for overflow blockSize - overflow\n    // _padding starts with 1 byte with first bit is set (byte value 128), then\n    // there may be up to (blockSize - 1) other pad bytes\n    var overflow = remaining & (md.blockLength - 1);\n    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n\n    // serialize message length in bits in big-endian order; since length\n    // is stored in bytes we multiply by 8 and add carry from next int\n    var next, carry;\n    var bits = md.fullMessageLength[0] * 8;\n    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n      next = md.fullMessageLength[i + 1] * 8;\n      carry = (next / 0x100000000) >>> 0;\n      bits += carry;\n      finalBlock.putInt32(bits >>> 0);\n      bits = next >>> 0;\n    }\n    finalBlock.putInt32(bits);\n\n    var h = new Array(_h.length);\n    for(var i = 0; i < _h.length; ++i) {\n      h[i] = _h[i].slice(0);\n    }\n    _update(h, _w, finalBlock);\n    var rval = forge.util.createBuffer();\n    var hlen;\n    if(algorithm === 'SHA-512') {\n      hlen = h.length;\n    } else if(algorithm === 'SHA-384') {\n      hlen = h.length - 2;\n    } else {\n      hlen = h.length - 4;\n    }\n    for(var i = 0; i < hlen; ++i) {\n      rval.putInt32(h[i][0]);\n      if(i !== hlen - 1 || algorithm !== 'SHA-512/224') {\n        rval.putInt32(h[i][1]);\n      }\n    }\n    return rval;\n  };\n\n  return md;\n};\n\n// sha-512 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n\n// table of constants\nvar _k = null;\n\n// initial hash states\nvar _states = null;\n\n/**\n * Initializes the constant tables.\n */\nfunction _init() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 128);\n\n  // create K table for SHA-512\n  _k = [\n    [0x428a2f98, 0xd728ae22], [0x71374491, 0x23ef65cd],\n    [0xb5c0fbcf, 0xec4d3b2f], [0xe9b5dba5, 0x8189dbbc],\n    [0x3956c25b, 0xf348b538], [0x59f111f1, 0xb605d019],\n    [0x923f82a4, 0xaf194f9b], [0xab1c5ed5, 0xda6d8118],\n    [0xd807aa98, 0xa3030242], [0x12835b01, 0x45706fbe],\n    [0x243185be, 0x4ee4b28c], [0x550c7dc3, 0xd5ffb4e2],\n    [0x72be5d74, 0xf27b896f], [0x80deb1fe, 0x3b1696b1],\n    [0x9bdc06a7, 0x25c71235], [0xc19bf174, 0xcf692694],\n    [0xe49b69c1, 0x9ef14ad2], [0xefbe4786, 0x384f25e3],\n    [0x0fc19dc6, 0x8b8cd5b5], [0x240ca1cc, 0x77ac9c65],\n    [0x2de92c6f, 0x592b0275], [0x4a7484aa, 0x6ea6e483],\n    [0x5cb0a9dc, 0xbd41fbd4], [0x76f988da, 0x831153b5],\n    [0x983e5152, 0xee66dfab], [0xa831c66d, 0x2db43210],\n    [0xb00327c8, 0x98fb213f], [0xbf597fc7, 0xbeef0ee4],\n    [0xc6e00bf3, 0x3da88fc2], [0xd5a79147, 0x930aa725],\n    [0x06ca6351, 0xe003826f], [0x14292967, 0x0a0e6e70],\n    [0x27b70a85, 0x46d22ffc], [0x2e1b2138, 0x5c26c926],\n    [0x4d2c6dfc, 0x5ac42aed], [0x53380d13, 0x9d95b3df],\n    [0x650a7354, 0x8baf63de], [0x766a0abb, 0x3c77b2a8],\n    [0x81c2c92e, 0x47edaee6], [0x92722c85, 0x1482353b],\n    [0xa2bfe8a1, 0x4cf10364], [0xa81a664b, 0xbc423001],\n    [0xc24b8b70, 0xd0f89791], [0xc76c51a3, 0x0654be30],\n    [0xd192e819, 0xd6ef5218], [0xd6990624, 0x5565a910],\n    [0xf40e3585, 0x5771202a], [0x106aa070, 0x32bbd1b8],\n    [0x19a4c116, 0xb8d2d0c8], [0x1e376c08, 0x5141ab53],\n    [0x2748774c, 0xdf8eeb99], [0x34b0bcb5, 0xe19b48a8],\n    [0x391c0cb3, 0xc5c95a63], [0x4ed8aa4a, 0xe3418acb],\n    [0x5b9cca4f, 0x7763e373], [0x682e6ff3, 0xd6b2b8a3],\n    [0x748f82ee, 0x5defb2fc], [0x78a5636f, 0x43172f60],\n    [0x84c87814, 0xa1f0ab72], [0x8cc70208, 0x1a6439ec],\n    [0x90befffa, 0x23631e28], [0xa4506ceb, 0xde82bde9],\n    [0xbef9a3f7, 0xb2c67915], [0xc67178f2, 0xe372532b],\n    [0xca273ece, 0xea26619c], [0xd186b8c7, 0x21c0c207],\n    [0xeada7dd6, 0xcde0eb1e], [0xf57d4f7f, 0xee6ed178],\n    [0x06f067aa, 0x72176fba], [0x0a637dc5, 0xa2c898a6],\n    [0x113f9804, 0xbef90dae], [0x1b710b35, 0x131c471b],\n    [0x28db77f5, 0x23047d84], [0x32caab7b, 0x40c72493],\n    [0x3c9ebe0a, 0x15c9bebc], [0x431d67c4, 0x9c100d4c],\n    [0x4cc5d4be, 0xcb3e42b6], [0x597f299c, 0xfc657e2a],\n    [0x5fcb6fab, 0x3ad6faec], [0x6c44198c, 0x4a475817]\n  ];\n\n  // initial hash states\n  _states = {};\n  _states['SHA-512'] = [\n    [0x6a09e667, 0xf3bcc908],\n    [0xbb67ae85, 0x84caa73b],\n    [0x3c6ef372, 0xfe94f82b],\n    [0xa54ff53a, 0x5f1d36f1],\n    [0x510e527f, 0xade682d1],\n    [0x9b05688c, 0x2b3e6c1f],\n    [0x1f83d9ab, 0xfb41bd6b],\n    [0x5be0cd19, 0x137e2179]\n  ];\n  _states['SHA-384'] = [\n    [0xcbbb9d5d, 0xc1059ed8],\n    [0x629a292a, 0x367cd507],\n    [0x9159015a, 0x3070dd17],\n    [0x152fecd8, 0xf70e5939],\n    [0x67332667, 0xffc00b31],\n    [0x8eb44a87, 0x68581511],\n    [0xdb0c2e0d, 0x64f98fa7],\n    [0x47b5481d, 0xbefa4fa4]\n  ];\n  _states['SHA-512/256'] = [\n    [0x22312194, 0xFC2BF72C],\n    [0x9F555FA3, 0xC84C64C2],\n    [0x2393B86B, 0x6F53B151],\n    [0x96387719, 0x5940EABD],\n    [0x96283EE2, 0xA88EFFE3],\n    [0xBE5E1E25, 0x53863992],\n    [0x2B0199FC, 0x2C85B8AA],\n    [0x0EB72DDC, 0x81C52CA2]\n  ];\n  _states['SHA-512/224'] = [\n    [0x8C3D37C8, 0x19544DA2],\n    [0x73E19966, 0x89DCD4D6],\n    [0x1DFAB7AE, 0x32FF9C82],\n    [0x679DD514, 0x582F9FCF],\n    [0x0F6D2B69, 0x7BD44DA8],\n    [0x77E36F73, 0x04C48942],\n    [0x3F9D85A8, 0x6A1D36C8],\n    [0x1112E6AD, 0x91D692A1]\n  ];\n\n  // now initialized\n  _initialized = true;\n}\n\n/**\n * Updates a SHA-512 state with the given byte buffer.\n *\n * @param s the SHA-512 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nfunction _update(s, w, bytes) {\n  // consume 512 bit (128 byte) chunks\n  var t1_hi, t1_lo;\n  var t2_hi, t2_lo;\n  var s0_hi, s0_lo;\n  var s1_hi, s1_lo;\n  var ch_hi, ch_lo;\n  var maj_hi, maj_lo;\n  var a_hi, a_lo;\n  var b_hi, b_lo;\n  var c_hi, c_lo;\n  var d_hi, d_lo;\n  var e_hi, e_lo;\n  var f_hi, f_lo;\n  var g_hi, g_lo;\n  var h_hi, h_lo;\n  var i, hi, lo, w2, w7, w15, w16;\n  var len = bytes.length();\n  while(len >= 128) {\n    // the w array will be populated with sixteen 64-bit big-endian words\n    // and then extended into 64 64-bit words according to SHA-512\n    for(i = 0; i < 16; ++i) {\n      w[i][0] = bytes.getInt32() >>> 0;\n      w[i][1] = bytes.getInt32() >>> 0;\n    }\n    for(; i < 80; ++i) {\n      // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)\n      w2 = w[i - 2];\n      hi = w2[0];\n      lo = w2[1];\n\n      // high bits\n      t1_hi = (\n        ((hi >>> 19) | (lo << 13)) ^ // ROTR 19\n        ((lo >>> 29) | (hi << 3)) ^ // ROTR 61/(swap + ROTR 29)\n        (hi >>> 6)) >>> 0; // SHR 6\n      // low bits\n      t1_lo = (\n        ((hi << 13) | (lo >>> 19)) ^ // ROTR 19\n        ((lo << 3) | (hi >>> 29)) ^ // ROTR 61/(swap + ROTR 29)\n        ((hi << 26) | (lo >>> 6))) >>> 0; // SHR 6\n\n      // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)\n      w15 = w[i - 15];\n      hi = w15[0];\n      lo = w15[1];\n\n      // high bits\n      t2_hi = (\n        ((hi >>> 1) | (lo << 31)) ^ // ROTR 1\n        ((hi >>> 8) | (lo << 24)) ^ // ROTR 8\n        (hi >>> 7)) >>> 0; // SHR 7\n      // low bits\n      t2_lo = (\n        ((hi << 31) | (lo >>> 1)) ^ // ROTR 1\n        ((hi << 24) | (lo >>> 8)) ^ // ROTR 8\n        ((hi << 25) | (lo >>> 7))) >>> 0; // SHR 7\n\n      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)\n      w7 = w[i - 7];\n      w16 = w[i - 16];\n      lo = (t1_lo + w7[1] + t2_lo + w16[1]);\n      w[i][0] = (t1_hi + w7[0] + t2_hi + w16[0] +\n        ((lo / 0x100000000) >>> 0)) >>> 0;\n      w[i][1] = lo >>> 0;\n    }\n\n    // initialize hash value for this chunk\n    a_hi = s[0][0];\n    a_lo = s[0][1];\n    b_hi = s[1][0];\n    b_lo = s[1][1];\n    c_hi = s[2][0];\n    c_lo = s[2][1];\n    d_hi = s[3][0];\n    d_lo = s[3][1];\n    e_hi = s[4][0];\n    e_lo = s[4][1];\n    f_hi = s[5][0];\n    f_lo = s[5][1];\n    g_hi = s[6][0];\n    g_lo = s[6][1];\n    h_hi = s[7][0];\n    h_lo = s[7][1];\n\n    // round function\n    for(i = 0; i < 80; ++i) {\n      // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)\n      s1_hi = (\n        ((e_hi >>> 14) | (e_lo << 18)) ^ // ROTR 14\n        ((e_hi >>> 18) | (e_lo << 14)) ^ // ROTR 18\n        ((e_lo >>> 9) | (e_hi << 23))) >>> 0; // ROTR 41/(swap + ROTR 9)\n      s1_lo = (\n        ((e_hi << 18) | (e_lo >>> 14)) ^ // ROTR 14\n        ((e_hi << 14) | (e_lo >>> 18)) ^ // ROTR 18\n        ((e_lo << 23) | (e_hi >>> 9))) >>> 0; // ROTR 41/(swap + ROTR 9)\n\n      // Ch(e, f, g) (optimized the same way as SHA-1)\n      ch_hi = (g_hi ^ (e_hi & (f_hi ^ g_hi))) >>> 0;\n      ch_lo = (g_lo ^ (e_lo & (f_lo ^ g_lo))) >>> 0;\n\n      // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)\n      s0_hi = (\n        ((a_hi >>> 28) | (a_lo << 4)) ^ // ROTR 28\n        ((a_lo >>> 2) | (a_hi << 30)) ^ // ROTR 34/(swap + ROTR 2)\n        ((a_lo >>> 7) | (a_hi << 25))) >>> 0; // ROTR 39/(swap + ROTR 7)\n      s0_lo = (\n        ((a_hi << 4) | (a_lo >>> 28)) ^ // ROTR 28\n        ((a_lo << 30) | (a_hi >>> 2)) ^ // ROTR 34/(swap + ROTR 2)\n        ((a_lo << 25) | (a_hi >>> 7))) >>> 0; // ROTR 39/(swap + ROTR 7)\n\n      // Maj(a, b, c) (optimized the same way as SHA-1)\n      maj_hi = ((a_hi & b_hi) | (c_hi & (a_hi ^ b_hi))) >>> 0;\n      maj_lo = ((a_lo & b_lo) | (c_lo & (a_lo ^ b_lo))) >>> 0;\n\n      // main algorithm\n      // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)\n      lo = (h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1]);\n      t1_hi = (h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] +\n        ((lo / 0x100000000) >>> 0)) >>> 0;\n      t1_lo = lo >>> 0;\n\n      // t2 = s0 + maj modulo 2^64 (carry lo overflow)\n      lo = s0_lo + maj_lo;\n      t2_hi = (s0_hi + maj_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n      t2_lo = lo >>> 0;\n\n      h_hi = g_hi;\n      h_lo = g_lo;\n\n      g_hi = f_hi;\n      g_lo = f_lo;\n\n      f_hi = e_hi;\n      f_lo = e_lo;\n\n      // e = (d + t1) modulo 2^64 (carry lo overflow)\n      lo = d_lo + t1_lo;\n      e_hi = (d_hi + t1_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n      e_lo = lo >>> 0;\n\n      d_hi = c_hi;\n      d_lo = c_lo;\n\n      c_hi = b_hi;\n      c_lo = b_lo;\n\n      b_hi = a_hi;\n      b_lo = a_lo;\n\n      // a = (t1 + t2) modulo 2^64 (carry lo overflow)\n      lo = t1_lo + t2_lo;\n      a_hi = (t1_hi + t2_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n      a_lo = lo >>> 0;\n    }\n\n    // update hash state (additional modulo 2^64)\n    lo = s[0][1] + a_lo;\n    s[0][0] = (s[0][0] + a_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[0][1] = lo >>> 0;\n\n    lo = s[1][1] + b_lo;\n    s[1][0] = (s[1][0] + b_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[1][1] = lo >>> 0;\n\n    lo = s[2][1] + c_lo;\n    s[2][0] = (s[2][0] + c_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[2][1] = lo >>> 0;\n\n    lo = s[3][1] + d_lo;\n    s[3][0] = (s[3][0] + d_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[3][1] = lo >>> 0;\n\n    lo = s[4][1] + e_lo;\n    s[4][0] = (s[4][0] + e_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[4][1] = lo >>> 0;\n\n    lo = s[5][1] + f_lo;\n    s[5][0] = (s[5][0] + f_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[5][1] = lo >>> 0;\n\n    lo = s[6][1] + g_lo;\n    s[6][0] = (s[6][0] + g_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[6][1] = lo >>> 0;\n\n    lo = s[7][1] + h_lo;\n    s[7][0] = (s[7][0] + h_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[7][1] = lo >>> 0;\n\n    len -= 128;\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","_update","s","w","bytes","t1_hi","t1_lo","t2_hi","t2_lo","s1_lo","ch_lo","maj_hi","maj_lo","a_hi","a_lo","b_hi","b_lo","c_hi","c_lo","d_hi","d_lo","e_hi","e_lo","f_hi","f_lo","g_hi","g_lo","h_hi","h_lo","i","len","length","getInt32","w2","hi","lo","w15","w7","w16","s1_hi","ch_hi","s0_hi","s0_lo","_k","forge","sha512","md","algorithms","sha384","create","sha384.create","sha256","sha224","sha512.create","algorithm","_initialized","_padding","String","fromCharCode","util","fillString","_states","Error","_state","_h","_input","createBuffer","_w","Array","wi","digestLength","replace","toLowerCase","blockLength","messageLength","fullMessageLength","messageLengthSize","md.start","messageLength128","int32s","push","slice","start","update","md.update","msg","encoding","encodeUtf8","putBytes","read","compact","digest","md.digest","finalBlock","substr","next","carry","bits","putInt32","h","rval","hlen"]
}
